'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slateBase64Serializer = require('slate-base64-serializer');

var _slateBase64Serializer2 = _interopRequireDefault(_slateBase64Serializer);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _getWindow = require('get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _keycode = require('keycode');

var _keycode2 = _interopRequireDefault(_keycode);

var _slate = require('slate');

var _transferTypes = require('../constants/transfer-types');

var _transferTypes2 = _interopRequireDefault(_transferTypes);

var _getHtmlFromNativePaste = require('../utils/get-html-from-native-paste');

var _getHtmlFromNativePaste2 = _interopRequireDefault(_getHtmlFromNativePaste);

var _getPoint = require('../utils/get-point');

var _getPoint2 = _interopRequireDefault(_getPoint);

var _getTransferData = require('../utils/get-transfer-data');

var _getTransferData2 = _interopRequireDefault(_getTransferData);

var _setTransferData = require('../utils/set-transfer-data');

var _setTransferData2 = _interopRequireDefault(_setTransferData);

var _environment = require('../constants/environment');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Debug.
 *
 * @type {Function}
 */

var debug = (0, _debug2.default)('slate:plugins:before');

/**
 * The core "before" plugin, which is designed to execute before any other
 * user-land plugins in the stack.
 *
 * @param {Object} options
 * @return {Object}
 */

function BeforePlugin() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var composingCount = 0;
  var isComposing = false;
  var isCopying = false;
  var isDragging = false;
  var isInternalDrag = null;
  var isShifting = false;

  /**
   * On before input.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   * @param {Editor} editor
   */

  function onBeforeInput(event, data, change, editor) {
    debug('onBeforeInput', { event: event, data: data });

    var state = change.state;
    var selection = state.selection;
    var anchorKey = selection.anchorKey,
        anchorOffset = selection.anchorOffset,
        focusKey = selection.focusKey,
        focusOffset = selection.focusOffset;

    // Prevent default because input should never be handled by the browser.

    event.preventDefault();

    // COMPAT: In iOS, when using predictive text suggestions, the native
    // selection will be changed to span the existing word, so that the word is
    // replaced. But the `select` fires after the `beforeInput` event, even
    // though the native selection is updated. So we need to manually check if
    // the selection has gotten out of sync, and adjust it if so. (03/18/2017)
    var window = (0, _getWindow2.default)(event.target);
    var native = window.getSelection();
    var a = (0, _getPoint2.default)(native.anchorNode, native.anchorOffset, state, editor);
    var f = (0, _getPoint2.default)(native.focusNode, native.focusOffset, state, editor);
    var hasMismatch = a && f && (anchorKey != a.key || anchorOffset != a.offset || focusKey != f.key || focusOffset != f.offset);

    // If there is a mismatch, correct it for future plugins.
    if (hasMismatch) {
      change.select({
        anchorKey: a.key,
        anchorOffset: a.offset,
        focusKey: f.key,
        focusOffset: f.offset
      });
    }
  }

  /**
   * On blur.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onBlur(event, data, change) {
    debug('onBlur', { event: event, data: data });

    // If we're currently copying, the blur is actually from the after plugin's
    // copy logic blurring the editor as it focus the cloned node, so ignore it.
    if (isCopying) {
      return true;
    }
  }

  /**
   * On change.
   *
   * @param {Change} change
   * @param {Editor} editor
   */

  function onChange(change, editor) {
    debug('onChange', { change: change });

    var state = change.state;

    var schema = editor.getSchema();
    var prevState = editor.getState();

    // PERF: Skip normalizing if the document hasn't changed, since the core
    // schema only normalizes changes to the document, not selection.
    if (prevState && state.document == prevState.document) return;

    // Normalize the state against the user-land schema before any other
    // plugins interact with it.
    change.normalize(schema);
  }

  /**
   * On composition end.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onCompositionEnd(event, data, change) {
    debug('onCompositionEnd', { event: event, data: data });

    var count = composingCount;

    // After a timeout, unset the composing flag if no new compositions have
    // been started in the meantime.
    setTimeout(function () {
      if (composingCount > count) return;
      isComposing = false;
    });
  }

  /**
   * On composition start.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onCompositionStart(event, data, change) {
    debug('onCompositionStart', { event: event, data: data });

    // Set the is composing state.
    isComposing = true;

    // Keep track of how many compositions have started, so that we can know
    // when the composing state ends.
    composingCount++;
  }

  /**
   * On copy.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onCopy(event, data, change) {
    debug('onCopy', { event: event, data: data });
    onCutOrCopy(event, data, change);
  }

  /**
   * On cut.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onCut(event, data, change) {
    debug('onCut', { event: event, data: data });
    onCutOrCopy(event, data, change);
  }

  /**
   * On cut or copy.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onCutOrCopy(event, data, change) {
    debug('onCutOrCopy', { event: event, data: data });

    var window = (0, _getWindow2.default)(event.target);

    // Set the copying state.
    isCopying = true;

    // Unset the copying state after the copy has taken.
    window.requestAnimationFrame(function () {
      isCopying = false;
    });

    // Add the current document fragment to the data.
    var state = change.state;

    data.type = 'fragment';
    data.fragment = state.fragment;
  }

  /**
   * On drag end.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onDragEnd(event, data, change) {
    debug('onDragEnd', { event: event, data: data });

    // Reset the dragging state.
    isDragging = false;
    isInternalDrag = null;
  }

  /**
   * On drag over.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onDragOver(event, data, change) {
    debug('onDragOver', { event: event, data: data });

    // If the dragging state hasn't already been set, then set it, and that
    // means that this is not an internal drag since it didn't start here.
    if (!isDragging) {
      isDragging = true;
      isInternalDrag = false;
    }
  }

  /**
   * On drag start.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onDragStart(event, data, change) {
    debug('onDragStart', { event: event, data: data });

    // Set the dragging state.
    isDragging = true;
    isInternalDrag = true;

    // Add the data from the native event's `dataTransfer` object.
    var dataTransfer = event.nativeEvent.dataTransfer;

    var transfer = (0, _getTransferData2.default)(dataTransfer);
    Object.keys(transfer).forEach(function (key) {
      data[key] = transfer[key];
    });

    // If it's not a node being dragging, then it's a fragment, so set the
    // current fragment as data on the `dataTransfer` object.
    if (!data.type == 'node') {
      var state = change.state;

      var encoded = _slateBase64Serializer2.default.serializeNode(state.fragment);
      (0, _setTransferData2.default)(dataTransfer, _transferTypes2.default.fragment, encoded);
    }
  }

  /**
   * On drop.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onDrop(event, data, change) {
    debug('onDrop', { event: event, data: data });

    // Add the native event's drop data to the `data` object.
    var nativeEvent = event.nativeEvent;
    var dataTransfer = nativeEvent.dataTransfer,
        x = nativeEvent.x,
        y = nativeEvent.y;

    var transfer = (0, _getTransferData2.default)(dataTransfer);
    Object.keys(transfer).forEach(function (key) {
      data[key] = transfer[key];
    });

    // Resolve the point where the drop occured.
    var window = (0, _getWindow2.default)(event.target);
    var _props = this.props,
        state = _props.state,
        editor = _props.editor;

    var range = void 0;

    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)
    if (window.document.caretRangeFromPoint) {
      range = window.document.caretRangeFromPoint(x, y);
    } else {
      range = window.document.createRange();
      range.setStart(nativeEvent.rangeParent, nativeEvent.rangeOffset);
    }

    var _range = range,
        startContainer = _range.startContainer,
        startOffset = _range.startOffset;

    var point = (0, _getPoint2.default)(startContainer, startOffset, state, editor);
    if (!point) return;

    var target = _slate.Selection.create({
      anchorKey: point.key,
      anchorOffset: point.offset,
      focusKey: point.key,
      focusOffset: point.offset,
      isFocused: true,
      isBackward: false
    });

    // Add drop-specific information to the data.
    data.target = target;

    // COMPAT: Edge throws "Permission denied" errors when
    // accessing `dropEffect` or `effectAllowed` (2017/7/12)
    try {
      data.effect = dataTransfer.dropEffect;
    } catch (err) {
      data.effect = null;
    }

    // Set an `isInternal` flag on the data if the drag is internal, for other
    // plugins to use when making decisions.
    if (data.type == 'fragment' || data.type == 'node') {
      data.isInternal = isInternalDrag;
    }
  }

  /**
   * On focus.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onFocus(event, data, change) {
    debug('onFocus', { event: event, data: data });

    // If we're currently copying, the focus is actually from the after plugin's
    // copy logic focusing the editor again after the cloned node, so ignore it.
    if (isCopying) {
      return true;
    }
  }

  /**
   * On input.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   * @param {Editor} editor
   */

  function onInput(event, data, change, editor) {
    debug('onInput', { event: event, data: data });

    var state = change.state;

    // If we're currently composing, abort.

    if (isComposing) {
      return true;
    }

    // Or if the editor isn't focus, abort.
    if (state.isBlurred) {
      return true;
    }

    // Get the native selection point.
    var window = (0, _getWindow2.default)(event.target);
    var native = window.getSelection();
    var anchorNode = native.anchorNode,
        anchorOffset = native.anchorOffset;

    var point = (0, _getPoint2.default)(anchorNode, anchorOffset, state, editor);

    // If we're not able to resolve a native point, abort.
    if (!point) {
      return true;
    }

    // Get the range in question.
    var key = point.key,
        start = point.start,
        end = point.end;
    var selection = state.selection;

    var target = selection.moveAnchorTo(key, start).moveFocusTo(key, end);

    // Add the `target` to the `data` for other plugins to use.
    data.target = target;
  }

  /**
   * On key down.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onKeyDown(event, data, change) {
    debug('onKeyDown', { event: event, data: data });

    var altKey = event.altKey,
        ctrlKey = event.ctrlKey,
        metaKey = event.metaKey,
        shiftKey = event.shiftKey,
        which = event.which;

    var key = (0, _keycode2.default)(which);

    // Keep track of an `isShifting` flag, because it's often used to trigger
    // "Paste and Match Style" commands, but isn't available on the event in a
    // normal paste event.
    if (key == 'shift') {
      isShifting = true;
    }

    // When composing, these characters commit the composition but also move the
    // selection before we're able to handle it, so prevent their default,
    // selection-moving behavior.
    if (isComposing && (key == 'left' || key == 'right' || key == 'up' || key == 'down')) {
      event.preventDefault();
      return true;
    }

    // Add helpful properties for handling hotkeys to the data object.
    data.code = which;
    data.key = key;
    data.isAlt = altKey;
    data.isCmd = _environment.IS_MAC ? metaKey && !altKey : false;
    data.isCtrl = ctrlKey && !altKey;
    data.isLine = _environment.IS_MAC ? metaKey : false;
    data.isMeta = metaKey;
    data.isMod = _environment.IS_MAC ? metaKey && !altKey : ctrlKey && !altKey;
    data.isModAlt = _environment.IS_MAC ? metaKey && altKey : ctrlKey && altKey;
    data.isShift = shiftKey;
    data.isWord = _environment.IS_MAC ? altKey : ctrlKey;

    // These key commands have native behavior in contenteditable elements which
    // will cause our state to be out of sync, so prevent them.
    if (key == 'enter' || key == 'backspace' || key == 'delete' || key == 'b' && data.isMod || key == 'i' && data.isMod || key == 'y' && data.isMod || key == 'z' && data.isMod) {
      event.preventDefault();
    }
  }

  /**
   * On key up.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   */

  function onKeyUp(event, data, change) {
    debug('onKeyUp', { event: event, data: data });

    var key = (0, _keycode2.default)(which);

    // If it's the shift key, reset the shift state.
    if (key == 'shift') {
      this.tmp.isShifting = false;
    }

    // Add helpful properties for handling hotkeys to the data object.
    var altKey = event.altKey,
        ctrlKey = event.ctrlKey,
        metaKey = event.metaKey,
        shiftKey = event.shiftKey,
        which = event.which;

    data.code = which;
    data.key = key;
    data.isAlt = altKey;
    data.isCmd = _environment.IS_MAC ? metaKey && !altKey : false;
    data.isCtrl = ctrlKey && !altKey;
    data.isLine = _environment.IS_MAC ? metaKey : false;
    data.isMeta = metaKey;
    data.isMod = _environment.IS_MAC ? metaKey && !altKey : ctrlKey && !altKey;
    data.isModAlt = _environment.IS_MAC ? metaKey && altKey : ctrlKey && altKey;
    data.isShift = shiftKey;
    data.isWord = _environment.IS_MAC ? altKey : ctrlKey;
  }

  /**
   * On paste.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   * @param {Editor} editor
   */

  function onPaste(event, data, change, editor) {
    debug('onPaste', { event: event, data: data });

    // Attach the `isShift` flag, so that people can use it to trigger "Paste
    // and Match Style" logic.
    data.isShift = isShifting;

    // Add the data from the native event's `clipboardData` object.
    var transfer = (0, _getTransferData2.default)(event.clipboardData);
    Object.keys(transfer).forEach(function (key) {
      data[key] = transfer[key];
    });

    // COMPAT: In IE 11, only plain text can be retrieved from the event's
    // `clipboardData`. To get HTML, use the browser's native paste action which
    // can only be handled synchronously. (2017/06/23)
    if (_environment.IS_IE) {
      // Do not use `event.preventDefault()` as we need the native paste action.
      (0, _getHtmlFromNativePaste2.default)(event.target, function (html) {
        // If pasted HTML can be retreived, it is added to the `data` object,
        // setting the `type` to `html`.
        var stack = editor.getStack();
        var newData = _extends({}, data, { html: html, type: 'html' });
        var newEvent = event.persist();
        stack.onPaste(newEvent, newData);
      });

      // Return true to prevent the stack from continuing.
      return true;
    }

    // Prevent the default paste from occuring.
    event.preventDefault();
  }

  /**
   * On select.
   *
   * @param {Event} event
   * @param {Object} data
   * @param {Change} change
   * @param {Editor} editor
   */

  function onSelect(event, data, change, editor) {
    debug('onSelect', { event: event, data: data });

    // If we're currently copying or composing, ignore it because these result
    // in temporary selection updates.
    if (isCopying || isComposing) {
      return true;
    }

    // Try to resolve a new `selection` object for plugins to use...
    var window = (0, _getWindow2.default)(event.target);
    var native = window.getSelection();
    var state = change.state;
    var document = state.document,
        selection = state.selection;

    // If there are no ranges, the editor was blurred natively.

    if (!native.rangeCount) {
      selection = selection.set('isFocused', false);
    }

    // Otherwise, determine the selection from the native one.
    else {
        var anchorNode = native.anchorNode,
            anchorOffset = native.anchorOffset,
            focusNode = native.focusNode,
            focusOffset = native.focusOffset;

        var anchor = (0, _getPoint2.default)(anchorNode, anchorOffset, state, editor);
        var focus = (0, _getPoint2.default)(focusNode, focusOffset, state, editor);

        // If we're not able to resolve the anchor or focus, abort.
        if (!anchor || !focus) {
          return true;
        }

        var properties = {
          anchorKey: anchor.key,
          anchorOffset: anchor.offset,
          focusKey: focus.key,
          focusOffset: focus.offset,
          isFocused: true,
          isBackward: null
        };

        var anchorText = document.getNode(anchor.key);
        var focusText = document.getNode(focus.key);
        var anchorInline = document.getClosestInline(anchor.key);
        var focusInline = document.getClosestInline(focus.key);
        var focusBlock = document.getClosestBlock(focus.key);
        var anchorBlock = document.getClosestBlock(anchor.key);

        // COMPAT: If the anchor point is at the start of a non-void, and the
        // focus point is inside a void node with an offset that isn't `0`, set
        // the focus offset to `0`. This is due to void nodes <span>'s being
        // positioned off screen, resulting in the offset always being greater
        // than `0`. Since we can't know what it really should be, and since an
        // offset of `0` is less destructive because it creates a hanging
        // selection, go with `0`. (2017/09/07)
        if (anchorBlock && !anchorBlock.isVoid && anchor.offset == 0 && focusBlock && focusBlock.isVoid && focus.offset != 0) {
          properties.focusOffset = 0;
        }

        // COMPAT: If the selection is at the end of a non-void inline node, and
        // there is a node after it, put it in the node after instead. This
        // standardizes the behavior, since it's indistinguishable to the user.
        if (anchorInline && !anchorInline.isVoid && anchor.offset == anchorText.text.length) {
          var block = document.getClosestBlock(anchor.key);
          var next = block.getNextText(anchor.key);
          if (next) {
            properties.anchorKey = next.key;
            properties.anchorOffset = 0;
          }
        }

        if (focusInline && !focusInline.isVoid && focus.offset == focusText.text.length) {
          var _block = document.getClosestBlock(focus.key);
          var _next = _block.getNextText(focus.key);
          if (_next) {
            properties.focusKey = _next.key;
            properties.focusOffset = 0;
          }
        }

        selection = selection.merge(properties).normalize(document);
      }

    // Add the `selection` to the `data` object for plugins to use.
    data.selection = selection;
  }

  /**
   * Return the core plugin.
   *
   * @type {Object}
   */

  return {
    onBlur: onBlur,
    onCompositionEnd: onCompositionEnd,
    onCompositionStart: onCompositionStart,
    onChange: onChange,
    onBeforeInput: onBeforeInput,
    onCopy: onCopy,
    onCut: onCut,
    onDragEnd: onDragEnd,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onFocus: onFocus,
    onInput: onInput,
    onKeyDown: onKeyDown,
    onKeyUp: onKeyUp,
    onPaste: onPaste,
    onSelect: onSelect
  };
}

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = BeforePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,