'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('promise-each-concurrency');

function promiseEach(iterable, iterator) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$concurrency = _ref.concurrency,
      concurrency = _ref$concurrency === undefined ? 4 : _ref$concurrency;

  var availableThreads = [];
  var maxThreadId = 0;
  var itemsDone = 0;

  return new Promise(function (resolve, reject) {
    var inFlightItems = 0;
    var aborted = false;

    function onSuccess() {
      log('iterator completed with success');
      inFlightItems--;
      doMore(); // eslint-disable-line no-use-before-define
    }

    function onError(err) {
      log('iterator had error', err);
      aborted = true;
      reject(err);
    }

    var nextItem = /*#__PURE__*/_regenerator2.default.mark(function next() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, x;

      return _regenerator2.default.wrap(function next$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 3;
              _iterator = iterable[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 13;
                break;
              }

              x = _step.value;

              log('retrieve next value in iterable');
              _context.next = 10;
              return x;

            case 10:
              _iteratorNormalCompletion = true;
              _context.next = 5;
              break;

            case 13:
              _context.next = 19;
              break;

            case 15:
              _context.prev = 15;
              _context.t0 = _context['catch'](3);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 19:
              _context.prev = 19;
              _context.prev = 20;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 22:
              _context.prev = 22;

              if (!_didIteratorError) {
                _context.next = 25;
                break;
              }

              throw _iteratorError;

            case 25:
              return _context.finish(22);

            case 26:
              return _context.finish(19);

            case 27:
            case 'end':
              return _context.stop();
          }
        }
      }, next, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    })();

    function doMore() {
      if (aborted) {
        log('we were aborted, refusing to do more work');
        return;
      }

      var _loop = function _loop() {
        log('next item in queue');
        var next = nextItem.next();
        if (next.done) {
          log('queue is finished');
          if (inFlightItems === 0) {
            log('everyone is done');
            resolve();
            return {
              v: void 0
            };
          }
          return 'break';
        }
        inFlightItems++;
        itemsDone++;

        if (!availableThreads.length) {
          availableThreads.push(maxThreadId);
          maxThreadId++;
        }

        log('run iterator');
        var threadId = availableThreads.shift();

        iterator(next.value, threadId).then(function () {
          availableThreads.push(threadId);
          onSuccess();
        }, onError);
      };

      _loop2: while (inFlightItems < concurrency) {
        var _ret = _loop();

        switch (_ret) {
          case 'break':
            break _loop2;

          default:
            if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
        }
      }
    }

    doMore();
  });
}

exports.default = promiseEach;
module.exports = exports['default'];