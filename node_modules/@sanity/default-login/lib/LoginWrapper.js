"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _user = _interopRequireDefault(require("part:@sanity/base/user"));

var _loginDialog = _interopRequireDefault(require("part:@sanity/base/login-dialog"));

var _sanityStudioLogo = _interopRequireDefault(require("part:@sanity/base/sanity-studio-logo"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _CookieTest = _interopRequireDefault(require("./CookieTest"));

var _ErrorDialog = _interopRequireDefault(require("./ErrorDialog"));

var _UnauthorizedUser = _interopRequireDefault(require("./UnauthorizedUser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const isProjectLogin = _client.default.config().useProjectHostname;

const projectId = isProjectLogin && _client.default.config().projectId ? _client.default.config().projectId : null;

class LoginWrapper extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isLoading: true,
      user: null,
      error: null
    });

    _defineProperty(this, "handleRetry", () => {
      this.setState({
        error: null,
        isLoading: true
      });

      _user.default.actions.retry();
    });
  }

  componentWillMount() {
    this.userSubscription = _user.default.currentUser.subscribe({
      next: evt => this.setState({
        user: evt.user,
        error: evt.error,
        isLoading: false
      }),
      error: _error => this.setState({
        error: _error,
        isLoading: false
      })
    });
  }

  componentWillUnmount() {
    this.userSubscription.unsubscribe();
  }

  render() {
    const _this$state = this.state,
          error = _this$state.error,
          user = _this$state.user,
          isLoading = _this$state.isLoading;
    const _this$props = this.props,
          children = _this$props.children,
          LoadingScreen = _this$props.LoadingScreen,
          sanityLogo = _this$props.sanityLogo,
          SanityLogo = _this$props.SanityLogo;

    if (sanityLogo) {
      const warning = 'sanityLogo is a deprecated property on LoginWrapper. Pass a React component to the SanityLogo property instead.';
      console.warn(warning); // eslint-disable-line no-console
    }

    if (isLoading) {
      return typeof LoadingScreen === 'function' ? _react.default.createElement(LoadingScreen, {
        center: true,
        fullscreen: true
      }) : LoadingScreen;
    }

    if (error) {
      return _react.default.createElement(_ErrorDialog.default, {
        onRetry: this.handleRetry,
        error: error
      });
    }

    if (!user) {
      return _react.default.createElement(_CookieTest.default, this.props, _react.default.createElement(_loginDialog.default, {
        title: this.props.title,
        description: this.props.description,
        SanityLogo: SanityLogo,
        projectId: projectId
      }));
    }

    if (projectId && !user.role) {
      return _react.default.createElement(_UnauthorizedUser.default, {
        user: user
      });
    }

    return typeof children === 'function' ? children(user) : children;
  }

}

exports.default = LoginWrapper;

_defineProperty(LoginWrapper, "propTypes", {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired,
  title: _propTypes.default.node,
  description: _propTypes.default.node,
  sanityLogo: _propTypes.default.node,
  SanityLogo: _propTypes.default.func,
  LoadingScreen: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func])
});

_defineProperty(LoginWrapper, "defaultProps", {
  title: 'Log in with',
  description: null,
  sanityLogo: null,
  SanityLogo: _sanityStudioLogo.default,
  LoadingScreen: _spinner.default
});