"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Toolbar = _interopRequireDefault(require("./styles/Toolbar.css"));

var _InsertBlocks = _interopRequireWildcard(require("./InsertBlocks"));

var _Decorators = _interopRequireWildcard(require("./Decorators"));

var _ListItems = _interopRequireWildcard(require("./ListItems"));

var _BlockStyle = _interopRequireWildcard(require("./BlockStyle"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _fullscreenIcon = _interopRequireDefault(require("part:@sanity/base/fullscreen-icon"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _AnnotationButton = _interopRequireDefault(require("./AnnotationButton"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Toolbar extends _react.default.Component {
  shouldComponentUpdate(nextProps, nextState) {
    return this.props.decorators !== nextProps.decorators || this.props.blockStyles !== nextProps.blockStyles || this.props.fullscreen !== nextProps.fullscreen || this.props.annotations !== nextProps.annotations;
  }

  render() {
    const _this$props = this.props,
          className = _this$props.className,
          fullscreen = _this$props.fullscreen,
          annotations = _this$props.annotations,
          decorators = _this$props.decorators,
          listItems = _this$props.listItems,
          blockStyles = _this$props.blockStyles,
          insertBlocks = _this$props.insertBlocks,
          onInsertBlock = _this$props.onInsertBlock,
          onMarkButtonClick = _this$props.onMarkButtonClick,
          onListButtonClick = _this$props.onListButtonClick,
          onBlockStyleChange = _this$props.onBlockStyleChange,
          onAnnotationButtonClick = _this$props.onAnnotationButtonClick,
          style = _this$props.style;
    return _react.default.createElement("div", {
      className: `${_Toolbar.default.root} ${className}`,
      style: style
    }, _react.default.createElement("div", {
      className: _Toolbar.default.blockFormatContainer
    }, _react.default.createElement(_BlockStyle.default, {
      value: blockStyles.value,
      items: blockStyles.items,
      onSelect: onBlockStyleChange
    })), _react.default.createElement("div", {
      className: _Toolbar.default.canBeMinimized
    }, _react.default.createElement("div", {
      className: _Toolbar.default.formatButtons
    }, decorators && decorators.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.decoratorContainer
    }, _react.default.createElement(_Decorators.default, {
      decorators: decorators,
      onClick: onMarkButtonClick
    })), listItems && listItems.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.listFormatContainer
    }, _react.default.createElement(_ListItems.default, {
      listItems: listItems,
      onClick: onListButtonClick
    }))), annotations && annotations.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.annotationsContainer
    }, annotations.map(annotation => {
      return _react.default.createElement(_AnnotationButton.default, {
        key: `annotationButton${annotation.type.name}`,
        annotation: annotation,
        onClick: onAnnotationButtonClick
      });
    }))), insertBlocks.length > 0 && _react.default.createElement("div", {
      className: _Toolbar.default.insertContainer
    }, _react.default.createElement(_InsertBlocks.default, {
      blocks: insertBlocks,
      onInsertBlock: onInsertBlock
    })), _react.default.createElement("div", {
      className: _Toolbar.default.fullscreenButtonContainer
    }, _react.default.createElement(_default.default, {
      kind: "simple",
      onClick: this.props.onFullscreenEnable,
      icon: fullscreen ? _closeIcon.default : _fullscreenIcon.default
    })));
  }

}

exports.default = Toolbar;

_defineProperty(Toolbar, "propTypes", {
  className: _propTypes.default.string,
  style: _propTypes.default.object,
  fullscreen: _propTypes.default.bool,
  blockStyles: _propTypes.default.shape({
    value: _propTypes.default.arrayOf(_BlockStyle.blockStyleShape),
    items: _propTypes.default.arrayOf(_BlockStyle.blockStyleShape),
    onSelect: _propTypes.default.func
  }),
  annotations: _propTypes.default.arrayOf(_propTypes.default.object),
  decorators: _propTypes.default.arrayOf(_Decorators.decorator),
  insertBlocks: _propTypes.default.arrayOf(_InsertBlocks.insertBlockShape),
  listItems: _propTypes.default.arrayOf(_ListItems.listItem),
  onInsertBlock: _propTypes.default.func,
  onFullscreenEnable: _propTypes.default.func,
  onMarkButtonClick: _propTypes.default.func,
  onListButtonClick: _propTypes.default.func,
  onBlockStyleChange: _propTypes.default.func,
  onAnnotationButtonClick: _propTypes.default.func
});