"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _default = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _imagetool = _interopRequireDefault(require("@sanity/imagetool"));

var _HotspotImage = _interopRequireDefault(require("@sanity/imagetool/HotspotImage"));

var _imageLoader = _interopRequireDefault(require("part:@sanity/components/utilities/image-loader"));

var _constants = require("@sanity/imagetool/constants");

var _ImageToolInput = _interopRequireDefault(require("./styles/ImageToolInput.css"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PREVIEW_ASPECT_RATIOS = [['Portrait', 9 / 16], ['Square', 1], ['Landscape', 16 / 9], ['Panorama', 4]];

class ImageToolInput extends _react.default.Component {
  constructor(props) {
    super();

    _defineProperty(this, "handleChangeEnd", () => {
      const _this$props = this.props,
            onChange = _this$props.onChange,
            readOnly = _this$props.readOnly,
            type = _this$props.type;
      const value = this.state.value; // For backwards compatibility, where hotspot/crop might not have a named type yet

      const cropField = type.fields.find(field => field.name === 'crop' && field.type.name !== 'object');
      const hotspotField = type.fields.find(field => field.name === 'hotspot' && field.type.name !== 'object');

      if (!readOnly) {
        const crop = cropField ? _objectSpread({
          _type: cropField.type.name
        }, value.crop) : value.crop;
        const hotspot = hotspotField ? _objectSpread({
          _type: hotspotField.type.name
        }, value.hotspot) : value.hotspot;
        onChange(_PatchEvent.default.from([(0, _PatchEvent.set)(crop, ['crop']), (0, _PatchEvent.set)(hotspot, ['hotspot'])]));
      }

      this.setState({
        value: this.props.value
      });
    });

    _defineProperty(this, "handleChange", nextValue => {
      this.setState({
        value: nextValue
      });
    });

    this.state = {
      value: props.value
    };
  }

  componentWillReceiveProps(nextProps) {
    this.setState({
      value: nextProps.value
    });
  }

  render() {
    const _this$props2 = this.props,
          imageUrl = _this$props2.imageUrl,
          level = _this$props2.level,
          readOnly = _this$props2.readOnly;
    const value = this.state.value;
    return _react.default.createElement("div", {
      className: _ImageToolInput.default.root
    }, _react.default.createElement(_default.default, {
      legend: "Hotspot and crop",
      level: level
    }, _react.default.createElement("div", {
      className: _ImageToolInput.default.wrapper
    }, _react.default.createElement("div", {
      className: _ImageToolInput.default.imageToolContainer
    }, _react.default.createElement(_imagetool.default, {
      value: value,
      src: imageUrl,
      readOnly: readOnly,
      onChangeEnd: this.handleChangeEnd,
      onChange: this.handleChange
    })), _react.default.createElement("div", {
      className: _ImageToolInput.default.previewsContainer
    }, _react.default.createElement("h2", null, "Preview"), _react.default.createElement("div", {
      className: _ImageToolInput.default.previews
    }, PREVIEW_ASPECT_RATIOS.map(([title, ratio]) => {
      return _react.default.createElement("div", {
        key: ratio,
        className: _ImageToolInput.default.preview
      }, _react.default.createElement("h4", null, title), _react.default.createElement("div", {
        className: _ImageToolInput.default.previewImage
      }, _react.default.createElement(_imageLoader.default, {
        src: imageUrl
      }, ({
        image,
        error
      }) => error ? _react.default.createElement("span", null, "Unable to load image: ", error.message) : _react.default.createElement(_HotspotImage.default, {
        aspectRatio: ratio,
        src: image.src,
        srcAspectRatio: image.width / image.height,
        hotspot: value.hotspot || _constants.DEFAULT_HOTSPOT,
        crop: value.crop || _constants.DEFAULT_CROP
      }))));
    }))))));
  }

}

exports.default = ImageToolInput;