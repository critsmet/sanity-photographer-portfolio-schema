"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineSelections = combineSelections;
exports.toGradientQuery = toGradientQuery;
exports.reassemble = reassemble;

var _values2 = _interopRequireDefault(require("lodash/values"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _identity2 = _interopRequireDefault(require("lodash/identity"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function combineSelections(selections) {
  return (0, _values2.default)(selections.reduce((output, [id, fields], index) => {
    const key = (0, _sortBy2.default)(fields.join(','), _identity2.default);

    if (!output[key]) {
      output[key] = {
        fields: fields,
        ids: [],
        map: []
      };
    }

    const idx = output[key].ids.length;
    output[key].ids[idx] = id;
    output[key].map[idx] = index;
    return output;
  }, {}));
}

function stringifyId(id) {
  return JSON.stringify(id);
}

function toSubQuery({
  ids,
  fields
}) {
  const allFields = [..._constants.INCLUDE_FIELDS_QUERY, ...fields];
  return `*[_id in [${ids.map(stringifyId).join(',')}]][0...${ids.length}]{${allFields.join(',')}}`;
}

function toGradientQuery(combinedSelections) {
  return `[${combinedSelections.map(toSubQuery).join(',')}][0...${combinedSelections.length}]`;
}

function reassemble(queryResult, combinedSelections) {
  return queryResult.reduce((reprojected, subResult, index) => {
    const map = combinedSelections[index].map;
    map.forEach((resultIdx, i) => {
      const id = combinedSelections[index].ids[i];
      reprojected[resultIdx] = subResult.find(doc => doc._id === id);
    });
    return reprojected;
  }, []);
}