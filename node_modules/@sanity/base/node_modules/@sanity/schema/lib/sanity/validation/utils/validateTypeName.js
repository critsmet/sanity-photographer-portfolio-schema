"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateTypeName = validateTypeName;

var _leven = _interopRequireDefault(require("leven"));

var _humanizeList = _interopRequireDefault(require("humanize-list"));

var _createValidationResult = require("../createValidationResult");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const quote = str => `"${str}"`;

function validateTypeName(typeName, visitorContext) {
  const possibleTypeNames = visitorContext.getTypeNames();

  if (!typeName) {
    return [(0, _createValidationResult.error)(`Type is missing a type. Valid types are: ${(0, _humanizeList.default)(possibleTypeNames)}`, _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  if (typeof typeName !== 'string') {
    return [(0, _createValidationResult.error)(`Type has an invalid "type"-property - should be a string. Valid types are: ${(0, _humanizeList.default)(possibleTypeNames)}`, _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  const isValid = possibleTypeNames.includes(typeName);

  if (!isValid) {
    const suggestions = possibleTypeNames.map(possibleTypeName => {
      if (!possibleTypeName || !typeName) {}

      return [(0, _leven.default)(typeName, possibleTypeName), possibleTypeName];
    }).filter(([distance]) => distance < 3).map(([_, name]) => name);
    const suggestion = suggestions.length > 0 ? ` Did you mean ${(0, _humanizeList.default)(suggestions.map(quote), {
      conjunction: 'or'
    })}?` : '';
    return [(0, _createValidationResult.error)(`Unknown type: ${typeName}.${suggestion} Valid types are: ${(0, _humanizeList.default)(possibleTypeNames)}`)];
  }

  return [];
}