"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectType = void 0;

var _startCase2 = _interopRequireDefault(require("lodash/startCase"));

var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _utils = require("./utils");

var _createPreviewGetter = _interopRequireDefault(require("../preview/createPreviewGetter"));

var _guessOrderingConfig = _interopRequireDefault(require("../ordering/guessOrderingConfig"));

var _resolveSearchFields = _interopRequireDefault(require("../resolveSearchFields"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const OVERRIDABLE_FIELDS = ['jsonType', 'orderings', 'type', 'name', 'title', 'readOnly', 'hidden', 'description', '__unstable_searchFields', 'options', 'inputComponent'];
const ObjectType = {
  get() {
    return {
      name: 'object',
      type: null,
      jsonType: 'object'
    };
  },

  extend(rawSubTypeDef, createMemberType) {
    const subTypeDef = _objectSpread({
      fields: []
    }, rawSubTypeDef);

    const options = _objectSpread({}, subTypeDef.options || {});

    const parsed = Object.assign((0, _pick2.default)(this.get(), OVERRIDABLE_FIELDS), subTypeDef, {
      type: this.get(),
      title: subTypeDef.title || (subTypeDef.name ? (0, _startCase2.default)(subTypeDef.name) : ''),
      options: options,
      orderings: subTypeDef.orderings || (0, _guessOrderingConfig.default)(subTypeDef),
      fields: subTypeDef.fields.map(fieldDef => {
        const name = fieldDef.name,
              fieldset = fieldDef.fieldset,
              rest = _objectWithoutProperties(fieldDef, ["name", "fieldset"]);

        const compiledField = {
          name,
          fieldset
        };
        return (0, _utils.lazyGetter)(compiledField, 'type', () => {
          return createMemberType(_objectSpread({}, rest, {
            title: fieldDef.title || (0, _startCase2.default)(name)
          }));
        });
      })
    });
    (0, _utils.lazyGetter)(parsed, 'fieldsets', () => {
      return createFieldsets(subTypeDef, parsed.fields);
    });
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(subTypeDef));
    (0, _utils.lazyGetter)(parsed, '__unstable_searchFields', () => (0, _resolveSearchFields.default)(parsed), {
      enumerable: false
    });
    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },

        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "object"');
          }

          const current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, OVERRIDABLE_FIELDS), {
            title: extensionDef.title || subTypeDef.title,
            type: parent
          });
          (0, _utils.lazyGetter)(current, '__unstable_searchFields', () => parent.__unstable_searchFields);
          return subtype(current);
        }
      };
    }
  }

};
exports.ObjectType = ObjectType;

function createFieldsets(typeDef, fields) {
  const fieldsetsDef = typeDef.fieldsets || [];
  const fieldsets = fieldsetsDef.map(fieldset => {
    const name = fieldset.name,
          title = fieldset.title,
          description = fieldset.description,
          options = fieldset.options;
    return {
      name,
      title,
      description,
      options,
      fields: []
    };
  });
  const fieldsetsByName = (0, _keyBy2.default)(fieldsets, 'name');
  return fields.map(field => {
    if (field.fieldset) {
      const fieldset = fieldsetsByName[field.fieldset];

      if (!fieldset) {
        throw new Error(`Group '${field.fieldset}' is not defined in schema for type '${typeDef.name}'`);
      }

      fieldset.fields.push(field); // Return the fieldset if its the first time we encounter a field in this fieldset

      return fieldset.fields.length === 1 ? fieldset : null;
    }

    return {
      single: true,
      field
    };
  }).filter(Boolean);
}