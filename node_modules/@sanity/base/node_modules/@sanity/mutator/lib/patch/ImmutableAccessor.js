"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// An immutable probe/writer for plain JS objects that will never mutate
// the provided _value in place. Each setter returns a new (wrapped) version
// of the value.
var ImmutableAccessor =
/*#__PURE__*/
function () {
  function ImmutableAccessor(_value, path) {
    _classCallCheck(this, ImmutableAccessor);

    _defineProperty(this, "_value", void 0);

    _defineProperty(this, "path", void 0);

    this._value = _value;
    this.path = path || [];
  }

  _createClass(ImmutableAccessor, [{
    key: "containerType",
    value: function containerType() {
      if (Array.isArray(this._value)) {
        return 'array';
      } else if (this._value !== null && _typeof(this._value) == 'object') {
        return 'object';
      }

      return 'primitive';
    } // Common reader, supported by all containers

  }, {
    key: "get",
    value: function get() {
      return this._value;
    } // Array reader

  }, {
    key: "length",
    value: function length() {
      if (this.containerType() !== 'array') {
        throw new Error("Won't return length of non-indexable _value");
      }

      return this._value.length;
    }
  }, {
    key: "getIndex",
    value: function getIndex(i) {
      if (this.containerType() !== 'array') {
        return false;
      }

      if (i >= this.length()) {
        return null;
      }

      return new ImmutableAccessor(this._value[i], this.path.concat(i));
    } // Object reader

  }, {
    key: "hasAttribute",
    value: function hasAttribute(key) {
      if (this.containerType() !== 'object') {
        return false;
      }

      return this._value.hasOwnProperty(key);
    }
  }, {
    key: "attributeKeys",
    value: function attributeKeys() {
      if (this.containerType() !== 'object') {
        return [];
      }

      return Object.keys(this._value);
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(key) {
      if (this.containerType() !== 'object') {
        throw new Error('getAttribute only applies to plain objects');
      }

      if (!this.hasAttribute(key)) {
        return null;
      }

      return new ImmutableAccessor(this._value[key], this.path.concat(key));
    } // Common writer, supported by all containers

  }, {
    key: "set",
    value: function set(value) {
      if (value === this._value) {
        return this;
      }

      return new ImmutableAccessor(value, this.path);
    }
  }, {
    key: "setAccessor",
    value: function setAccessor(accessor) {
      return accessor;
    } // array writer interface

  }, {
    key: "setIndex",
    value: function setIndex(i, value) {
      if (value === this._value[i]) {
        return this;
      }

      var nextValue = this._value.slice();

      nextValue[i] = value;
      return new ImmutableAccessor(nextValue, this.path);
    }
  }, {
    key: "setIndexAccessor",
    value: function setIndexAccessor(i, accessor) {
      return this.setIndex(i, accessor.get());
    }
  }, {
    key: "unsetIndices",
    value: function unsetIndices(indices) {
      var length = this._value.length;
      var nextValue = []; // Copy every _value _not_ in the indices array over to the newValue

      for (var i = 0; i < length; i++) {
        if (indices.indexOf(i) === -1) {
          nextValue.push(this._value[i]);
        }
      }

      return new ImmutableAccessor(nextValue, this.path);
    }
  }, {
    key: "insertItemsAt",
    value: function insertItemsAt(pos, items) {
      var nextValue;

      if (this.length() === 0 && pos === 0) {
        nextValue = items;
      } else {
        nextValue = this._value.slice(0, pos).concat(items).concat(this._value.slice(pos));
      }

      return new ImmutableAccessor(nextValue, this.path);
    } // Object writer interface

  }, {
    key: "setAttribute",
    value: function setAttribute(key, value) {
      if (this.containerType() !== 'object') {
        throw new Error('Unable to set attribute of non-object container');
      }

      if (value === this._value[key]) {
        return this;
      }

      var nextValue = Object.assign({}, this._value);
      nextValue[key] = value;
      return new ImmutableAccessor(nextValue, this.path);
    }
  }, {
    key: "setAttributeAccessor",
    value: function setAttributeAccessor(key, accessor) {
      return this.setAttribute(key, accessor.get());
    }
  }, {
    key: "unsetAttribute",
    value: function unsetAttribute(key) {
      if (this.containerType() != 'object') {
        throw new Error('Unable to unset attribute of non-object container');
      }

      var nextValue = Object.assign({}, this._value);
      delete nextValue[key];
      return new ImmutableAccessor(nextValue, this.path);
    } // primitive writer interface

  }, {
    key: "mutate",
    value: function mutate(fn) {
      if (this.containerType() != 'primitive') {
        throw new Error("Won't mutate container types");
      }

      var nextValue = fn(this._value);
      return new ImmutableAccessor(nextValue, this.path);
    }
  }]);

  return ImmutableAccessor;
}();

exports.default = ImmutableAccessor;