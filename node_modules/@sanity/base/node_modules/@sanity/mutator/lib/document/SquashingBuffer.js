"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Mutation = _interopRequireDefault(require("./Mutation"));

var _extractWithPath = _interopRequireDefault(require("../jsonpath/extractWithPath"));

var _arrayToJSONMatchPath = _interopRequireDefault(require("../jsonpath/arrayToJSONMatchPath"));

var _diffMatchPatch2 = _interopRequireDefault(require("diff-match-patch"));

var _debug = _interopRequireDefault(require("./debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Implements a buffer for mutations that incrementally optimises the mutations by eliminating set-operations that
// overwrite earlier set-operations, and rewrite set-operations that change strings into other strings into diffMatchPatch
// operations.
var SquashingBuffer =
/*#__PURE__*/
function () {
  // The document forming the basis of this squash
  // The operations in the out-Mutation are not able to be optimized any further
  // The document after the out-Mutation has been applied, but before the staged operations are committed.
  // setOperations contain the latest set operation by path. If the set-operations are updating strings to new
  // strings, they are rewritten as diffMatchPatch operations, any new set operations on the same paths overwrites
  // any older set operations. Only set-operations assigning plain values to plain values gets optimized like this.
  function SquashingBuffer(doc) {
    _classCallCheck(this, SquashingBuffer);

    _defineProperty(this, "BASIS", void 0);

    _defineProperty(this, "out", []);

    _defineProperty(this, "PRESTAGE", void 0);

    _defineProperty(this, "setOperations", void 0);

    _defineProperty(this, "staged", void 0);

    if (doc) {
      (0, _debug.default)('Reset mutation buffer to rev %s', doc._rev);
    } else {
      (0, _debug.default)('Reset mutation buffer state to document being deleted');
    }

    this.staged = [];
    this.setOperations = {};
    this.BASIS = doc;
    this.PRESTAGE = doc;
    this.dmp = new _diffMatchPatch2.default();
  }

  _createClass(SquashingBuffer, [{
    key: "add",
    value: function add(mut) {
      var _this = this;

      mut.mutations.forEach(function (op) {
        return _this.addOperation(op);
      });
    }
  }, {
    key: "hasChanges",
    value: function hasChanges() {
      return this.out.length > 0 || Object.keys(this.setOperations).length > 0;
    } // Extracts the mutations in this buffer. After this is done, the buffer lifecycle is over and the client should
    // create an new one with the new, updated BASIS.

  }, {
    key: "purge",
    value: function purge(txnId) {
      this.stashStagedOperations();
      var result = null;

      if (this.out.length > 0) {
        (0, _debug.default)('Purged mutation buffer');
        result = new _Mutation.default({
          mutations: this.out,
          resultRev: txnId,
          transactionId: txnId
        });
      }

      this.out = [];
      return result;
    }
  }, {
    key: "addOperation",
    value: function addOperation(op) {
      // Is this a set patch, and only a set patch, and does it apply to the document at hand?
      if (op.patch && op.patch.set && op.patch.id === this.PRESTAGE._id && Object.keys(op.patch).length == 2) {
        // console.log("Attempting to apply optimised set patch")
        var setPatch = op.patch.set;
        var unoptimizable = {}; // Apply all optimisable keys in the patch

        var _arr = Object.keys(setPatch);

        for (var _i = 0; _i < _arr.length; _i++) {
          var path = _arr[_i];

          // console.log("...", path)
          if (setPatch.hasOwnProperty(path)) {
            if (!this.optimiseSetOperation(path, setPatch[path])) {
              // If not optimisable, add to unoptimizable set
              unoptimizable[path] = setPatch[path];
            }
          }
        } // If any weren't optimisable, add them to an unoptimised set-operation, then
        // stash everything.


        if (Object.keys(unoptimizable).length > 0) {
          (0, _debug.default)('Unoptimizable set-operation detected, purging optimization buffer');
          this.staged.push({
            patch: {
              id: this.PRESTAGE._id,
              set: unoptimizable
            }
          });
          this.stashStagedOperations();
        }

        return;
      }

      (0, _debug.default)('Unoptimizable mutation detected, purging optimization buffer'); // console.log("Unoptimizable operation, stashing", JSON.stringify(op))
      // Un-optimisable operations causes everything to be stashed

      this.staged.push(op);
      this.stashStagedOperations();
    } // Attempt to perform one single set operation in an optimised manner, return value reflects whether the
    // operation could be performed.

  }, {
    key: "optimiseSetOperation",
    value: function optimiseSetOperation(path, nextValue) {
      // console.log('optimiseSetOperation', path, nextValue)
      // If target value is not a plain value, unable to optimise
      if (_typeof(nextValue) === 'object') {
        // console.log("Not optimisable because next value is object")
        return false;
      } // Check the source values, if there is more than one value being assigned,
      // we won't optimise


      var matches = (0, _extractWithPath.default)(path, this.PRESTAGE); // If we are not overwriting exactly one key, this cannot be optimised, so we bail

      if (matches.length !== 1) {
        // console.log('Not optimisable because match count is != 1', JSON.stringify(matches))
        return false;
      } // Okay, we are assigning exactly one value to exactly one existing slot, so we might optimise


      var match = matches[0]; // If the value of the match is an array or object, we cannot safely optimise this since the meaning
      // of pre-existing operations might change (in theory, at least), so we bail

      if (_typeof(match.value) === 'object') {
        // console.log("Not optimisable because old value is object")
        return false;
      } // If the new and old value are the equal, we optimise this operation by discarding it
      // Now, let's build the operation


      var op;

      if (match.value === nextValue) {
        // If new and old values are equal, we optimise this by deleting the operation
        // console.log("Omitting operation")
        op = null;
      } else if (typeof match.value === 'string' && typeof nextValue === 'string') {
        // console.log("Rewriting to dmp")
        // We are updating a string to another string, so we are making a diffMatchPatch
        var patch = this.dmp.patch_make(match.value, nextValue).map(function (patch) {
          return patch.toString();
        }).join('');
        op = {
          patch: {
            id: this.PRESTAGE._id,
            diffMatchPatch: _defineProperty({}, path, patch)
          }
        };
      } else {
        // console.log("Not able to rewrite to dmp, making normal set")
        // We are changing the type of the value, so must make a normal set-operation
        op = {
          patch: {
            id: this.PRESTAGE._id,
            set: _defineProperty({}, path, nextValue)
          }
        };
      } // Let's make a plain, concrete path from the array-path. We use this to keep only the latest set
      // operation touching this path in the buffer.


      var canonicalPath = (0, _arrayToJSONMatchPath.default)(match.path); // Store this operation, overwriting any previous operations touching this same path

      if (op) {
        this.setOperations[canonicalPath] = op;
      } else {
        delete this.setOperations[canonicalPath];
      } // Signal that we succeeded in optimizing this patch


      return true;
    }
  }, {
    key: "stashStagedOperations",
    value: function stashStagedOperations() {
      var _this2 = this,
          _this$out;

      // console.log('stashStagedOperations')
      // Short circuit if there are no staged operations
      var nextOps = []; // Extract the existing outgoing operations if any

      Object.keys(this.setOperations).forEach(function (key) {
        nextOps.push(_this2.setOperations[key]);
      });
      nextOps.push.apply(nextOps, _toConsumableArray(this.staged));

      if (nextOps.length > 0) {
        this.PRESTAGE = new _Mutation.default({
          mutations: nextOps
        }).apply(this.PRESTAGE);
        this.staged = [];
        this.setOperations = {};
      }

      (_this$out = this.out).push.apply(_this$out, nextOps);
    } // Rebases given the new base-document. Returns the new "edge" document with the buffered changes
    // integrated.

  }, {
    key: "rebase",
    value: function rebase(newBasis) {
      this.stashStagedOperations();

      if (newBasis === null) {
        // If document was just deleted, we must throw out local changes
        this.out = [];
        this.PRESTAGE = this.BASIS = newBasis;
      } else {
        this.BASIS = newBasis;

        if (this.out) {
          this.PRESTAGE = new _Mutation.default({
            mutations: this.out
          }).apply(this.BASIS);
        } else {
          this.PRESTAGE = this.BASIS;
        }
      }

      return this.PRESTAGE;
    }
  }]);

  return SquashingBuffer;
}();

exports.default = SquashingBuffer;