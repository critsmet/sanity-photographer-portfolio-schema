"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extract;

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _PlainProbe = _interopRequireDefault(require("./PlainProbe"));

var _jsonpath = require("../jsonpath");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function extract(path, value) {
  var result = [];

  var appendResult = function appendResult(values) {
    result.push.apply(result, _toConsumableArray(values));
  };

  var matcher = _jsonpath.Matcher.fromPath(path).setPayload(appendResult);

  var accessor = new _PlainProbe.default(value);
  descend(matcher, accessor);
  return result;
}

function descend(matcher, accessor) {
  var _matcher$match = matcher.match(accessor),
      leads = _matcher$match.leads,
      delivery = _matcher$match.delivery;

  leads.forEach(function (lead) {
    accessorsFromTarget(lead.target, accessor).forEach(function (childAccessor) {
      descend(lead.matcher, childAccessor);
    });
  });

  if (delivery) {
    delivery.targets.forEach(function (target) {
      delivery.payload(accessorsFromTarget(target, accessor));
    });
  }
}

function accessorsFromTarget(target, accessor) {
  var result = [];

  if (target.isIndexReference()) {
    target.toIndicies(accessor).forEach(function (i) {
      result.push(accessor.getIndex(i));
    });
  } else if (target.isAttributeReference()) {
    result.push(accessor.getAttribute(target.name()));
  } else if (target.isSelfReference()) {
    result.push(accessor);
  } else {
    throw new Error("Unable to derive accessor for target ".concat(target.toString()));
  }

  return (0, _compact2.default)(result);
}