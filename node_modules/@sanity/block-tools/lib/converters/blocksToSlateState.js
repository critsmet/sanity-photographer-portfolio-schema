"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = blocksToSlateState;

var _randomKey = _interopRequireDefault(require("../util/randomKey"));

var _resolveJsType = _interopRequireDefault(require("../util/resolveJsType"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function resolveTypeName(value) {
  const jsType = (0, _resolveJsType.default)(value);
  return jsType === 'object' && '_type' in value && value._type || jsType;
}

function hasKeys(obj) {
  for (const key in obj) {
    // eslint-disable-line guard-for-in
    return true;
  }

  return false;
}

function toRawMark(markName) {
  return {
    kind: 'mark',
    type: markName
  };
}

function sanitySpanToRawSlateBlockNode(span, sanityBlock) {
  if (!span._key) {
    span._key = (0, _randomKey.default)(12);
  }

  if (span._type !== 'span') {
    return {
      kind: 'inline',
      isVoid: true,
      type: span._type,
      key: span._key,
      data: {
        value: span
      },
      nodes: [{
        kind: 'text',
        ranges: [{
          kind: 'range',
          text: '',
          marks: []
        }]
      }]
    };
  }

  const text = span.text,
        _span$marks = span.marks,
        marks = _span$marks === void 0 ? [] : _span$marks;
  const decorators = marks.filter(mark => {
    return !sanityBlock.markDefs.map(def => def._key).includes(mark);
  });
  const annotationKeys = marks.filter(x => decorators.indexOf(x) == -1);
  let annotations;

  if (annotationKeys.length) {
    annotations = {};
    annotationKeys.forEach(key => {
      const annotation = sanityBlock.markDefs.find(def => def._key === key);
      annotations[annotation._type] = annotation;
    });
  }

  const range = {
    kind: 'range',
    text: text,
    marks: decorators.filter(Boolean).map(toRawMark)
  };

  if (!annotations) {
    return {
      kind: 'text',
      key: span._key,
      ranges: [range]
    };
  }

  return {
    kind: 'inline',
    isVoid: false,
    key: span._key,
    type: 'span',
    data: {
      annotations
    },
    nodes: [{
      kind: 'text',
      ranges: [range]
    }]
  };
} // Block type object


function sanityBlockToRawNode(sanityBlock, type) {
  // eslint-disable-next-line no-unused-vars
  const children = sanityBlock.children,
        _type = sanityBlock._type,
        markDefs = sanityBlock.markDefs,
        rest = _objectWithoutProperties(sanityBlock, ["children", "_type", "markDefs"]);

  const restData = hasKeys(rest) ? {
    data: _objectSpread({
      _type
    }, rest)
  } : {};

  if (!sanityBlock._key) {
    sanityBlock._key = (0, _randomKey.default)(12);
  }

  return _objectSpread({
    kind: 'block',
    key: sanityBlock._key,
    isVoid: false,
    type: 'contentBlock'
  }, restData, {
    nodes: children.map(child => sanitySpanToRawSlateBlockNode(child, sanityBlock))
  });
} // Embedded object


function sanityBlockItemToRaw(blockItem, type) {
  if (!blockItem._key) {
    blockItem._key = (0, _randomKey.default)(12);
  }

  return {
    kind: 'block',
    key: blockItem._key,
    type: type ? type.name : '__unknown',
    // __unknown is needed to map to component in slate schema, see prepareSlateForBlockEditor.js
    isVoid: true,
    data: {
      value: blockItem
    },
    nodes: [{
      kind: 'text',
      ranges: [{
        kind: 'range',
        text: '',
        marks: []
      }]
    }]
  };
}

function sanityBlockItemToRawNode(blockItem, type) {
  const blockItemType = resolveTypeName(blockItem);
  const memberType = type.of.find(ofType => ofType.name === blockItemType);
  return blockItemType === 'block' ? sanityBlockToRawNode(blockItem, memberType) : sanityBlockItemToRaw(blockItem, memberType);
}

function sanityBlocksArrayToRawNodes(blockArray, type) {
  return blockArray.filter(Boolean) // this is a temporary guard against null values, @todo: remove
  .map(item => sanityBlockItemToRawNode(item, type));
}

function blocksToSlateState(array, type) {
  const defaultNodes = [_objectSpread({}, _constants.SLATE_DEFAULT_BLOCK, {
    nodes: [{
      kind: 'text',
      text: ''
    }]
  })];
  return {
    kind: 'state',
    document: {
      kind: 'document',
      data: {},
      nodes: array && array.length > 0 ? sanityBlocksArrayToRawNodes(array, type) : defaultNodes
    }
  };
}