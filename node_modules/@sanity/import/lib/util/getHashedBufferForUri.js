"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const crypto = require('crypto');

const miss = require('mississippi');

const getUri = require('get-uri');

const retryOnFailure = require('./retryOnFailure');

module.exports = uri => retryOnFailure(() => getHashedBufferForUri(uri));

function getHashedBufferForUri(_x) {
  return _getHashedBufferForUri.apply(this, arguments);
}

function _getHashedBufferForUri() {
  _getHashedBufferForUri = _asyncToGenerator(function* (uri) {
    const stream = yield getStream(uri);
    return new Promise((resolve, reject) => {
      const hash = crypto.createHash('sha1');
      const chunks = [];
      stream.on('data', chunk => {
        chunks.push(chunk);
        hash.update(chunk);
      });
      miss.finished(stream, err => {
        if (err) {
          reject(err);
          return;
        }

        resolve({
          buffer: Buffer.concat(chunks),
          sha1hash: hash.digest('hex')
        });
      });
    });
  });
  return _getHashedBufferForUri.apply(this, arguments);
}

function getStream(uri) {
  return new Promise((resolve, reject) => getUri(uri, (err, stream) => {
    if (err) {
      reject(new Error(readError(uri, err)));
      return;
    }

    resolve(stream);
  }));
}

function readError(uri, err) {
  return `Error while fetching asset from "${uri}":\n${err.message}`;
}