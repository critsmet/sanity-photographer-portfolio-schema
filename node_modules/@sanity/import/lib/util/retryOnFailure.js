"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* eslint-disable no-await-in-loop, max-depth, consistent-return */
const debug = require('debug')('sanity:import');

const _require = require('lodash'),
      defaults = _require.defaults;

module.exports =
/*#__PURE__*/
function () {
  var _retryOnFailure = _asyncToGenerator(function* (op, opts = {}) {
    const options = defaults({}, opts, {
      delay: 150,
      maxTries: 3
    });

    for (let attempt = 1; attempt <= options.maxTries; attempt++) {
      try {
        return yield op();
      } catch (err) {
        if (attempt === options.maxTries) {
          debug('Error encountered, max retries hit - giving up (attempt #%d)', attempt);
          throw err;
        } else {
          const ms = options.delay * attempt;
          debug('Error encountered, waiting %d ms before retrying (attempt #%d)', ms, attempt);
          debug('Error details: %s', err.message);
          yield delay(ms);
        }
      }
    }
  });

  return function retryOnFailure(_x) {
    return _retryOnFailure.apply(this, arguments);
  };
}();

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}