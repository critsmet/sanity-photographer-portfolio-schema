"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const debug = require('debug')('sanity:import:array');

const flatten = require('lodash/flatten');

const _require = require('./assetRefs'),
      getAssetRefs = _require.getAssetRefs,
      unsetAssetRefs = _require.unsetAssetRefs,
      absolutifyPaths = _require.absolutifyPaths;

const assignArrayKeys = require('./assignArrayKeys');

const assignDocumentId = require('./assignDocumentId');

const uploadAssets = require('./uploadAssets');

const documentHasErrors = require('./documentHasErrors');

const batchDocuments = require('./batchDocuments');

const importBatches = require('./importBatches');

const _require2 = require('./references'),
      getStrongRefs = _require2.getStrongRefs,
      weakenStrongRefs = _require2.weakenStrongRefs,
      setTypeOnReferences = _require2.setTypeOnReferences,
      strengthenReferences = _require2.strengthenReferences;

function importDocuments(_x, _x2, _x3) {
  return _importDocuments.apply(this, arguments);
}

function _importDocuments() {
  _importDocuments = _asyncToGenerator(function* (documents, options, importers) {
    options.onProgress({
      step: 'Reading/validating data file'
    });
    documents.some(documentHasErrors.validate); // Replace relative asset paths if one is defined
    // (file://./images/foo-bar.png -> file:///abs/olute/images/foo-bar.png)

    const absPathed = documents.map(doc => absolutifyPaths(doc, options.assetsBase)); // Assign document IDs for document that do not have one. This is necessary
    // for us to strengthen references and import assets properly.

    const ided = absPathed.map(doc => assignDocumentId(doc)); // User might not have applied `_key` on array elements which are objects;
    // if this is the case, generate random keys to help realtime engine

    const keyed = ided.map(doc => assignArrayKeys(doc)); // Sanity prefers to have a `_type` on every object. Make sure references
    // has `_type` set to `reference`.

    const docs = keyed.map(doc => setTypeOnReferences(doc)); // Find references that will need strengthening when import is done

    const strongRefs = docs.map(getStrongRefs).filter(Boolean); // Extract asset references from the documents

    const assetRefs = flatten(docs.map(getAssetRefs).filter(ref => ref.length)); // Remove asset references from the documents

    const assetless = docs.map(unsetAssetRefs); // Make strong references weak so they can be imported in any order

    const weakened = assetless.map(weakenStrongRefs); // Create batches of documents to import. Try to keep batches below a certain
    // byte-size (since document may vary greatly in size depending on type etc)

    const batches = batchDocuments(weakened); // Trigger actual import process

    debug('Starting import of documents');
    const docsImported = yield importBatches(batches, options); // Documents are imported, now proceed with post-import operations

    debug('Uploading assets');

    const _ref = yield uploadAssets(assetRefs, options),
          assetWarnings = _ref.failures; // Strengthen references


    debug('Strengthening references');
    yield strengthenReferences(strongRefs, options); // Return number of documents imported

    return {
      numDocs: docsImported,
      warnings: assetWarnings
    };
  });
  return _importDocuments.apply(this, arguments);
}

module.exports = importDocuments;