"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const path = require('path');

const fse = require('fs-extra');

const globby = require('globby');

const getFileUrl = require('file-url');

const debug = require('debug')('sanity:import:folder');

module.exports =
/*#__PURE__*/
function () {
  var _importFromFolder = _asyncToGenerator(function* (fromDir, options, importers) {
    debug('Importing from folder %s', fromDir);
    const dataFiles = yield globby('*.ndjson', {
      cwd: fromDir,
      absolute: true
    });

    if (dataFiles.length === 0) {
      throw new Error(`No .ndjson file found in ${fromDir}`);
    }

    if (dataFiles.length > 1) {
      throw new Error(`More than one .ndjson file found in ${fromDir} - only one is supported`);
    }

    const assetMap = yield fse.readJson(path.join(fromDir, 'assets.json')).catch(() => ({}));
    const dataFile = dataFiles[0];
    debug('Importing from file %s', dataFile);
    const stream = fse.createReadStream(dataFile);
    const images = yield globby('images/*', {
      cwd: fromDir,
      absolute: true
    });
    const files = yield globby('files/*', {
      cwd: fromDir,
      absolute: true
    });
    const unreferencedAssets = [].concat(images.map(imgPath => `image#${getFileUrl(imgPath, {
      resolve: false
    })}`)).concat(files.map(filePath => `file#${getFileUrl(filePath, {
      resolve: false
    })}`));
    debug('Queueing %d assets', unreferencedAssets.length);

    const streamOptions = _objectSpread({}, options, {
      unreferencedAssets,
      assetsBase: fromDir,
      assetMap
    });

    const result = yield importers.fromStream(stream, streamOptions, importers);

    if (options.deleteOnComplete) {
      yield fse.remove(fromDir);
    }

    return result;
  });

  return function importFromFolder(_x, _x2, _x3) {
    return _importFromFolder.apply(this, arguments);
  };
}();