"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = guessPreviewFields;

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _omitBy2 = _interopRequireDefault(require("lodash/omitBy"));

var _arrify = _interopRequireDefault(require("arrify"));

var _fallbackPrepare = require("./fallbackPrepare");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const TITLE_CANDIDATES = ['title', 'name', 'label', 'heading', 'header', 'caption'];
const DESCRIPTION_CANDIDATES = ['description', ...TITLE_CANDIDATES];

function fieldHasReferenceTo(fieldDef, refType) {
  return (0, _arrify.default)(fieldDef.to || []).some(memberTypeDef => memberTypeDef.type === refType);
}

function isImageAssetField(fieldDef) {
  return fieldHasReferenceTo(fieldDef, 'sanity.imageAsset');
}

function resolveImageAssetPath(typeDef) {
  const fields = typeDef.fields || [];
  const imageAssetField = fields.find(isImageAssetField);

  if (imageAssetField) {
    return imageAssetField.name;
  }

  const fieldWithImageAsset = fields.find(fieldDef => (fieldDef.fields || []).some(isImageAssetField));
  return fieldWithImageAsset ? `${fieldWithImageAsset.name}.asset` : undefined;
}

function isFileAssetField(fieldDef) {
  return fieldHasReferenceTo(fieldDef, 'sanity.fileAsset');
}

function resolveFileAssetPath(typeDef) {
  const fields = typeDef.fields || [];
  const assetField = fields.find(isFileAssetField);

  if (assetField) {
    return assetField.name;
  }

  const fieldWithFileAsset = fields.find(fieldDef => (fieldDef.fields || []).some(isFileAssetField));
  return fieldWithFileAsset ? `${fieldWithFileAsset.name}.asset` : undefined;
}

function guessPreviewFields(rawObjectTypeDef) {
  const objectTypeDef = _objectSpread({
    fields: []
  }, rawObjectTypeDef);

  const stringFieldNames = objectTypeDef.fields.filter(field => field.type === 'string').map(field => field.name); // Check if we have fields with names that is listed in candidate fields

  let titleField = TITLE_CANDIDATES.find(candidate => stringFieldNames.includes(candidate));
  let descField = DESCRIPTION_CANDIDATES.find(candidate => candidate !== titleField && stringFieldNames.includes(candidate));

  if (!titleField) {
    // Pick first defined string field
    titleField = stringFieldNames[0]; // Pick next as desc

    descField = stringFieldNames[1];
  }

  const mediaField = objectTypeDef.fields.find(field => field.type === 'image');
  const imageAssetPath = resolveImageAssetPath(objectTypeDef);

  if (!titleField) {
    const fileAssetPath = resolveFileAssetPath(objectTypeDef);

    if (fileAssetPath) {
      titleField = `${fileAssetPath}.originalFilename`;
    }

    if (imageAssetPath) {
      titleField = `${imageAssetPath}.originalFilename`;
    }
  }

  if (!titleField && !imageAssetPath) {
    // last resort, pick all fields and concat them
    const fieldNames = objectTypeDef.fields.map(field => field.name);
    const fieldMapping = fieldNames.reduce((acc, fieldName) => {
      acc[fieldName] = fieldName;
      return acc;
    }, {});
    return {
      select: fieldMapping,
      prepare: (0, _fallbackPrepare.createFallbackPrepare)(fieldNames)
    };
  }

  const select = (0, _omitBy2.default)({
    title: titleField,
    description: descField,
    imageUrl: !mediaField && imageAssetPath ? `${imageAssetPath}.url` : undefined,
    media: mediaField ? mediaField.name : undefined
  }, _isUndefined2.default);
  return {
    select: select
  };
}