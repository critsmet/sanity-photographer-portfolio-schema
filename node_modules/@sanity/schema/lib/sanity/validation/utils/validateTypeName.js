"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateTypeName = validateTypeName;

var _leven = _interopRequireDefault(require("leven"));

var _humanizeList = _interopRequireDefault(require("humanize-list"));

var _createValidationResult = require("../createValidationResult");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const quote = str => `"${str}"`;

function validateTypeName(typeName, visitorContext) {
  const possibleTypeNames = visitorContext.getTypeNames();

  if (!typeName) {
    return [(0, _createValidationResult.error)(`Type is missing a type. Valid types are: ${(0, _humanizeList.default)(possibleTypeNames)}`, _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  if (typeof typeName !== 'string') {
    return [(0, _createValidationResult.error)(`Type has an invalid "type"-property - should be a string. Valid types are: ${(0, _humanizeList.default)(possibleTypeNames)}`, _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }

  const isValid = possibleTypeNames.includes(typeName);

  if (!isValid) {
    const suggestions = possibleTypeNames.map(possibleTypeName => {
      if (!possibleTypeName || !typeName) {}

      return [(0, _leven.default)(typeName, possibleTypeName), possibleTypeName];
    }).filter((_ref) => {
      let _ref2 = _slicedToArray(_ref, 1),
          distance = _ref2[0];

      return distance < 3;
    }).map((_ref3) => {
      let _ref4 = _slicedToArray(_ref3, 2),
          _ = _ref4[0],
          name = _ref4[1];

      return name;
    });
    const suggestion = suggestions.length > 0 ? ` Did you mean ${(0, _humanizeList.default)(suggestions.map(quote), {
      conjunction: 'or'
    })}?` : '';
    return [(0, _createValidationResult.error)(`Unknown type: ${typeName}.${suggestion} Valid types are: ${(0, _humanizeList.default)(possibleTypeNames)}`)];
  }

  return [];
}