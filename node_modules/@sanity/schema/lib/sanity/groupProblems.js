"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTypeProblems = getTypeProblems;
exports.default = groupProblems;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createTypeWithMembersProblemsAccessor(memberPropertyName) {
  let getMembers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : type => type[memberPropertyName];
  return function getProblems(type, parentPath) {
    const currentPath = [...parentPath, {
      kind: 'type',
      type: type.type,
      name: type.name
    }];
    const members = getMembers(type) || [];
    const memberProblems = members.map(memberType => {
      const memberPath = [...currentPath, {
        kind: 'property',
        name: memberPropertyName
      }];
      return getTypeProblems(memberType, memberPath);
    });
    return [{
      path: currentPath,
      problems: type._problems || []
    }, ...(0, _flatten2.default)(memberProblems)];
  };
}

const arrify = val => Array.isArray(val) ? val : typeof val === 'undefined' && [] || [val];

const getObjectProblems = createTypeWithMembersProblemsAccessor('fields');
const getArrayProblems = createTypeWithMembersProblemsAccessor('of');
const getReferenceProblems = createTypeWithMembersProblemsAccessor('to', type => arrify(type.to));

function getDefaultProblems(type) {
  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return [{
    path: [...path, {
      kind: 'type',
      type: type.type,
      name: type.name
    }],
    problems: type._problems || []
  }];
}

function getTypeProblems(type) {
  let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  switch (type.type) {
    case 'object':
      {
        return getObjectProblems(type, path);
      }

    case 'document':
      {
        return getObjectProblems(type, path);
      }

    case 'array':
      {
        return getArrayProblems(type, path);
      }

    case 'reference':
      {
        return getReferenceProblems(type, path);
      }

    default:
      {
        return getDefaultProblems(type, path);
      }
  }
}

function groupProblems(types) {
  return (0, _flatten2.default)(types.map(type => getTypeProblems(type))).filter(type => type.problems.length > 0);
}