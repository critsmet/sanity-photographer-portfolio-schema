"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

var _util = require("@sanity/util");

var _export = _interopRequireDefault(require("@sanity/export"));

var _chooseDatasetPrompt = _interopRequireDefault(require("../../actions/dataset/chooseDatasetPrompt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const noop = () => null;

const helpText = `
Options
  --raw         Extract only documents, without rewriting asset references
  --no-assets   Export only non-asset documents and remove references to image assets
  --no-drafts   Export only published versions of documents
  --no-compress Skips compressing tarball entries (still generates a gzip file)
  --types       Defines which document types to export
  --overwrite   Overwrite any file with the same name

Examples
  sanity dataset export moviedb localPath.tar.gz
  sanity dataset export moviedb assetless.tar.gz --no-assets
  sanity dataset export staging staging.tar.gz --raw
  sanity dataset export staging staging.tar.gz --types products,shops
`;
var _default = {
  name: 'export',
  group: 'dataset',
  signature: '[NAME] [DESTINATION]',
  description: 'Export dataset to local filesystem as a gzipped tarball',
  helpText,
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output,
            chalk = context.chalk,
            workDir = context.workDir,
            prompt = context.prompt;
      const client = apiClient();

      const _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 2),
            targetDataset = _args$argsWithoutOpti[0],
            targetDestination = _args$argsWithoutOpti[1];

      const flags = args.extOptions;
      const absolutify = _util.pathTools.absolutify;

      if (flags.types) {
        flags.types = `${flags.types}`.split(',');
      }

      let dataset = targetDataset ? `${targetDataset}` : null;

      if (!dataset) {
        dataset = yield (0, _chooseDatasetPrompt.default)(context, {
          message: 'Select dataset to export'
        });
      } // Verify existence of dataset before trying to export from it


      const datasets = yield client.datasets.list();

      if (!datasets.find(set => set.name === dataset)) {
        throw new Error(`Dataset with name "${dataset}" not found`);
      }

      let destinationPath = targetDestination;

      if (!destinationPath) {
        destinationPath = yield prompt.single({
          type: 'input',
          message: 'Output path:',
          default: _path.default.join(workDir, `${dataset}.tar.gz`),
          filter: absolutify
        });
      }

      const outputPath = yield getOutputPath(destinationPath, dataset, prompt, flags);

      if (!outputPath) {
        output.print('Cancelled');
        return;
      } // If we are dumping to a file, let the user know where it's at


      if (outputPath !== '-') {
        output.print(`Exporting dataset "${chalk.cyan(dataset)}" to "${chalk.cyan(outputPath)}"`);
      }

      let currentStep = 'Exporting documents...';
      let spinner = output.spinner(currentStep).start();

      const onProgress = progress => {
        if (progress.step !== currentStep) {
          spinner.succeed();
          spinner = output.spinner(progress.step).start();
        } else if (progress.step === currentStep && progress.update) {
          spinner.text = `${progress.step} (${progress.current}/${progress.total})`;
        }

        currentStep = progress.step;
      };

      const start = Date.now();

      try {
        yield (0, _export.default)(_objectSpread({
          client,
          dataset,
          outputPath,
          onProgress
        }, flags));
        spinner.succeed();
      } catch (err) {
        spinner.fail();
        throw err;
      }

      output.print(`Export finished (${(0, _prettyMs.default)(Date.now() - start)})`);
    });

    return function action(_x, _x2) {
      return _action.apply(this, arguments);
    };
  }() // eslint-disable-next-line complexity

};
exports.default = _default;

function getOutputPath(_x3, _x4, _x5, _x6) {
  return _getOutputPath.apply(this, arguments);
}

function _getOutputPath() {
  _getOutputPath = _asyncToGenerator(function* (destination, dataset, prompt, flags) {
    if (destination === '-') {
      return '-';
    }

    const dstPath = _path.default.isAbsolute(destination) ? destination : _path.default.resolve(process.cwd(), destination);
    let dstStats = yield _fsExtra.default.stat(dstPath).catch(noop);
    const looksLikeFile = dstStats ? dstStats.isFile() : _path.default.basename(dstPath).indexOf('.') !== -1;

    if (!dstStats) {
      const createPath = looksLikeFile ? _path.default.dirname(dstPath) : dstPath;
      yield _fsExtra.default.mkdirs(createPath);
    }

    const finalPath = looksLikeFile ? dstPath : _path.default.join(dstPath, `${dataset}.tar.gz`);
    dstStats = yield _fsExtra.default.stat(finalPath).catch(noop);

    if (!flags.overwrite && dstStats && dstStats.isFile()) {
      const shouldOverwrite = yield prompt.single({
        type: 'confirm',
        message: `File "${finalPath}" already exists, would you like to overwrite it?`,
        default: false
      });

      if (!shouldOverwrite) {
        return false;
      }
    }

    return finalPath;
  });
  return _getOutputPath.apply(this, arguments);
}