"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'delete',
  group: 'dataset',
  signature: '[datasetName]',
  description: 'Delete a dataset within your project',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            prompt = context.prompt,
            output = context.output;

      const _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
            ds = _args$argsWithoutOpti[0];

      if (!ds) {
        throw new Error('Dataset name must be provided');
      }

      const dataset = `${ds}`;
      yield prompt.single({
        type: 'input',
        message: 'Are you ABSOLUTELY sure you want to delete this dataset?\n  Type the name of the dataset to confirm delete:',
        filter: input => `${input}`.trim(),
        validate: input => {
          return input === dataset || 'Incorrect dataset name. Ctrl + C to cancel delete.';
        }
      });
      return apiClient().datasets.delete(dataset).then(() => {
        output.print('Dataset deleted successfully');
      });
    });

    return function action(_x, _x2) {
      return _action.apply(this, arguments);
    };
  }()
};
exports.default = _default;