"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatFailure = formatFailure;
exports.getStatus = getStatus;
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = {
  name: 'attempt',
  group: 'hook',
  signature: 'ATTEMPT_ID',
  description: 'Print details of a given webhook delivery attempt',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output;

      const _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
            attemptId = _args$argsWithoutOpti[0];

      const client = apiClient();
      let attempt;

      try {
        attempt = yield client.request({
          uri: `/hooks/attempts/${attemptId}`
        });
      } catch (err) {
        throw new Error(`Hook attempt retrieval failed:\n${err.message}`);
      }

      const _attempt = attempt,
            createdAt = _attempt.createdAt,
            resultCode = _attempt.resultCode,
            resultBody = _attempt.resultBody,
            failureReason = _attempt.failureReason,
            inProgress = _attempt.inProgress;
      output.print(`Date: ${createdAt}`);
      output.print(`Status: ${getStatus(attempt)}`);
      output.print(`Status code: ${resultCode}`);

      if (attempt.isFailure) {
        output.print(`Failure: ${formatFailure(attempt)}`);
      }

      if (!inProgress && (!failureReason || failureReason === 'http')) {
        const body = resultBody ? `\n---\n${resultBody}\n---\n` : '<empty>';
        output.print(`Response body: ${body}`);
      }
    });

    return function action(_x, _x2) {
      return _action.apply(this, arguments);
    };
  }()
};
exports.default = _default;

function formatFailure(attempt, {
  includeHelp
} = {}) {
  const id = attempt.id,
        failureReason = attempt.failureReason,
        resultCode = attempt.resultCode;
  const help = includeHelp ? `(run \`sanity hook attempt ${id}\` for details)` : '';

  switch (failureReason) {
    case 'http':
      return `HTTP ${resultCode} ${help}`;

    case 'timeout':
      return 'Request timed out';

    case 'network':
      return 'Network error';

    case 'other':
    default:
  }

  return 'Unknown error';
}

function getStatus(attempt) {
  if (attempt.isFailure) {
    return 'Failed';
  }

  if (attempt.inProgress) {
    return 'In progress';
  }

  return 'Delivered';
}