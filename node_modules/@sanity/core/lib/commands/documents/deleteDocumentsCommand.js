"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const helpText = `
Delete a document from the projects configured dataset

Options
  --dataset NAME to override dataset

Example
  # Delete the document with the ID "myDocId"
  sanity documents delete myDocId

  # ID wrapped in double or single quote works equally well
  sanity documents delete 'myDocId'
`;
var _default = {
  name: 'delete',
  group: 'documents',
  signature: '[ID]',
  helpText,
  description: 'Delete a document by ID',
  action: function () {
    var _action = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output;
      const dataset = args.extOptions.dataset;

      const _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1),
            id = _args$argsWithoutOpti[0];

      if (!id) {
        throw new Error('Document ID must be specified');
      }

      const client = dataset ? apiClient().clone().config({
        dataset
      }) : apiClient();

      try {
        const _ref = yield client.delete(id),
              results = _ref.results;

        if (results.length > 0 && results[0].operation === 'delete') {
          output.print('Document deleted');
        } else {
          output.print(`Document with ID "${id}" not found`);
        }
      } catch (err) {
        throw new Error(`Failed to delete document:\n${err.message}`);
      }
    });

    return function action(_x, _x2) {
      return _action.apply(this, arguments);
    };
  }()
};
exports.default = _default;