"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const url = require('url');

module.exports =
/*#__PURE__*/
function () {
  var _addCorsOrigin = _asyncToGenerator(function* (givenOrigin, context) {
    const apiClient = context.apiClient,
          prompt = context.prompt;
    const origin = yield givenOrigin ? filterAndValidateOrigin(givenOrigin) : promptForOrigin(prompt);
    const client = apiClient({
      requireUser: true,
      requireProject: true
    });
    return client.request({
      method: 'POST',
      url: '/cors',
      body: {
        origin
      },
      maxRedirects: 0
    });
  });

  return function addCorsOrigin(_x, _x2) {
    return _addCorsOrigin.apply(this, arguments);
  };
}();

function promptForOrigin(prompt) {
  return prompt.single({
    type: 'input',
    message: 'Origin (including protocol):',
    filter: filterOrigin,
    validate: validateOrigin
  });
}

function filterOrigin(origin) {
  if (origin === '*') {
    return '*';
  }

  try {
    const parsed = url.parse(origin);

    if (!/^https?:$/.test(parsed.protocol || '')) {
      return null;
    }

    const host = parsed.host.replace(/:(80|443)$/, '');
    return `${parsed.protocol}//${host}`;
  } catch (err) {
    return null;
  }
}

function validateOrigin(origin) {
  if (origin === '*') {
    return true;
  }

  try {
    url.parse(origin || 0); // Use 0 to trigger error for unset values

    return true;
  } catch (err) {// Fall-through to error
  }

  return 'Invalid origin, must include protocol (http://some.host)';
}

function filterAndValidateOrigin(givenOrigin) {
  const origin = filterOrigin(givenOrigin);
  const result = validateOrigin(origin);

  if (result !== true) {
    throw new Error(result);
  }

  return origin;
}