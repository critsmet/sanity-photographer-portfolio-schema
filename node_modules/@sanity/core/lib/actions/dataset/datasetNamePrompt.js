"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promptForDatasetName;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const datasetNameError = 'Dataset names can only contain lowercase characters,' + 'numbers, underscores and dashes' + 'and can be at most 128 characters.';

function promptForDatasetName(prompt, options = {}) {
  return prompt.single(_objectSpread({
    type: 'input',
    message: 'Dataset name:',
    validate: name => {
      return /^[-\w]{1,128}$/.test(name) || datasetNameError;
    }
  }, options));
}