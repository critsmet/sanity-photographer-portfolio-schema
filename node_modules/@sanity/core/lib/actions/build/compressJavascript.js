"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _terser = _interopRequireDefault(require("terser"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (inputFile) {
    const content = yield _fsExtra.default.readFile(inputFile, 'utf8');
    const minified = yield minify(content, inputFile);
    yield _fsExtra.default.outputFile(inputFile, minified);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;

function minify(content, fileName) {
  return new Promise((resolve, reject) => {
    const result = _terser.default.minify(content);

    if (result.error) {
      reject(formatError(result.error, fileName, content));
    } else {
      resolve(result.code);
    }
  });
}

function formatError(err, fileName, content) {
  let msg = `Parse error at ${fileName}:${err.line},${err.col}`;
  const limit = 70;
  const lines = content.split(/\r?\n/);
  let col = err.col;
  let line = lines[err.line - 1];

  if (!line && !col) {
    line = lines[err.line - 2];
    col = line.length;
  }

  if (line) {
    if (col > limit) {
      line = line.slice(col - limit);
      col = limit;
    }

    msg += '\n\n';
    msg += line.slice(0, 80);
    msg += '\n';
    msg += line.slice(0, col).replace(/\S/g, ' ');
    msg += '^';
  }

  err.message = msg;
  return err;
}