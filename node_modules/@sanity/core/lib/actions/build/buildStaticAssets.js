"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _filesize = _interopRequireDefault(require("filesize"));

var _es6Promisify = require("es6-promisify");

var _getConfig = _interopRequireDefault(require("@sanity/util/lib/getConfig"));

var _server = require("@sanity/server");

var _sortModulesBySize = _interopRequireDefault(require("../../stats/sortModulesBySize"));

var _checkReactCompatibility = _interopRequireDefault(require("../../util/checkReactCompatibility"));

var _reinitializePluginConfigs = require("../config/reinitializePluginConfigs");

var _compressJavascript = _interopRequireDefault(require("./compressJavascript"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const rimraf = (0, _es6Promisify.promisify)(_rimraf.default);
const absoluteMatch = /^https?:\/\//i;

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (args, context) {
    const output = context.output,
          prompt = context.prompt,
          workDir = context.workDir;
    const flags = Object.assign({
      minify: true,
      profile: false,
      stats: false,
      'source-maps': false
    }, args.extOptions);
    const unattendedMode = flags.yes || flags.y;

    const defaultOutputDir = _path.default.resolve(_path.default.join(workDir, 'dist'));

    const outputDir = _path.default.resolve(args.argsWithoutOptions[0] || defaultOutputDir);

    const config = (0, _getConfig.default)(workDir);
    const compilationConfig = {
      env: 'production',
      staticPath: resolveStaticPath(workDir, config.get('server')),
      basePath: workDir,
      outputPath: _path.default.join(outputDir, 'static'),
      sourceMaps: flags['source-maps'],
      skipMinify: !flags.minify,
      profile: flags.profile,
      project: config.get('project')
    };
    yield (0, _reinitializePluginConfigs.tryInitializePluginConfigs)({
      workDir,
      output
    });
    (0, _checkReactCompatibility.default)(workDir);
    const compiler = (0, _server.getWebpackCompiler)(compilationConfig);
    const compile = (0, _es6Promisify.promisify)(compiler.run.bind(compiler));
    let shouldDelete = true;

    if (outputDir !== defaultOutputDir && !unattendedMode) {
      shouldDelete = yield prompt.single({
        type: 'confirm',
        message: `Do you want to delete the existing directory (${outputDir}) first?`,
        default: true
      });
    }

    let spin;

    if (shouldDelete) {
      const deleteStart = Date.now();
      spin = output.spinner('Clearing output folder').start();
      yield rimraf(outputDir);
      spin.text = `Clearing output folder (${Date.now() - deleteStart}ms)`;
      spin.succeed();
    }

    spin = output.spinner('Building Sanity').start();
    const bundle = {};

    try {
      // Compile the bundle
      const statistics = yield compile();
      const stats = statistics.toJson();

      if (stats.errors && stats.errors.length > 0) {
        throw new Error(`Errors while building:\n\n${stats.errors.join('\n\n')}`);
      }

      spin.text = `Building Sanity (${stats.time}ms)`;
      spin.succeed(); // Get hashes for each chunk

      const chunkMap = {};
      stats.chunks.forEach(chunk => chunk.files.forEach(file => {
        chunkMap[file] = chunk.hash;
      }));
      bundle.stats = stats;

      if (flags.profile) {
        yield _fsExtra.default.writeFile(_path.default.join(workDir, 'build-stats.json'), JSON.stringify(statistics.toJson('verbose')));
      } // Build new index document with correct hashes


      const indexStart = Date.now();
      spin = output.spinner('Building index document').start();
      const doc = yield (0, _server.getDocumentElement)(_objectSpread({}, compilationConfig, {
        hashes: chunkMap
      }), {
        scripts: ['vendor.bundle.js', 'app.bundle.js'].map(asset => {
          const assetPath = absoluteMatch.test(asset) ? asset : `js/${asset}`;
          return {
            path: assetPath,
            hash: chunkMap[assetPath] || chunkMap[asset]
          };
        })
      }); // Write index file to output destination

      yield _fsExtra.default.writeFile(_path.default.join(outputDir, 'index.html'), `<!doctype html>${_server.ReactDOM.renderToStaticMarkup(doc)}`); // Print build output, optionally stats if requested

      bundle.stats.warnings.forEach(output.print);
      spin.text = `Building index document (${Date.now() - indexStart}ms)`;
      spin.succeed();

      if (flags.stats) {
        output.print('\nLargest modules (unminified, uncompressed sizes):');
        (0, _sortModulesBySize.default)(bundle.stats.modules).slice(0, 10).forEach(module => output.print(`[${(0, _filesize.default)(module.size)}] ${module.name}`));
      } // Now compress the JS bundles


      if (!compilationConfig.skipMinify) {
        spin = output.spinner('Minifying JavaScript bundles').start();
        const compressStart = Date.now();
        yield Promise.all(Object.keys(chunkMap).filter(fileName => _path.default.extname(fileName) === '.js').map(fileName => _path.default.join(compilationConfig.outputPath, fileName)).map(_compressJavascript.default));
        spin.text = `Minifying JavaScript bundles (${Date.now() - compressStart}ms)`;
        spin.succeed();
      } // Copy static assets (from /static folder) to output dir


      yield _fsExtra.default.copy(_path.default.join(workDir, 'static'), _path.default.join(outputDir, 'static'), {
        overwrite: false
      });
    } catch (err) {
      spin.fail();
      throw err;
    }

    return bundle;
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;

function resolveStaticPath(rootDir, config) {
  const staticPath = config.staticPath;
  return _path.default.isAbsolute(staticPath) ? staticPath : _path.default.resolve(_path.default.join(rootDir, staticPath));
}