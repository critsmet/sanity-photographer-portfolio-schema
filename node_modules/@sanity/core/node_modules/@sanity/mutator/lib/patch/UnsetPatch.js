"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("./util");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var UnsetPatch =
/*#__PURE__*/
function () {
  function UnsetPatch(id, path) {
    _classCallCheck(this, UnsetPatch);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "value", void 0);

    this.id = id;
    this.path = path;
  }

  _createClass(UnsetPatch, [{
    key: "apply",
    value: function apply(targets, accessor) {
      var result = accessor;

      switch (accessor.containerType()) {
        case 'array':
          result = result.unsetIndices((0, _util.targetsToIndicies)(targets, accessor));
          break;

        case 'object':
          targets.forEach(function (target) {
            result = result.unsetAttribute(target.name());
          });
          break;

        default:
          throw new Error('Target value is neither indexable or an object. This error should potentially just be silently ignored?');
      }

      return result;
    }
  }]);

  return UnsetPatch;
}();

exports.default = UnsetPatch;