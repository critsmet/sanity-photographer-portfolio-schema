"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _router = require("part:@sanity/base/router");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _queryContainer = _interopRequireDefault(require("part:@sanity/base/query-container"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _DocumentsListPane = _interopRequireDefault(require("./styles/DocumentsListPane.css"));

var _ListView = _interopRequireDefault(require("./styles/ListView.css"));

var _InfiniteList = _interopRequireDefault(require("./InfiniteList"));

var _PaneItem = _interopRequireDefault(require("./PaneItem"));

var _settings = _interopRequireDefault(require("../settings"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const DEFAULT_ORDERING = [{
  field: '_createdAt',
  direction: 'desc'
}];

function removePublishedWithDrafts(documents) {
  const _partition2 = (0, _partition4.default)(documents.map(doc => doc._id), _draftUtils.isDraftId),
        _partition3 = _slicedToArray(_partition2, 2),
        draftIds = _partition3[0],
        publishedIds = _partition3[1];

  return documents.map(doc => _objectSpread({}, doc, {
    hasPublished: publishedIds.includes((0, _draftUtils.getPublishedId)(doc._id)),
    hasDraft: draftIds.includes((0, _draftUtils.getDraftId)(doc._id))
  })).filter(doc => !((0, _draftUtils.isPublishedId)(doc._id) && doc.hasDraft));
}

function getDocumentKey(document) {
  return (0, _draftUtils.getPublishedId)(document._id);
}

function noActionFn() {
  // eslint-disable-next-line no-console
  console.warn('No handler defined for action');
}

function getTypeNameFromSingleTypeFilter(filter, params = {}) {
  const pattern = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type\b/;
  const matches = filter.match(pattern);

  if (!matches) {
    return null;
  }

  const match = (matches[1] || matches[2]).trim().replace(/^["']|["']$/g, '');
  const typeName = match[0] === '$' ? params[match.slice(1)] : match;
  return typeName || null;
}

function isSimpleTypeFilter(filter) {
  return /^_type\s*==\s*['"$]\w+['"]?\s*$/.test(filter.trim());
}

function toOrderClause(orderBy) {
  return orderBy.map(ordering => [ordering.field, (ordering.direction || '').toLowerCase()].map(str => str.trim()).filter(Boolean).join(' ')).join(', ');
}

var _default = (0, _router.withRouterHOC)((_temp = _class = class DocumentsListPane extends _react.default.PureComponent {
  constructor(props) {
    super();

    _defineProperty(this, "actionHandlers", {
      setLayout: ({
        layout
      }) => {
        this.layoutSetting.set(layout);
      },
      setSortOrder: sort => {
        this.sortOrderSetting.set(sort);
      }
    });

    _defineProperty(this, "state", {
      scrollTop: 0,
      sortOrder: null,
      layout: null
    });

    _defineProperty(this, "getLinkStateForItem", id => {
      const _this$props = this.props,
            router = _this$props.router,
            index = _this$props.index;
      const panes = (router.state.panes || []).slice(0, index).concat((0, _draftUtils.getPublishedId)(id));
      return {
        panes
      };
    });

    _defineProperty(this, "renderItem", item => _react.default.createElement(_PaneItem.default, {
      id: item._id,
      getLinkState: this.getLinkStateForItem,
      layout: this.state.layout || this.props.defaultLayout || 'default',
      value: item,
      icon: this.props.displayOptions.showIcons === false ? false : undefined,
      schemaType: _schema.default.get(item._type),
      isSelected: this.itemIsSelected(item._id)
    }));

    _defineProperty(this, "handleAction", item => {
      const handler = typeof item.action === 'function' ? item.action : this.actionHandlers[item.action] || noActionFn;
      handler(item.params, this);
    });

    _defineProperty(this, "handleCreateNew", () => {
      const _this$props2 = this.props,
            options = _this$props2.options,
            router = _this$props2.router;
      const filter = options.filter,
            params = options.params;
      const typeName = getTypeNameFromSingleTypeFilter(filter, params);
      router.navigateIntent('create', {
        type: typeName
      });
    });

    _defineProperty(this, "handleScroll", scrollTop => {
      this.setState({
        scrollTop
      });
    });

    const _props$options = props.options,
          _filter = _props$options.filter,
          _params = _props$options.params;

    const _typeName = getTypeNameFromSingleTypeFilter(_filter, _params);

    const settingsNamespace = _settings.default.forNamespace(_typeName);

    this.sortOrderSetting = settingsNamespace.forKey('sortOrder');
    this.layoutSetting = settingsNamespace.forKey('layout');
    let sync = true;
    this.settingsSubscription = (0, _rxjs.combineLatest)(this.sortOrderSetting.listen(DEFAULT_ORDERING), this.layoutSetting.listen()).pipe((0, _operators.map)(([sortOrder, layout]) => ({
      sortOrder,
      layout
    })), (0, _operators.tap)(nextState => {
      if (sync) {
        this.state = nextState;
      } else {
        this.setState(nextState);
      }
    })).subscribe();
    sync = false;
  }

  componentWillUnmount() {
    this.settingsSubscription.unsubscribe();
  }

  itemIsSelected(item) {
    const _this$props3 = this.props,
          router = _this$props3.router,
          index = _this$props3.index;
    const selected = (router.state.panes || [])[index] || '';
    return (0, _draftUtils.getPublishedId)(item) === (0, _draftUtils.getPublishedId)(selected);
  }

  buildListQuery() {
    const options = this.props.options;
    const filter = options.filter,
          defaultOrdering = options.defaultOrdering;
    const sortState = this.state.sortOrder;
    const extendedProjection = sortState && sortState.extendedProjection;
    const projectionFields = ['_id', '_type'];
    const finalProjection = projectionFields.join(', ');
    const sortBy = sortState && sortState.by || defaultOrdering || [];
    const sort = sortBy.length > 0 ? sortBy : DEFAULT_ORDERING;

    if (extendedProjection) {
      const firstProjection = projectionFields.concat(extendedProjection).join(', ');
      return [`*[${filter}] [0...50000]`, `{${firstProjection}}`, `order(${toOrderClause(sort)})`, `{${finalProjection}}`].join(' | ');
    }

    return `*[${filter}] | order(${toOrderClause(sort)}) [0...50000] {${finalProjection}}`;
  }

  render() {
    const _this$props4 = this.props,
          title = _this$props4.title,
          options = _this$props4.options,
          className = _this$props4.className,
          isCollapsed = _this$props4.isCollapsed,
          isSelected = _this$props4.isSelected,
          onCollapse = _this$props4.onCollapse,
          onExpand = _this$props4.onExpand,
          defaultLayout = _this$props4.defaultLayout,
          menuItems = _this$props4.menuItems,
          menuItemGroups = _this$props4.menuItemGroups;
    const filter = options.filter,
          params = options.params;
    const layout = this.state.layout || defaultLayout || 'default';
    const typeName = getTypeNameFromSingleTypeFilter(filter, params);
    const filterIsSimpleTypeContraint = isSimpleTypeFilter(filter);

    const hasItems = items => items && items.length > 0;

    const query = this.buildListQuery();
    return _react.default.createElement(_default3.default, {
      title: title,
      className: className,
      styles: this.props.styles,
      scrollTop: this.state.scrollTop,
      menuItems: menuItems,
      menuItemGroups: menuItemGroups,
      isSelected: isSelected,
      isCollapsed: isCollapsed,
      onCollapse: onCollapse,
      onAction: this.handleAction,
      onExpand: onExpand,
      isScrollable: false
    }, _react.default.createElement(_queryContainer.default, {
      query: query,
      params: params
    }, ({
      result,
      loading,
      error,
      onRetry
    }) => {
      if (error) {
        return _react.default.createElement(_default4.default, {
          kind: "danger",
          action: {
            title: 'Retry'
          },
          onAction: onRetry
        }, _react.default.createElement("div", null, "An error occurred while loading items:"), _react.default.createElement("div", null, error.message));
      }

      if (loading) {
        return _react.default.createElement("div", {
          className: _DocumentsListPane.default[`layout__${layout}`]
        }, loading && _react.default.createElement(_spinner.default, {
          center: true,
          message: "Loading items\u2026"
        }));
      }

      if (!result) {
        return null;
      }

      const items = removePublishedWithDrafts(result ? result.documents : []);

      if (!hasItems(items)) {
        const schemaType = _schema.default.get(typeName);

        return _react.default.createElement("div", {
          className: _DocumentsListPane.default.empty
        }, _react.default.createElement("div", null, _react.default.createElement("h3", null, filterIsSimpleTypeContraint ? 'No documents of this type found' : 'No documents matching this filter found'), typeName && (0, _documentActionUtils.isActionEnabled)(schemaType, 'create') && _react.default.createElement(_default2.default, {
          color: "primary",
          icon: _plusIcon.default,
          onClick: this.handleCreateNew
        }, "New ", schemaType.title)));
      }

      return _react.default.createElement("div", {
        className: _DocumentsListPane.default[`layout__${layout}`]
      }, items && _react.default.createElement(_InfiniteList.default, {
        className: _ListView.default.scroll,
        onScroll: this.handleScroll,
        items: items,
        layout: layout,
        getItemKey: getDocumentKey,
        renderItem: this.renderItem
      }));
    }));
  }

}, _defineProperty(_class, "propTypes", {
  index: _propTypes.default.number.isRequired,
  title: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  styles: _propTypes.default.object,
  // eslint-disable-line react/forbid-prop-types
  router: _propTypes.default.shape({
    state: _propTypes.default.shape({
      panes: _propTypes.default.arrayOf(_propTypes.default.string)
    })
  }).isRequired,
  defaultLayout: _propTypes.default.string,
  options: _propTypes.default.shape({
    filter: _propTypes.default.string.isRequired,
    defaultOrdering: _propTypes.default.arrayOf(_propTypes.default.shape({
      field: _propTypes.default.string.isRequired,
      direction: _propTypes.default.oneOf(['asc', 'desc'])
    })),
    params: _propTypes.default.object // eslint-disable-line react/forbid-prop-types

  }).isRequired,
  menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired
  })),
  menuItemGroups: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  })),
  displayOptions: _propTypes.default.shape({
    showIcons: _propTypes.default.bool
  }),
  isSelected: _propTypes.default.bool.isRequired,
  isCollapsed: _propTypes.default.bool.isRequired,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func
}), _defineProperty(_class, "defaultProps", {
  className: '',
  styles: {},
  menuItems: [],
  menuItemGroups: [],
  displayOptions: {},
  onExpand: undefined,
  onCollapse: undefined,
  defaultLayout: undefined
}), _temp));

exports.default = _default;