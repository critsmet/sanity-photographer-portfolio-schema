"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

require("./styles/JSONInspector.css");

var _InspectView = _interopRequireDefault(require("./styles/InspectView.css"));

var _reactJsonInspector = _interopRequireDefault(require("react-json-inspector"));

var _default = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _buttons = _interopRequireDefault(require("part:@sanity/components/toggles/buttons"));

var _hashlru = _interopRequireDefault(require("hashlru"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const lru = (0, _hashlru.default)(1000);

function isExpanded(keyPath, value) {
  const cached = lru.get(keyPath);

  if (cached === undefined) {
    lru.set(keyPath, Array.isArray(value) || (0, _isObject2.default)(value));
    return isExpanded(keyPath, value);
  }

  return cached;
}

function toggleExpanded(event) {
  const path = event.path;
  const current = lru.get(path);

  if (current === undefined) {
    // something is wrong
    return;
  }

  lru.set(path, !current);
}

function selectElement(element) {
  const sel = window.getSelection();
  sel.removeAllRanges();
  const range = document.createRange();
  range.selectNodeContents(element);
  sel.addRange(range);
}

function select(event) {
  selectElement(event.currentTarget);
}

function maybeSelectAll(event) {
  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey);

  if (!selectAll) {
    return;
  }

  event.preventDefault();
  selectElement(event.currentTarget);
}

const VIEW_MODE_PARSED = {
  value: 'parsed',
  title: 'Parsed'
};
const VIEW_MODE_RAW = {
  value: 'raw',
  title: 'Raw'
};
const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW];
const VIEW_MODE_LS_KEY = 'desk-tool-inspect-view-preferred-view-mode';

function getPreferredViewMode() {
  const preferredViewMode = localStorage.getItem(VIEW_MODE_LS_KEY);
  return preferredViewMode && VIEW_MODES.find(mode => mode.value === preferredViewMode);
}

class InspectView extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      viewMode: getPreferredViewMode() || VIEW_MODE_PARSED
    });

    _defineProperty(this, "handleChangeViewMode", viewMode => {
      this.setState({
        viewMode: viewMode
      });
      localStorage.setItem(VIEW_MODE_LS_KEY, viewMode.value);
    });
  }

  render() {
    const _this$props = this.props,
          value = _this$props.value,
          onClose = _this$props.onClose;
    const viewMode = this.state.viewMode;
    return _react.default.createElement(_default.default, {
      isOpen: true,
      showHeader: true,
      title: `Inspecting ${(0, _draftUtils.getPublishedId)(value._id)}`,
      onClose: onClose
    }, _react.default.createElement("div", {
      className: _InspectView.default.content
    }, _react.default.createElement("div", {
      className: _InspectView.default.toolbar
    }, _react.default.createElement(_buttons.default, {
      label: "View",
      value: viewMode,
      items: VIEW_MODES,
      onChange: this.handleChangeViewMode
    })), viewMode === VIEW_MODE_PARSED && _react.default.createElement(_reactJsonInspector.default, {
      isExpanded: isExpanded,
      onClick: toggleExpanded,
      data: value
    }), viewMode === VIEW_MODE_RAW && _react.default.createElement("pre", {
      className: _InspectView.default.raw,
      tabIndex: 0,
      onKeyDown: maybeSelectAll,
      onDoubleClick: select,
      onFocus: select
    }, JSON.stringify(value, null, 2))));
  }

}

exports.default = InspectView;
InspectView.propTypes = {
  value: _propTypes.default.object,
  onClose: _propTypes.default.func
};