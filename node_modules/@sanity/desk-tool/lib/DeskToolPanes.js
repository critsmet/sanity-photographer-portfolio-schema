"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _splitController = _interopRequireDefault(require("part:@sanity/components/panes/split-controller"));

var _splitPaneWrapper = _interopRequireDefault(require("part:@sanity/components/panes/split-pane-wrapper"));

var _resolvePanes = require("./utils/resolvePanes");

var _DeskTool = _interopRequireDefault(require("./styles/DeskTool.css"));

var _LoadingPane = _interopRequireDefault(require("./pane/LoadingPane"));

var _Pane = _interopRequireDefault(require("./pane/Pane"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DeskToolPanes extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      collapsedPanes: []
    });

    _defineProperty(this, "handleControllerCollapse", pane => {});

    _defineProperty(this, "handleControllerUnCollapse", pane => {});

    _defineProperty(this, "handlePaneExpand", index => {
      this.setState(prevState => ({
        collapsedPanes: prevState.collapsedPanes.filter(idx => idx !== index)
      }));
    });

    _defineProperty(this, "handlePaneCollapse", index => {
      this.setState(prevState => ({
        collapsedPanes: prevState.collapsedPanes.concat(index)
      }));
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.panes.length < prevProps.panes.length) {
      const cutoff = this.props.panes.length - 1; // @todo figure out how to do this outside of componentDidUpdate - we
      // want to track the changing of pane depth and "reset" the collapsed
      // state of any pane that is deeper than the current depth. Doing this
      // in getDerivedStateFromProps() does work as you cannot reference the
      // previous props, and cutting of at the current depth will disallow
      // the last pane open from being collapsed
      // eslint-disable-next-line react/no-did-update-set-state

      this.setState(state => ({
        collapsedPanes: state.collapsedPanes.filter(index => index < cutoff)
      }));
    }
  }

  renderPanes() {
    const _this$props = this.props,
          panes = _this$props.panes,
          keys = _this$props.keys;
    const path = [];
    return panes.map((pane, i) => {
      const isCollapsed = this.state.collapsedPanes.includes(i);
      const paneKey = `${i}-${keys[i - 1] || 'root'}`; // Same pane might appear multiple times, so use index as tiebreaker

      const wrapperKey = pane === _resolvePanes.LOADING ? `loading-${i}` : `${i}-${pane.id}`;
      path.push(pane.id || `[${i}]`);
      return _react.default.createElement(_splitPaneWrapper.default, {
        key: wrapperKey,
        minWidth: 70,
        defaultWidth: 300,
        isCollapsed: isCollapsed
      }, pane === _resolvePanes.LOADING ? _react.default.createElement(_LoadingPane.default, {
        key: paneKey // Use key to force rerendering pane on ID change
        ,
        path: path,
        index: i,
        onExpand: this.handlePaneExpand,
        onCollapse: this.handlePaneCollapse,
        isCollapsed: isCollapsed,
        isSelected: i === panes.length - 1
      }) : _react.default.createElement(_Pane.default, _extends({
        key: paneKey // Use key to force rerendering pane on ID change
        ,
        index: i,
        itemId: keys[i - 1],
        onExpand: this.handlePaneExpand,
        onCollapse: this.handlePaneCollapse,
        isCollapsed: isCollapsed,
        isSelected: i === panes.length - 1
      }, pane)));
    });
  }

  render() {
    return _react.default.createElement("div", {
      className: _DeskTool.default.deskToolPanes
    }, _react.default.createElement(_splitController.default, {
      onShouldCollapse: this.handleControllerCollapse,
      onShouldExpand: this.handleControllerUnCollapse
    }, this.renderPanes()));
  }

}

exports.default = DeskToolPanes;

_defineProperty(DeskToolPanes, "propTypes", {
  keys: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  panes: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape({
    id: _propTypes.default.string.isRequired
  }), _propTypes.default.symbol])).isRequired
});