"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlugType = exports.CURRENT_FIELD = void 0;

var _pick2 = _interopRequireDefault(require("lodash/pick"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const OVERRIDABLE_FIELDS = ['jsonType', 'type', 'name', 'title', 'description', 'options'];
const CURRENT_FIELD = {
  name: 'current',
  title: 'Current slug',
  type: 'string'
};
exports.CURRENT_FIELD = CURRENT_FIELD;
const SLUG_FIELDS = [CURRENT_FIELD];
const SLUG_CORE = {
  name: 'slug',
  title: 'Slug',
  type: null,
  jsonType: 'object'
};
const SlugType = {
  get() {
    return SLUG_CORE;
  },

  extend(subTypeDef, extendMember) {
    const parsed = Object.assign((0, _pick2.default)(SLUG_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
      type: SLUG_CORE,
      preview: {
        select: {
          title: 'current'
        }
      }
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return SLUG_FIELDS.map(fieldDef => {
        const name = fieldDef.name,
              type = _objectWithoutProperties(fieldDef, ["name"]);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });
    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },

        extend: extensionDef => {
          const current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, OVERRIDABLE_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }

};
exports.SlugType = SlugType;