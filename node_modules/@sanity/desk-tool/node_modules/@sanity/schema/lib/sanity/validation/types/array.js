"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _createValidationResult = require("../createValidationResult");

var _getDupes = require("../utils/getDupes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (typeDef, visitorContext) => {
  // name should already have been marked
  const ofIsArray = Array.isArray(typeDef.of);
  const problems = (0, _flatten2.default)([ofIsArray ? (0, _getDupes.getDupes)(typeDef.of, t => `${t.name};${t.type}`).map(dupes => (0, _createValidationResult.error)(`Found ${dupes.length} members with same type, but not unique names "${dupes[0].type}" in array. This makes it impossible to tell their values apart and you should consider naming them`, _createValidationResult.HELP_IDS.ARRAY_OF_NOT_UNIQUE)) : (0, _createValidationResult.error)('The array type is missing or having an invalid value for the required "of" property', _createValidationResult.HELP_IDS.ARRAY_OF_INVALID)]);
  return _objectSpread({}, typeDef, {
    of: (ofIsArray ? typeDef.of : []).map(visitorContext.visit),
    _problems: problems
  });
};

exports.default = _default;