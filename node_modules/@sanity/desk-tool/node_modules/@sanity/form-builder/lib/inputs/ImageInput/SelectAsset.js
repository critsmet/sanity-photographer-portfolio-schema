"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _SelectAsset = _interopRequireDefault(require("./styles/SelectAsset.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PER_PAGE = 200;

function createQuery(start = 0, end = PER_PAGE) {
  return `*[_type == "sanity.imageAsset"] | order(_updatedAt desc) [${start}...${end}] {_id,url,metadata {dimensions}}`;
}

class SelectAsset extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      assets: [],
      isLastPage: false
    });

    _defineProperty(this, "pageNo", void 0);

    _defineProperty(this, "pageNo", 0);

    _defineProperty(this, "handleItemClick", event => {
      event.preventDefault();
      this.select(event.currentTarget.getAttribute('data-id'));
    });

    _defineProperty(this, "handleItemKeyPress", event => {
      if (event.key === 'Enter') {
        event.preventDefault();
        this.select(event.currentTarget.getAttribute('data-id'));
      }
    });

    _defineProperty(this, "handleFetchNextPage", () => {
      this.fetchPage(++this.pageNo);
    });
  }

  fetchPage(pageNo) {
    const start = pageNo * PER_PAGE;
    const end = start + PER_PAGE;
    return _client.default.fetch(createQuery(start, end)).then(result => {
      this.setState(prevState => ({
        isLastPage: result.length === 0,
        assets: prevState.assets.concat(result)
      }));
    });
  }

  componentDidMount() {
    this.fetchPage(this.pageNo);
  }

  select(id) {
    const selected = this.state.assets.find(doc => doc._id === id);

    if (selected) {
      this.props.onSelect(selected);
    }
  }

  render() {
    const _this$state = this.state,
          assets = _this$state.assets,
          isLastPage = _this$state.isLastPage;
    return _react.default.createElement("div", {
      className: _SelectAsset.default.root
    }, _react.default.createElement("div", {
      className: _SelectAsset.default.imageList
    }, assets.map(asset => {
      const size = 75;
      const width = (0, _get2.default)(asset, 'metadata.dimensions.width') || 100;
      const height = (0, _get2.default)(asset, 'metadata.dimensions.height') || 100;
      return _react.default.createElement("a", {
        key: asset._id,
        className: _SelectAsset.default.item,
        "data-id": asset._id,
        onClick: this.handleItemClick,
        onKeyPress: this.handleItemKeyPress,
        tabIndex: 0,
        style: {
          width: `${width * size / height}px`,
          flexGrow: `${width * size / height}`
        }
      }, _react.default.createElement("i", {
        className: _SelectAsset.default.padder,
        style: {
          paddingBottom: `${height / width * 100}%`
        }
      }), _react.default.createElement("img", {
        src: `${asset.url}?h=100`,
        className: _SelectAsset.default.image
      }));
    })), _react.default.createElement("div", {
      className: _SelectAsset.default.loadMore
    }, isLastPage ? _react.default.createElement("span", null, "Nothing more to load\u2026") : _react.default.createElement(_default.default, {
      onClick: this.handleFetchNextPage
    }, "Load more\u2026")));
  }

}

exports.default = SelectAsset;