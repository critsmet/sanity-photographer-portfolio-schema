"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This plugin handles enter on empty list elements, deletes it,
// and either creates a new empty default block or subleveled list block below
function createOnKeyDown(defaultBlock, callbackFn) {
  return function onKeyDown(event, data, change, editor) {
    const _change$state = change.state,
          document = _change$state.document,
          startKey = _change$state.startKey,
          startBlock = _change$state.startBlock; // only for key

    if (data.key !== 'enter') {
      return null;
    } // Only do listItem nodes


    const isList = startBlock.data.get('listItem');

    if (!isList) {
      return null;
    } // Return if current listItem is not empty


    if (startBlock.text !== '') {
      return null;
    }

    const previousBlock = document.getPreviousBlock(startKey);

    if (previousBlock && !previousBlock.data.get('listItem')) {
      return null;
    } // If on top of document
    // and no text insert a node before


    if (!previousBlock) {
      change.insertBlock(defaultBlock).focus();

      if (callbackFn) {
        callbackFn(change);
      }

      return change;
    } // Delete previous listItem if previous list item is empty


    if (previousBlock && previousBlock.data.get('listItem')) {
      change.deleteBackward(1);
    }

    let blockToInsert = defaultBlock; // If level is > 1, insert a blank list element with the sublevel below

    const level = startBlock.data.get('level') || 1;

    if (level > 1) {
      blockToInsert = _objectSpread({}, defaultBlock, {
        data: startBlock.data.toObject()
      });
      blockToInsert.data.level = level - 1;
    } // Jump to next node if next node is not a listItem or a void block


    const nextBlock = document.getNextBlock(startKey);

    if (nextBlock && !nextBlock.data.get('listItem') && !nextBlock.isVoid) {
      change.collapseToStartOf(nextBlock);
    } else {
      change.insertBlock(blockToInsert).focus();
    }

    if (callbackFn) {
      callbackFn(change);
    }

    return change;
  };
}

function onEnterInListItem(defaultBlock, callbackFn) {
  return {
    onKeyDown: createOnKeyDown(defaultBlock, callbackFn)
  };
}

var _default = onEnterInListItem;
exports.default = _default;