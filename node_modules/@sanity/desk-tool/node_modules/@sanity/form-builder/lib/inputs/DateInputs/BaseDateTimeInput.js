"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _reactDatepicker = _interopRequireDefault(require("react-datepicker"));

require("react-datepicker/dist/react-datepicker-cssmodules.css");

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _BaseDateTimeInput = _interopRequireDefault(require("./styles/BaseDateTimeInput.css"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _calendarIcon = _interopRequireDefault(require("part:@sanity/base/calendar-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getFormat = (dateFormat, timeFormat) => dateFormat + (timeFormat ? ` ${timeFormat}` : '');

class BaseDateTimeInput extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_datepicker", void 0);

    _defineProperty(this, "state", {
      inputValue: null,
      isDialogOpen: false
    });

    _defineProperty(this, "handleInputChange", event => {
      const inputValue = event.currentTarget.value;
      const _this$props = this.props,
            onChange = _this$props.onChange,
            dateFormat = _this$props.dateFormat,
            timeFormat = _this$props.timeFormat;
      const parsed = (0, _moment.default)(inputValue, getFormat(dateFormat, timeFormat), true);

      if (parsed.isValid()) {
        this.setState({
          inputValue: null
        });
        onChange(parsed);
      } else {
        this.setState({
          inputValue: inputValue
        });
      }
    });

    _defineProperty(this, "handleDialogChange", nextMoment => {
      const onChange = this.props.onChange;
      onChange(nextMoment);
      this.setState({
        inputValue: null
      });
    });

    _defineProperty(this, "handleBlur", () => {
      this.setState({
        inputValue: null
      });
    });

    _defineProperty(this, "setDatePicker", datePicker => {
      this._datepicker = datePicker;
    });

    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === 'Enter') {
        this.open();
      }
    });

    _defineProperty(this, "open", () => {
      this.setState({
        isDialogOpen: true
      });
    });

    _defineProperty(this, "close", () => {
      this.setState({
        isDialogOpen: false
      });
    });

    _defineProperty(this, "handleDialogOpen", this.open);

    _defineProperty(this, "handleDialogClose", this.close);

    _defineProperty(this, "handleDialogAction", action => {
      if (action.name === 'close') {
        this.close();
      }

      if (action.name === 'now') {
        this.handleDialogChange((0, _moment.default)());
      }
    });
  }

  focus() {
    if (this._datepicker) {
      this._datepicker.input.focus();
    }
  }

  render() {
    const _this$props2 = this.props,
          value = _this$props2.value,
          markers = _this$props2.markers,
          dateOnly = _this$props2.dateOnly,
          dateFormat = _this$props2.dateFormat,
          timeFormat = _this$props2.timeFormat,
          title = _this$props2.title,
          description = _this$props2.description,
          todayLabel = _this$props2.todayLabel,
          readOnly = _this$props2.readOnly,
          timeStep = _this$props2.timeStep,
          level = _this$props2.level;
    const _this$state = this.state,
          inputValue = _this$state.inputValue,
          isDialogOpen = _this$state.isDialogOpen;
    const format = getFormat(dateFormat, timeFormat);
    const placeholder = this.props.placeholder || `e.g. ${(0, _moment.default)().format(format)}`;
    const validation = markers.filter(marker => marker.type === 'validation');
    const errors = validation.filter(marker => marker.level === 'error');
    return _react.default.createElement(_default.default, {
      markers: markers,
      label: title,
      level: level,
      description: description
    }, readOnly && _react.default.createElement(_default2.default, {
      customValidity: errors.length > 0 ? errors[0].item.message : '',
      readOnly: true,
      value: value ? value.format(format) : ''
    }), !readOnly && _react.default.createElement("div", {
      className: errors.length > 0 ? _BaseDateTimeInput.default.inputWrapperWithError : _BaseDateTimeInput.default.inputWrapper
    }, _react.default.createElement(_reactDatepicker.default, {
      onKeyDown: this.handleKeyDown,
      disabledKeyboardNavigation: true,
      selected: value || undefined,
      placeholderText: placeholder,
      calendarClassName: _BaseDateTimeInput.default.datePicker,
      popperClassName: _BaseDateTimeInput.default.hiddenPopper,
      className: _BaseDateTimeInput.default.input,
      onChange: this.handleDialogChange,
      onChangeRaw: this.handleInputChange,
      value: inputValue ? inputValue : value && value.format(format),
      dateFormat: dateFormat,
      timeFormat: timeFormat,
      timeIntervals: timeStep,
      ref: this.setDatePicker
    }), _react.default.createElement(_default4.default, {
      color: "primary",
      className: _BaseDateTimeInput.default.selectButton,
      onClick: this.handleDialogOpen,
      icon: _calendarIcon.default,
      kind: "simple"
    }, "Select")), isDialogOpen && _react.default.createElement(_default3.default, {
      isOpen: isDialogOpen,
      onClose: this.handleDialogClose,
      onAction: this.handleDialogAction,
      actions: [{
        name: 'close',
        title: 'Close'
      }, {
        name: 'now',
        kind: 'simple',
        color: 'primary',
        title: todayLabel,
        secondary: true
      }],
      showCloseButton: false
    }, _react.default.createElement("div", {
      className: dateOnly ? _BaseDateTimeInput.default.dialogDatePicker : _BaseDateTimeInput.default.dialogDatePickerWithTime
    }, _react.default.createElement(_reactDatepicker.default, {
      inline: true,
      showMonthDropdown: true,
      showYearDropdown: true,
      selected: value || undefined,
      calendarClassName: _BaseDateTimeInput.default.datePicker,
      popperClassName: _BaseDateTimeInput.default.popper,
      className: _BaseDateTimeInput.default.input,
      onChange: this.handleDialogChange,
      value: inputValue ? inputValue : value && value.format(format),
      showTimeSelect: !dateOnly,
      dateFormat: dateFormat,
      timeFormat: timeFormat,
      timeIntervals: timeStep,
      dropdownMode: "select"
    }))));
  }

}

exports.default = BaseDateTimeInput;