"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPreviewSnapshot = getPreviewSnapshot;
exports.search = search;

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _operators = require("rxjs/operators");

var _preview = require("part:@sanity/base/preview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getPreviewSnapshot(value, referenceType) {
  return (0, _preview.observeForPreview)(value, referenceType).pipe((0, _operators.map)(result => result.snapshot));
}

function wrapIn(chars = '') {
  const _chars = _slicedToArray(chars, 2),
        _chars$ = _chars[0],
        start = _chars$ === void 0 ? '' : _chars$,
        _chars$2 = _chars[1],
        end = _chars$2 === void 0 ? start : _chars$2;

  return value => start + value + end;
}

const wrapInParens = wrapIn('()');

function buildConstraintFromType(type, terms) {
  const typeConstraint = `_type == '${type.name}'`;
  const stringFieldPaths = type.__unstable_searchFields || [];

  if (terms.length === 0 || stringFieldPaths.length === 0) {
    return typeConstraint;
  }

  const stringFieldConstraints = stringFieldPaths.map(fieldPath => terms.map(term => `${fieldPath} match '${term}*'`).join(' && '));
  return `${typeConstraint} && (${stringFieldConstraints.join(' || ')})`;
}

function search(textTerm, referenceType) {
  const terms = textTerm.split(/\s+/).filter(Boolean);
  const typeConstraints = referenceType.to.map(type => buildConstraintFromType(type, terms));
  const query = `*[!(_id in path('drafts.**')) && (${typeConstraints.map(wrapInParens).join('||')})]`;
  return _client.default.observable.fetch(query, {
    term: `${textTerm}*`
  });
}