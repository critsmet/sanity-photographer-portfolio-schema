"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkout = checkout;
exports.checkoutPair = checkoutPair;

var _document = _interopRequireDefault(require("part:@sanity/base/datastore/document"));

var gradientPatchAdapter = _interopRequireWildcard(require("./utils/gradientPatchAdapter"));

var _operators = require("rxjs/operators");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function preparePatchEvent(event) {
  const patches = event.mutations.map(mut => mut.patch).filter(Boolean);
  return _objectSpread({}, event, {
    patches: gradientPatchAdapter.toFormBuilder(event.origin, patches)
  });
}

function wrap(document) {
  const events$ = document.events.pipe((0, _operators.map)(event => event.type === 'mutation' ? preparePatchEvent(event) : event), (0, _operators.scan)((prevEvent, currentEvent) => {
    const deletedSnapshot = prevEvent && currentEvent.type === 'mutation' && prevEvent.document !== null && currentEvent.document === null ? prevEvent.document : null;
    return _objectSpread({}, currentEvent, {
      deletedSnapshot
    });
  }, null));
  return _objectSpread({}, document, {
    events: events$,

    patch(patches) {
      document.patch(gradientPatchAdapter.toGradient(patches));
    }

  });
}

let hasWarned = false;

function checkout(documentId) {
  if (!hasWarned) {
    // eslint-disable-next-line no-console
    console.warn('[deprecation] The checkout() function has been deprecated in favor of checkoutPair()');
    hasWarned = true;
  }

  return wrap(_document.default.checkout(documentId));
}

function checkoutPair(idPair) {
  const _documentStore$checko = _document.default.checkoutPair(idPair),
        draft = _documentStore$checko.draft,
        published = _documentStore$checko.published;

  return {
    draft: wrap(draft),
    published: wrap(published)
  };
}