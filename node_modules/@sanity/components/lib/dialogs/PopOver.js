"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _popoverStyle = _interopRequireDefault(require("part:@sanity/components/dialogs/popover-style"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonCollection = _interopRequireDefault(require("part:@sanity/components/buttons/button-collection"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _reactPopper = require("react-popper");

var _Portal = require("../utilities/Portal");

var _Stacked = _interopRequireDefault(require("../utilities/Stacked"));

var _CaptureOutsideClicks = _interopRequireDefault(require("../utilities/CaptureOutsideClicks"));

var _Escapable = _interopRequireDefault(require("../utilities/Escapable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PopOver extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "createActionButton", (action, i) => {
      return _react.default.createElement(_default.default, {
        key: i,
        onClick: () => this.props.onAction(action),
        "data-action-index": i,
        color: action.color,
        disabled: action.disabled,
        kind: action.kind,
        autoFocus: action.autoFocus,
        className: action.secondary ? _popoverStyle.default.actionSecondary : ''
      }, action.title);
    });
  }

  renderPopper(isActive) {
    const _this$props = this.props,
          title = _this$props.title,
          color = _this$props.color,
          children = _this$props.children,
          actions = _this$props.actions,
          onClose = _this$props.onClose,
          onClickOutside = _this$props.onClickOutside,
          _onEscape = _this$props.onEscape,
          modifiers = _this$props.modifiers,
          padding = _this$props.padding;

    const _partition2 = (0, _partition4.default)(actions, action => action.primary),
          _partition3 = _slicedToArray(_partition2, 2),
          primary = _partition3[0],
          secondary = _partition3[1];

    return _react.default.createElement(_reactPopper.Popper, {
      className: `${_popoverStyle.default.popper} ${_popoverStyle.default[`color_${color}`]}`,
      placement: "auto",
      modifiers: modifiers
    }, _react.default.createElement(_reactPopper.Arrow, {
      className: title ? _popoverStyle.default.filledArrow : _popoverStyle.default.arrow
    }), _react.default.createElement(_Escapable.default, {
      onEscape: event => (isActive || event.shiftKey) && _onEscape && _onEscape()
    }), _react.default.createElement(_CaptureOutsideClicks.default, {
      onClickOutside: isActive ? onClickOutside : undefined
    }, _react.default.createElement("div", {
      className: _popoverStyle.default.popover
    }, onClose && _react.default.createElement("button", {
      className: title ? _popoverStyle.default.closeInverted : _popoverStyle.default.close,
      type: "button",
      onClick: onClose
    }, _react.default.createElement(_closeIcon.default, null)), title && _react.default.createElement("h3", {
      className: _popoverStyle.default.title
    }, title), _react.default.createElement("div", {
      className: `
              ${actions.length > 0 ? _popoverStyle.default.contentWithActions : _popoverStyle.default.content}
              ${_popoverStyle.default[`padding_${padding}`]}
            `
    }, children), actions.length > 0 && _react.default.createElement("div", {
      className: _popoverStyle.default.footer
    }, _react.default.createElement(_buttonCollection.default, {
      align: "end",
      secondary: primary.map(this.createActionButton)
    }, secondary.map(this.createActionButton))))));
  }

  render() {
    const useOverlay = this.props.useOverlay;
    return _react.default.createElement(_reactPopper.Manager, null, _react.default.createElement(_reactPopper.Target, {
      className: _popoverStyle.default.target
    }), _react.default.createElement(_Portal.Portal, null, _react.default.createElement(_Stacked.default, null, isActive => _react.default.createElement("div", null, useOverlay && _react.default.createElement("div", {
      className: _popoverStyle.default.overlay
    }), this.renderPopper(isActive)))));
  }

}

exports.default = PopOver;

_defineProperty(PopOver, "propTypes", {
  title: _propTypes.default.string,
  children: _propTypes.default.node.isRequired,
  onClose: _propTypes.default.func,
  onClickOutside: _propTypes.default.func,
  onEscape: _propTypes.default.func,
  onAction: _propTypes.default.func,
  modifiers: _propTypes.default.object,
  useOverlay: _propTypes.default.bool,
  color: _propTypes.default.oneOf(['default', 'danger']),
  padding: _propTypes.default.oneOf(['none', 'small', 'medium', 'large']),
  actions: _propTypes.default.arrayOf(_propTypes.default.shape({
    kind: _propTypes.default.string,
    title: _propTypes.default.string,
    key: _propTypes.default.string
  }))
});

_defineProperty(PopOver, "defaultProps", {
  title: undefined,

  onAction() {},

  actions: [],
  color: 'default',
  padding: 'medium',
  modifiers: {
    flip: {
      boundariesElement: 'viewport'
    },
    preventOverflow: {
      boundariesElement: 'viewport'
    }
  }
});