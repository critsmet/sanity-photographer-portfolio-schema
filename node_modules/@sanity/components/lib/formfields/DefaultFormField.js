"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/formfields/default-style"));

var _default = _interopRequireDefault(require("part:@sanity/components/labels/default"));

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DefaultFormField extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showValidationMessages: false
    });

    _defineProperty(this, "handleToggleShowValidation", event => {
      this.setState(prevState => ({
        showValidationMessages: !prevState.showValidationMessages
      }));
    });
  }

  render() {
    const _this$props = this.props,
          level = _this$props.level,
          label = _this$props.label,
          labelFor = _this$props.labelFor,
          description = _this$props.description,
          children = _this$props.children,
          inline = _this$props.inline,
          wrapped = _this$props.wrapped,
          className = _this$props.className,
          markers = _this$props.markers;
    const showValidationMessages = this.state.showValidationMessages;
    const levelClass = `level_${level}`;
    return _react.default.createElement("div", {
      className: `
          ${inline ? _defaultStyle.default.inline : _defaultStyle.default.block}
          ${_defaultStyle.default[levelClass] || ''}
          ${wrapped ? _defaultStyle.default.wrapped : ''}
          ${className || ''}`
    }, _react.default.createElement("label", {
      className: _defaultStyle.default.inner,
      htmlFor: labelFor
    }, label && _react.default.createElement("div", {
      className: _defaultStyle.default.header
    }, _react.default.createElement("div", {
      className: _defaultStyle.default.headerMain
    }, label && _react.default.createElement(_default.default, {
      className: _defaultStyle.default.label,
      level: level
    }, label), description && _react.default.createElement("div", {
      className: _defaultStyle.default.description
    }, description)), _react.default.createElement("div", {
      className: _defaultStyle.default.headerStatus
    }, _react.default.createElement("div", {
      onClick: this.handleToggleShowValidation,
      className: _defaultStyle.default.validationStatus
    }, _react.default.createElement(_status.default, {
      markers: markers
    })))), _react.default.createElement("div", {
      className: showValidationMessages ? _defaultStyle.default.validationList : _defaultStyle.default.validationListClosed
    }, _react.default.createElement(_list.default, {
      markers: markers
    })), _react.default.createElement("div", {
      className: _defaultStyle.default.content
    }, children)));
  }

}

exports.default = DefaultFormField;

_defineProperty(DefaultFormField, "propTypes", {
  label: _propTypes.default.string,
  className: _propTypes.default.string,
  inline: _propTypes.default.bool,
  description: _propTypes.default.string,
  level: _propTypes.default.number,
  children: _propTypes.default.node,
  wrapped: _propTypes.default.bool,
  labelFor: _propTypes.default.string,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    type: _propTypes.default.string
  }))
});

_defineProperty(DefaultFormField, "defaultProps", {
  level: 1,
  markers: []
});