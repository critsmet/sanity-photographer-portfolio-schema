"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _rxjs = require("rxjs");

var _SplitController = _interopRequireDefault(require("./styles/SplitController.css"));

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const COLLAPSED_WIDTH = 54;

const fromWindowEvent = eventName => new _rxjs.Observable(subscriber => {
  const handler = event => subscriber.next(event);

  window.addEventListener(eventName, handler);
  return () => {
    window.removeEventListener(eventName, handler);
  };
});

const orientationChange$ = fromWindowEvent('orientationchange');
const resize$ = fromWindowEvent('resize');
const windowWidth$ = (0, _rxjs.merge)(orientationChange$, resize$).pipe((0, _operators.share)(), (0, _operators.debounceTime)(50), (0, _operators.map)(() => window.innerWidth));

class PanesSplitController extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      windowWidth: typeof window === 'undefined' ? 1000 : window.innerWidth
    });

    _defineProperty(this, "isResizing", false);

    _defineProperty(this, "handleSplitPaneChange", (0, _debounce2.default)((size, pane) => {
      if (size <= pane.props.minWidth) {
        this.props.onShouldCollapse(pane);
      } else {
        this.props.onShouldExpand(pane);
      }

      this.lastPaneSize = size;
    }, 50));

    _defineProperty(this, "handleDragStarted", () => {
      this.isResizing = true;
    });

    _defineProperty(this, "handleDragFinished", () => {
      this.isResizing = false;
    });

    _defineProperty(this, "renderSplitPane", (pane1, pane2, restMinWidth, restDefaultWidth) => {
      const isCollapsed = pane1.props.isCollapsed; // Handle size override when collapsing

      let size = isCollapsed ? COLLAPSED_WIDTH : undefined;

      if (this.isResizing) {
        size = undefined;
      } else if (isCollapsed) {
        size = COLLAPSED_WIDTH;
      } else {
        size = pane1.props.defaultWidth;
      }

      return _react.default.createElement("div", {
        className: `
          ${_SplitController.default.splitWrapper}
          ${pane2 ? _SplitController.default.doubleWrapper : _SplitController.default.singleWrapper}
          ${isCollapsed ? _SplitController.default.isCollapsed : _SplitController.default.notCollapsed}
        `
      }, _react.default.createElement(_reactSplitPane.default, {
        minSize: isCollapsed ? COLLAPSED_WIDTH : pane1.props.minWidth,
        defaultSize: isCollapsed ? COLLAPSED_WIDTH : pane1.props.defaultWidth,
        size: size,
        resizerClassName: isCollapsed ? _SplitController.default.ResizerIsCollapsed : _SplitController.default.Resizer,
        allowResize: true,
        className: _SplitController.default.splitPane,
        onDragStarted: this.handleDragStarted,
        onDragFinished: this.handleDragFinished,
        onChange: newSize => this.handleSplitPaneChange(newSize, pane1)
      }, _react.default.createElement("div", {
        className: isCollapsed ? _SplitController.default.paneInSplittedCollapsed : _SplitController.default.paneInSplitted
      }, pane1), pane2 || ' '));
    });

    _defineProperty(this, "renderRecursivePanes", panes => {
      // only 1 pane left
      if (panes.length === 1) {
        return this.renderSplitPane(panes[0]);
      } // only 2 panes left


      if (panes.length === 2) {
        return this.renderSplitPane(panes[0], this.renderSplitPane(panes[1]));
      } // Recursive


      const remainingPanes = panes.slice(1);
      return this.renderSplitPane(panes[0], this.renderRecursivePanes(remainingPanes));
    });
  }

  componentDidMount() {
    this.resizeSubscriber = windowWidth$.pipe((0, _operators.distinctUntilChanged)()).subscribe(windowWidth => {
      this.setState({
        windowWidth
      });
    });
  }

  componentWillUnmount() {
    this.resizeSubscriber.unsubscribe();
  }

  render() {
    const children = this.props.children;

    const panes = _react.default.Children.toArray(children);

    if (panes.length === 0) {
      return _react.default.createElement("div", null, "No panes");
    } // TODO We need a way to target mobile devices in JS
    // --screen-medium-break: 32em;  ~32 * 16 = 512


    const isLessThanScreenMedium = this.state.windowWidth < 512;
    return _react.default.createElement("div", {
      className: _SplitController.default.vertical
    }, isLessThanScreenMedium ? children : this.renderRecursivePanes(panes.filter(pane => pane.type !== 'div')));
  }

}

exports.default = PanesSplitController;

_defineProperty(PanesSplitController, "propTypes", {
  children: _propTypes.default.node.isRequired,
  onShouldCollapse: _propTypes.default.func,
  onShouldExpand: _propTypes.default.func
});

_defineProperty(PanesSplitController, "defaultProps", {
  onShouldCollapse() {},

  onShouldExpand() {}

});