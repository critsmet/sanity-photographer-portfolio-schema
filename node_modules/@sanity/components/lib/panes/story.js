"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _storybook = require("part:@sanity/storybook");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _router = require("part:@sanity/base/router");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _default = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _controller = _interopRequireDefault(require("part:@sanity/components/panes/controller"));

var _splitController = _interopRequireDefault(require("part:@sanity/components/panes/split-controller"));

var _splitPaneWrapper = _interopRequireDefault(require("part:@sanity/components/panes/split-pane-wrapper"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _trashOutlineIcon = _interopRequireDefault(require("part:@sanity/base/trash-outline-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _renderActions = _interopRequireDefault(require("./styles/renderActions.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/no-multi-comp */
const menuItems = [{
  action: 'first',
  title: 'First item',
  key: '1'
}, {
  action: 'second',
  title: 'Second item',
  key: '2'
}, {
  action: 'third',
  title: 'Third item',
  key: '3',
  params: {
    some: 'param'
  }
}, {
  action: 'fourth',
  title: 'Extra item',
  key: '4',
  group: 'extra'
}, {
  title: 'Add',
  key: '5',
  group: 'actions',
  icon: _plusIcon.default,
  showAsAction: true,
  action: () => {
    console.log('Function attached to action!');
  }
}];
const menuItemsWhenCollapsed = menuItems.map(item => item.showAsAction ? Object.assign({}, item, {
  showAsAction: {
    whenCollapsed: true
  }
}) : item);

const handleMenuAction = menuAction => {
  console.log('action', menuAction);
};

const router = (0, _router.route)('/');

const handleNavigate = () => null;

const renderActions = isCollapsed => {
  return _react.default.createElement("div", {
    className: _renderActions.default.root
  }, _react.default.createElement(_default2.default, {
    kind: "simple",
    icon: _plusIcon.default,
    color: "primary",
    title: "Add",
    className: _renderActions.default.button
  }), _react.default.createElement(_default2.default, {
    kind: "simple",
    icon: _trashOutlineIcon.default,
    color: "danger",
    title: "Delete",
    className: _renderActions.default.button
  }));
};

(0, _storybook.storiesOf)('Panes').addDecorator(_knobs.withKnobs).add('Pane', () => {
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/panes/default",
    propTables: [_default.default]
  }, _react.default.createElement(_router.RouterProvider, {
    router: router,
    onNavigate: handleNavigate,
    state: router.decode(location.pathname)
  }, _react.default.createElement(_default.default, {
    title: (0, _knobs.text)('title (prop)', 'This is the default pane title'),
    isCollapsed: (0, _knobs.boolean)('isCollapsed (prop)', false),
    onExpand: (0, _storybook.action)('onExpand'),
    onCollapse: (0, _storybook.action)('onCollapse'),
    minWidth: (0, _knobs.number)('minWidth (prop)', 300),
    onAction: handleMenuAction,
    menuItems: menuItems,
    renderActions: renderActions
  })));
}).add('Split', () => {
  const panes = (0, _range2.default)((0, _knobs.number)('#Panes', 2)).map((pane, i) => {
    return {
      title: `Pane ${i} is a long pane an it has a name and it should cap somewhere`,
      key: `pane${i}`,
      isCollapsed: [true][i],
      minWidth: [100, 100, 400][i] || 300,
      defaultWidth: [200, 200, 700][i] || 300
    };
  });

  const handleControllerCollapse = pane => {
    console.log('handleControllerCollapse', pane);
  };

  const handleControllerUnCollapse = pane => {
    console.log('handleControllerUnCollapse', pane);
  };

  const selectedPaneIndex = (0, _knobs.number)('Selected pane', 1);
  const knobsPanes = (0, _knobs.object)('Panes', panes);
  const actionsWhenCollapsed = (0, _knobs.boolean)('Show actions when collapsed', false);
  const customActionRenderer = (0, _knobs.boolean)('Custom action rendering', false);
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/panes/controller",
    propTables: [_controller.default]
  }, _react.default.createElement(_router.RouterProvider, {
    router: router,
    onNavigate: handleNavigate,
    state: router.decode(location.pathname)
  }, _react.default.createElement(_splitController.default, {
    selectedIndex: selectedPaneIndex,
    onCollapse: handleControllerCollapse,
    onUnCollapse: handleControllerUnCollapse
  }, knobsPanes.map((pane, i) => {
    return _react.default.createElement(_splitPaneWrapper.default, {
      minWidth: pane.minWidth,
      defaultWidth: pane.defaultWidth,
      key: pane.key,
      isCollapsed: pane.isCollapsed
    }, _react.default.createElement(_default.default, {
      title: pane.title,
      renderActions: customActionRenderer ? renderActions : undefined,
      onAction: handleMenuAction,
      menuItems: actionsWhenCollapsed ? menuItemsWhenCollapsed : menuItems,
      onExpand: (0, _storybook.action)('expand'),
      onCollapse: (0, _storybook.action)('onCollapse'),
      isCollapsed: pane.isCollapsed,
      onMenuToggle: (0, _storybook.action)('onMenuToggle')
    }, _react.default.createElement("div", null, "defaultWidth: ", pane.defaultWidth), _react.default.createElement("div", null, "minWidth: ", pane.minWidth)));
  }))));
});