"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _styleStyle = _interopRequireDefault(require("part:@sanity/components/selects/style-style"));

var _angleDownIcon = _interopRequireDefault(require("part:@sanity/base/angle-down-icon"));

var _circleThinIcon = _interopRequireDefault(require("part:@sanity/base/circle-thin-icon"));

var _circleCheckIcon = _interopRequireDefault(require("part:@sanity/base/circle-check-icon"));

var _default2 = require("part:@sanity/components/lists/default");

var _CaptureOutsideClicks = _interopRequireDefault(require("../utilities/CaptureOutsideClicks"));

var _poppable = _interopRequireDefault(require("part:@sanity/components/utilities/poppable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const modifiers = {
  preventOverflow: {
    padding: 0
  },
  offset: {
    offset: '0, 0'
  },
  flip: {
    enabled: false
  },
  customStyle: {
    enabled: true,
    fn: data => {
      data.styles = _objectSpread({}, data.styles, {
        maxHeight: window ? window.innerHeight - data.popper.top - 10 : 300
      });
      return data;
    }
  }
};

class StyleSelect extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      showList: false
    });

    _defineProperty(this, "handleSelect", event => {
      const index = event.currentTarget.dataset.index;

      if (!index) {
        return;
      }

      const item = this.props.items[index];

      if (!item) {
        return;
      }

      this.props.onChange(item);
      this.handleCloseList();
    });

    _defineProperty(this, "handleOpenList", () => {
      this.setState({
        showList: true
      });
      this.props.onOpen();
    });

    _defineProperty(this, "handleCloseList", () => {
      this.setState({
        showList: false
      });
      this.props.onClose();
    });

    _defineProperty(this, "handleInnerClick", () => {
      if (this.state.showList) {
        this.handleCloseList();
      } else {
        this.handleOpenList();
      }
    });

    _defineProperty(this, "handleRootKeyPress", () => {
      this.handleOpenList();
    });
  }

  render() {
    const _this$props = this.props,
          value = _this$props.value,
          transparent = _this$props.transparent,
          items = _this$props.items,
          className = _this$props.className,
          placeholder = _this$props.placeholder,
          renderItem = _this$props.renderItem;
    const showList = this.state.showList;

    const target = _react.default.createElement("div", {
      className: _styleStyle.default.inner,
      onClick: this.handleInnerClick
    }, _react.default.createElement("div", {
      className: _styleStyle.default.selectContainer
    }, _react.default.createElement("span", {
      className: _styleStyle.default.text
    }, value && value.length > 1 && 'Multiple', value && value.length == 1 && value[0].title, !value && placeholder), _react.default.createElement("div", {
      className: _styleStyle.default.arrow
    }, _react.default.createElement(_angleDownIcon.default, {
      color: "inherit"
    }))));

    return _react.default.createElement("div", {
      className: `${_styleStyle.default.root} ${className || ''} ${transparent ? _styleStyle.default.transparent : ''}`,
      onKeyPress: this.handleRootKeyPress,
      tabIndex: 0
    }, _react.default.createElement(_poppable.default, {
      target: target,
      onEscape: this.handleCloseList,
      modifiers: modifiers
    }, showList && _react.default.createElement("div", {
      className: _styleStyle.default.popper
    }, _react.default.createElement(_CaptureOutsideClicks.default, {
      onClickOutside: showList ? this.handleCloseList : undefined
    }, _react.default.createElement("div", null, _react.default.createElement(_default2.List, {
      className: _styleStyle.default.list
    }, items.map((item, index) => {
      const isSemiSelected = value && value.length > 1 && value.includes(item);
      const isSelected = value && value.length === 1 && value[0] == item;
      const classNames = `
                          ${isSelected ? _styleStyle.default.itemSelected : _styleStyle.default.item}
                          ${isSemiSelected ? _styleStyle.default.itemSemiSelected : ''}
                        `;
      return _react.default.createElement("div", {
        key: item.key,
        title: item.title,
        "data-index": index,
        onClick: this.handleSelect,
        className: classNames
      }, _react.default.createElement("div", {
        className: _styleStyle.default.itemIcon
      }, isSelected && _react.default.createElement(_circleCheckIcon.default, null), isSemiSelected && _react.default.createElement(_circleThinIcon.default, null)), _react.default.createElement("div", {
        className: _styleStyle.default.itemContent
      }, renderItem(item)));
    })))))));
  }

}

_defineProperty(StyleSelect, "propTypes", {
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onOpen: _propTypes.default.func,
  onClose: _propTypes.default.func,
  value: _propTypes.default.array,
  renderItem: _propTypes.default.func,
  className: _propTypes.default.string,
  transparent: _propTypes.default.bool,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string,
    active: _propTypes.default.bool
  }))
});

_defineProperty(StyleSelect, "defaultProps", {
  className: '',

  onChange() {},

  onOpen() {},

  onClose() {}

});

var _default = StyleSelect;
exports.default = _default;