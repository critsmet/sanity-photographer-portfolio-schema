"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _storybook = require("part:@sanity/storybook");

var _default = _interopRequireDefault(require("part:@sanity/components/selects/default"));

var _searchable = _interopRequireDefault(require("part:@sanity/components/selects/searchable"));

var _style = _interopRequireDefault(require("part:@sanity/components/selects/style"));

var _radio = _interopRequireDefault(require("part:@sanity/components/selects/radio"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _fuse = _interopRequireDefault(require("fuse.js"));

var _chance = _interopRequireDefault(require("chance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const chance = new _chance.default();
const items = (0, _range2.default)(20).map((item, i) => {
  return {
    title: chance.name(),
    key: `${i}`
  };
});
const radioItems = (0, _range2.default)(10).map((item, i) => {
  return {
    title: chance.name(),
    key: `${i}`
  };
});
const styleItems = [{
  title: 'Paragraph',
  key: 'style-paragraph'
}, {
  title: 'Heading 1',
  key: 'style-heading1'
}, {
  title: 'Heading 2',
  key: 'style-heading2'
}, {
  title: 'Heading 3',
  key: 'style-heading3'
}, {
  title: 'Heading 4',
  key: 'style-heading4'
}, {
  title: 'Heading 5',
  key: 'style-heading5'
}];
const centerStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100%',
  width: '100%',
  position: 'absolute',
  top: 0,
  left: 0
};

const renderStyleItem = function renderStyleItem(item) {
  switch (item.key) {
    case 'style-paragraph':
      return _react.default.createElement("div", {
        style: {
          fontSize: '1em',
          fontWeight: 'normal'
        }
      }, item.title);

    case 'style-heading1':
      return _react.default.createElement("div", {
        style: {
          fontSize: '2em',
          fontWeight: 'bold'
        }
      }, item.title);

    case 'style-heading2':
      return _react.default.createElement("div", {
        style: {
          fontSize: '1.5em',
          fontWeight: 'bold'
        }
      }, item.title);

    case 'style-heading3':
      return _react.default.createElement("div", {
        style: {
          fontSize: '1.2em',
          fontWeight: 'bold'
        }
      }, item.title);

    default:
      return _react.default.createElement("div", null, "Style: ", item.title);
  }
};

class SearchableTest extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleChange", value => {
      this.setState({
        value: value
      });
    });

    _defineProperty(this, "handleSearch", query => {
      console.log('query2', query); // eslint-disable-line

      const result = this.fuse.search(query);
      this.setState({
        loading: true
      });
      setTimeout(() => {
        this.setState({
          searchResult: result,
          loading: false
        });
      }, 500);
    });

    const fuseOptions = {
      keys: ['title']
    };
    this.searchAbleItems = (0, _range2.default)(100).map((item, i) => {
      return {
        title: chance.name(),
        key: `${i}`
      };
    });
    this.fuse = new _fuse.default(this.searchAbleItems, fuseOptions);
    this.state = {
      searchResult: [],
      value: null
    };
  }

  handleFocus() {
    console.log('handleFocus'); // eslint-disable-line
  }

  renderItem(item) {
    return _react.default.createElement("div", null, item.title);
  }

  renderValue(item) {
    console.log('Value to string:', item, item.title); // eslint-disable-line

    if (item) {
      return item.title;
    }

    return '';
  }

  render() {
    return _react.default.createElement(_searchable.default, {
      label: "This is the label",
      placeholder: "This is the placeholder",
      onSearch: this.handleSearch,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onOpen: (0, _storybook.action)('onOpen'),
      isLoading: this.state.loading,
      items: this.state.searchResult,
      value: this.state.value,
      renderItem: this.renderItem,
      valueToString: this.renderValue
    });
  }

}

(0, _storybook.storiesOf)('Selects').addDecorator(_knobs.withKnobs).add('Default', () => {
  const options = {
    range: true,
    min: 0,
    max: items.length,
    step: 1
  };
  const valueIndex = (0, _knobs.number)('Selected item', -1, options);
  return _react.default.createElement("div", {
    style: _objectSpread({}, centerStyle, {
      color: (0, _knobs.color)('color', undefined, 'test'),
      backgroundColor: (0, _knobs.color)('background color', undefined, 'test')
    })
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/selects/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    label: (0, _knobs.text)('label', 'This is the label', 'props'),
    placeholder: (0, _knobs.text)('placeholder', 'This is the placeholder', 'props'),
    onChange: (0, _storybook.action)('onChange'),
    onFocus: (0, _storybook.action)('onFocus'),
    onBlur: (0, _storybook.action)('onBlur'),
    items: items,
    value: items[valueIndex],
    disabled: (0, _knobs.boolean)('disabled', false, 'props')
  })));
}).add('Default with value', () => {
  return _react.default.createElement("div", {
    style: centerStyle
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/selects/default",
    propTables: [_default.default]
  }, _react.default.createElement(_default.default, {
    label: (0, _knobs.text)('label', 'This is the label', 'props'),
    placeholder: (0, _knobs.text)('placeholder', 'This is the placeholder', 'props'),
    onChange: (0, _storybook.action)('onChange'),
    onFocus: (0, _storybook.action)('onFocus'),
    onBlur: (0, _storybook.action)('onBlur'),
    value: items[10],
    items: items,
    disabled: (0, _knobs.boolean)('disabled', false, 'props')
  })));
}).add('Searchable', // `
//   When provided with items, the component searches inside these when no onInputChange is provided
// `,
() => {
  const renderItem = function renderItem(item) {
    return _react.default.createElement("div", null, item.title);
  };

  const hasOnclear = (0, _knobs.boolean)('has onClear', false, 'test');
  const selected = (0, _knobs.number)('Selected item (value)', -1, {
    range: true,
    min: -1,
    max: items.length,
    step: 1
  });
  const selectedItem = items[selected];
  return _react.default.createElement("div", {
    style: _objectSpread({
      minWidth: '320px'
    }, centerStyle)
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/selects/searchable",
    propTables: [_searchable.default]
  }, _react.default.createElement(_searchable.default, {
    label: (0, _knobs.text)('label', 'This is the label', 'props'),
    placeholder: (0, _knobs.text)('placeholder', 'This is the placeholder', 'props'),
    onChange: (0, _storybook.action)('onChange'),
    onFocus: (0, _storybook.action)('onFocus'),
    onBlur: (0, _storybook.action)('onBlur'),
    onOpen: (0, _storybook.action)('onOpen'),
    value: selectedItem,
    inputValue: (0, _knobs.text)('Inputvalue', selectedItem && selectedItem.title, 'props'),
    renderItem: renderItem,
    items: items,
    isLoading: (0, _knobs.boolean)('isLoading', false, 'props'),
    disabled: (0, _knobs.boolean)('disabled (prop)', false, 'props'),
    onClear: hasOnclear ? (0, _storybook.action)('onClear') : undefined
  })));
}).add('Style select', () => {
  return _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/selects/style",
    propTables: [_style.default]
  }, _react.default.createElement("div", {
    style: centerStyle
  }, _react.default.createElement(_style.default, {
    label: (0, _knobs.text)('label', 'This is the label', 'props'),
    placeholder: (0, _knobs.text)('placeholder', 'This is the placeholder', 'props'),
    transparent: (0, _knobs.boolean)('transparent', false, 'props'),
    onChange: (0, _storybook.action)('onChange'),
    onFocus: (0, _storybook.action)('onFocus'),
    onOpen: (0, _storybook.action)('onOpen'),
    renderItem: renderStyleItem,
    items: styleItems // value={select(
    //   'value',
    //   {
    //     'No value': undefined,
    //     'One value': [styleItems[0]],
    //     'Multiple values': [styleItems[0], styleItems[2]]
    //   },
    //   undefined,
    //   'props'
    // )}

  })));
}).add('Searchable example', () => {
  return _react.default.createElement("div", {
    style: centerStyle
  }, _react.default.createElement(SearchableTest, null), "This text should be behind the dropdown");
}).add('Radiobuttons', // `
//   When an onInputChange is provided. Populate the items, and remember to set _loading prop_ when waiting for server.
// `,
() => {
  const value = radioItems[(0, _knobs.number)('value', 0, {
    range: true,
    min: 0,
    max: radioItems.length - 1
  }, 'props')];
  return _react.default.createElement("div", {
    style: _objectSpread({}, centerStyle, {
      padding: '2rem'
    })
  }, _react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/selects/radio",
    propTables: [_radio.default]
  }, _react.default.createElement(_radio.default, {
    items: radioItems,
    value: value,
    onChange: (0, _storybook.action)('onChange'),
    legend: (0, _knobs.text)('legend', 'Radio button select', 'props'),
    direction: (0, _knobs.select)('direction', [false, 'vertical', 'vertical'], undefined, 'props')
  })));
});