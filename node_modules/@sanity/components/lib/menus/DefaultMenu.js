"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _router = require("part:@sanity/base/router");

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/menus/default-style"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DefaultMenuItem = _interopRequireDefault(require("./DefaultMenuItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ungrouped = Symbol('__ungrouped__');

function parentButtonIsMenuButton(node, id) {
  let el = node;

  do {
    if (el.tagName === 'BUTTON' && el.dataset.menuButtonId === id) {
      return true;
    }
  } while (el = el.parentNode);

  return false;
}

class DefaultMenu extends _react.default.Component {
  static getDerivedStateFromProps(props) {
    const groups = props.items.reduce((acc, item) => {
      if (!item.group) {
        return acc;
      }

      return acc.includes(item.group) ? acc : acc.concat(item.group);
    }, (props.groups || []).map(group => group.id));
    const byGroup = (0, _groupBy2.default)(props.items, item => item.group || ungrouped);
    const hasUngrouped = typeof byGroup[ungrouped] !== 'undefined';
    const targets = hasUngrouped ? [ungrouped].concat(groups) : groups;
    const items = (0, _flatten2.default)(targets.map(group => byGroup[group] || []));
    return {
      items
    };
  }

  constructor(props) {
    super(props);

    _defineProperty(this, "handleClickOutside", event => {
      const _this$props = this.props,
            id = _this$props.id,
            onClickOutside = _this$props.onClickOutside;

      if (id && parentButtonIsMenuButton(event.target, id)) {
        // Don't treat clicks on the open menu button as "outside" clicks -
        // prevents us from double-toggling a menu as open/closed
        return;
      }

      onClickOutside(event);
    });

    _defineProperty(this, "handleKeyDown", event => {
      const router = this.props.router;
      const focusedItem = this.state.focusedItem;
      const items = this.state.items.filter(item => !item.isDisabled);
      const currentIndex = items.indexOf(focusedItem) || 0;

      if (event.key === 'Escape') {
        this.props.onClose(event);
      }

      if (event.key === 'ArrowDown') {
        this.setState({
          focusedItem: items[currentIndex < items.length - 1 ? currentIndex + 1 : 0]
        });
      }

      if (event.key === 'ArrowUp') {
        this.setState({
          focusedItem: items[currentIndex > 0 ? currentIndex - 1 : items.length - 1]
        });
      }

      if (event.key === 'Enter' && focusedItem) {
        if (focusedItem.intent) {
          router.navigateIntent(focusedItem.intent.type, focusedItem.intent.params);
        } else {
          this.handleAction(event, focusedItem);
        }
      }
    });

    _defineProperty(this, "handleAction", (event, item) => {
      event.stopPropagation();

      if (item.intent) {
        this.props.onClose();
      } else {
        this.props.onAction(item);
      }
    });

    _defineProperty(this, "handleFocus", (event, focusedItem) => {
      this.setState({
        focusedItem
      });
    });

    _defineProperty(this, "handleKeyPress", event => {
      const index = event.target.getAttribute('data-action-id');

      if (event.key === 'Enter') {
        this.props.onAction(this.props.items[index]);
      }
    });

    this.state = {
      focusedItem: null
    };
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown, false);
    window.addEventListener('resize', this.handleResize, false);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize, false);
    window.removeEventListener('keydown', this.handleKeyDown, false);
  } // eslint-disable-next-line complexity


  renderGroupedItems() {
    const ripple = this.props.ripple;
    const _this$state = this.state,
          focusedItem = _this$state.focusedItem,
          items = _this$state.items;
    return items.map((item, index) => {
      const prev = items[index - 1];
      return _react.default.createElement(_DefaultMenuItem.default, {
        key: index,
        item: item,
        ripple: ripple,
        danger: item.danger,
        isDisabled: item.isDisabled,
        isFocused: item === focusedItem,
        onFocus: this.handleFocus,
        onAction: this.handleAction,
        className: prev && prev.group !== item.group ? _defaultStyle.default.divider : ''
      });
    });
  }

  render() {
    const className = this.props.className;
    return _react.default.createElement("div", {
      className: (0, _classnames.default)([_defaultStyle.default.root, className])
    }, _react.default.createElement("ul", {
      className: _defaultStyle.default.list
    }, this.renderGroupedItems()));
  }

}

_defineProperty(DefaultMenu, "propTypes", {
  id: _propTypes.default.string,
  onAction: _propTypes.default.func.isRequired,
  ripple: _propTypes.default.bool,
  className: _propTypes.default.string,
  onClickOutside: _propTypes.default.func,
  onClose: _propTypes.default.func,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.node.isRequired,
    icon: _propTypes.default.func,
    intent: _propTypes.default.shape({
      type: _propTypes.default.string.isRequired,
      params: _propTypes.default.object
    })
  })),
  groups: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    title: _propTypes.default.string
  })),
  router: _propTypes.default.shape({
    navigateIntent: _propTypes.default.func.isRequired
  }).isRequired
});

_defineProperty(DefaultMenu, "defaultProps", {
  id: undefined,
  className: '',
  items: [],
  groups: [],
  ripple: true,

  onClickOutside() {},

  onClose() {}

});

var _default = (0, _router.withRouterHOC)((0, _reactClickOutside.default)(DefaultMenu));

exports.default = _default;