"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slugValidator = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const _require = require('lodash'),
      get = _require.get;

function getDocumentIds(id) {
  const isDraft = id.indexOf('drafts.') === 0;
  return {
    published: isDraft ? id.slice('drafts.'.length) : id,
    draft: isDraft ? id : `drafts.${id}`
  };
}

function serializePath(path) {
  return path.reduce((target, part, i) => {
    const isIndex = typeof part === 'number';
    const isKey = part && part._key;
    const separator = i === 0 ? '' : '.';
    const add = isIndex || isKey ? '[]' : `${separator}${part}`;
    return `${target}${add}`;
  }, '');
}

const defaultIsUnique = (slug, options) => {
  const client = require('part:@sanity/base/client');

  const document = options.document,
        path = options.path;

  const _getDocumentIds = getDocumentIds(document._id),
        published = _getDocumentIds.published,
        draft = _getDocumentIds.draft;

  const docType = document._type;
  const atPath = serializePath(path.concat('current'));
  const constraints = ['_type == $docType', `!(_id in [$draft, $published])`, `${atPath} == $slug`].join(' && ');
  return client.fetch(`!defined(*[${constraints}][0]._id)`, {
    docType,
    draft,
    published,
    slug
  });
};

const slugValidator = (value, options) => {
  if (!value) {
    return true;
  }

  if (!value.current) {
    return 'Slug must have a value';
  }

  const errorMessage = 'Slug is already in use';
  const isUnique = get(options, 'type.options.isUnique', defaultIsUnique);
  return Promise.resolve(isUnique(value.current, _objectSpread({}, options, {
    defaultIsUnique
  }))).then(slugIsUnique => slugIsUnique ? true : errorMessage);
};

exports.slugValidator = slugValidator;