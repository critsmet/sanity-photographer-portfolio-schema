"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _versionChecker = _interopRequireDefault(require("part:@sanity/base/version-checker"));

var _sanityVersions = _interopRequireDefault(require("sanity:versions"));

var _SanityStatus = _interopRequireDefault(require("./SanityStatus"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line no-console
const logError = err => console.error(err);

const levels = ['low', 'medium', 'high'];

const getHighestLevel = outdated => outdated.reduce((acc, pkg) => Math.max(acc, levels.indexOf(pkg.severity)), 0);

class SanityStatusContainer extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      isSupported: true,
      isUpToDate: true,
      level: 'low',
      outdated: undefined,
      showDialog: false
    });

    _defineProperty(this, "handleHideDialog", () => {
      this.setState({
        showDialog: false
      });
    });

    _defineProperty(this, "handleShowDialog", () => {
      this.setState({
        showDialog: true
      });
    });

    _defineProperty(this, "handleVersionReply", ({
      result
    }) => {
      const isSupported = result.isSupported,
            isUpToDate = result.isUpToDate,
            outdated = result.outdated;
      const level = levels[getHighestLevel(outdated || [])];
      this.setState({
        isSupported,
        isUpToDate,
        level,
        outdated
      });
    });
  }

  componentDidMount() {
    _versionChecker.default.checkVersions().then(this.handleVersionReply).catch(logError);
  }

  render() {
    return _react.default.createElement(_SanityStatus.default, _extends({}, this.state, {
      onHideDialog: this.handleHideDialog,
      onShowDialog: this.handleShowDialog,
      versions: _sanityVersions.default
    }));
  }

}

var _default = SanityStatusContainer;
exports.default = _default;