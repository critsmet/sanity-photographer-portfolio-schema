"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaErrorReporter = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _SchemaErrors = require("./SchemaErrors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function renderPath(path) {
  return path.map(segment => {
    if (segment.kind === 'type') {
      return `${segment.name || '<unnamed>'}(${segment.type})`;
    }

    if (segment.kind === 'property') {
      return segment.name;
    }

    if (segment.kind === 'type') {
      return `${segment.type}(${segment.name || '<unnamed>'})`;
    }

    return null;
  }).filter(Boolean).join(' > ');
}

function reportWarnings() {
  if (!__DEV__) {
    return;
  }
  /* eslint-disable no-console */


  const problemGroups = _schema.default._validation;
  const groupsWithWarnings = problemGroups.filter(group => group.problems.some(problem => problem.severity === 'warning'));

  if (groupsWithWarnings.length === 0) {
    return;
  }

  console.groupCollapsed(`⚠️ Schema has ${groupsWithWarnings.length} warnings`);
  groupsWithWarnings.forEach((group, i) => {
    const path = renderPath(group.path);
    console.group(`%cAt ${path}`, 'color: #FF7636');
    group.problems.forEach((problem, j) => {
      console.log(problem.message);
    });
    console.groupEnd(`At ${path}`);
  });
  console.groupEnd('Schema warnings');
  /* eslint-enable no-console */
}

class SchemaErrorReporter extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "componentDidMount", reportWarnings);
  }

  render() {
    const problemGroups = _schema.default._validation;
    const groupsWithErrors = problemGroups.filter(group => group.problems.some(problem => problem.severity === 'error'));

    if (groupsWithErrors.length > 0) {
      return _react.default.createElement(_SchemaErrors.SchemaErrors, {
        problemGroups: groupsWithErrors
      });
    }

    return this.props.children();
  }

}

exports.SchemaErrorReporter = SchemaErrorReporter;
SchemaErrorReporter.propTypes = {
  children: _propTypes.default.func
};