"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _versionChecker = _interopRequireDefault(require("part:@sanity/base/version-checker"));

var _UpdateNotifierDialog = _interopRequireDefault(require("./UpdateNotifierDialog"));

var _CurrentVersionsDialog = _interopRequireDefault(require("./CurrentVersionsDialog"));

var _UpdateNotifier = _interopRequireDefault(require("./styles/UpdateNotifier.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const logError = err => console.error(err);

const classes = {
  low: 'notice',
  medium: 'warn',
  high: 'critical'
};
const levels = ['low', 'medium', 'high'];

const getHighestLevel = outdated => outdated.reduce((acc, pkg) => Math.max(acc, levels.indexOf(pkg.severity)), 0);

class UpdateNotifier extends _react.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {});

    _defineProperty(this, "handleVersionReply", ({
      result
    }) => {
      const isSupported = result.isSupported,
            isUpToDate = result.isUpToDate,
            outdated = result.outdated;
      const level = levels[getHighestLevel(outdated || [])];
      this.setState({
        isSupported,
        isUpToDate,
        level,
        outdated
      });
    });

    _defineProperty(this, "handleShowUpdateNotifier", () => {
      this.setState({
        showUpdateNotifier: true
      });
    });

    _defineProperty(this, "handleHideUpdateNotifier", () => {
      this.setState({
        showUpdateNotifier: false
      });
    });
  }

  componentDidMount() {
    _versionChecker.default.checkVersions().then(this.handleVersionReply).catch(logError);
  }

  render() {
    const _this$state = this.state,
          level = _this$state.level,
          outdated = _this$state.outdated,
          isUpToDate = _this$state.isUpToDate,
          isSupported = _this$state.isSupported,
          showUpdateNotifier = _this$state.showUpdateNotifier;
    const severity = isSupported ? level : 'high';
    const className = _UpdateNotifier.default[classes[severity] || 'button'];
    const Dialog = isUpToDate ? _CurrentVersionsDialog.default : _UpdateNotifierDialog.default;
    return _react.default.createElement("div", {
      className: _UpdateNotifier.default.container
    }, showUpdateNotifier && _react.default.createElement(Dialog, {
      severity: severity,
      outdated: outdated,
      onClose: this.handleHideUpdateNotifier
    }), _react.default.createElement("button", {
      type: "button",
      onClick: this.handleShowUpdateNotifier,
      className: className
    }, !isUpToDate && _react.default.createElement("div", {
      className: _UpdateNotifier.default.warningIcon
    }, _react.default.createElement(_warningIcon.default, null)), _react.default.createElement("div", {
      className: isUpToDate ? _UpdateNotifier.default.upToDateText : _UpdateNotifier.default.upgradeText
    }, isUpToDate ? 'Up to date' : 'Upgrade')));
  }

}

var _default = UpdateNotifier;
exports.default = _default;