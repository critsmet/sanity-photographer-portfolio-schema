"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _union2 = _interopRequireDefault(require("lodash/union"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _flow2 = _interopRequireDefault(require("lodash/flow"));

var _react = _interopRequireDefault(require("react"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema?"));

var _client = _interopRequireDefault(require("part:@sanity/base/client?"));

var _preview = _interopRequireDefault(require("part:@sanity/base/preview?"));

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _router = require("part:@sanity/base/router");

var _searchIcon = _interopRequireDefault(require("part:@sanity/base/search-icon"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _Search = _interopRequireDefault(require("./styles/Search.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isParentOf(possibleParent, possibleChild) {
  let current = possibleChild;

  while (current) {
    if (current === possibleParent) {
      return true;
    }

    current = current.parentNode;
  }

  return false;
} // Removes published documents that also has a draft


function removeDupes(documents) {
  const drafts = documents.map(doc => doc._id).filter(_draftUtils.isDraftId);
  return documents.filter(doc => {
    const draftId = (0, _draftUtils.getDraftId)(doc._id);
    const publishedId = (0, _draftUtils.getPublishedId)(doc._id);
    const hasDraft = drafts.includes(draftId);
    const isPublished = doc._id === publishedId;
    return isPublished ? !hasDraft : true;
  });
}

const combineFields = (0, _flow2.default)([_flatten2.default, _union2.default, _compact2.default]);

function search(query) {
  if (!_client.default) {
    throw new Error('Sanity client is missing');
  }

  const candidateTypes = _schema.default.getTypeNames().filter(typeName => !typeName.startsWith('sanity.')).map(typeName => _schema.default.get(typeName));

  const terms = query.split(/\s+/).filter(Boolean);
  const params = terms.reduce((acc, term, i) => {
    acc[`t${i}`] = `${term}*`;
    return acc;
  }, {});
  const uniqueFields = combineFields(candidateTypes.map(type => type.__unstable_searchFields));
  const constraints = terms.map((term, i) => uniqueFields.map(field => `${field} match $t${i}`));
  const constraintString = constraints.map(constraint => `(${constraint.join(' || ')})`).join(' && ');
  return _client.default.observable.fetch(`*[${constraintString}][0...100]`, params);
}

var _default = (0, _reactClickOutside.default)(class Search extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "input$", new _rxjs.Subject());

    _defineProperty(this, "componentWillUnmount$", new _rxjs.Subject());

    _defineProperty(this, "state", {
      isOpen: false,
      hits: [],
      activeIndex: -1,
      inputValue: ''
    });

    _defineProperty(this, "handleInputChange", event => {
      this.input$.next(event);
      this.open();
    });

    _defineProperty(this, "handleKeyPress", event => {
      this.inputElement.focus();
    });

    _defineProperty(this, "handleKeyDown", event => {
      if (event.key === 'Backspace') {
        this.inputElement.focus();
      }

      if (event.key === 'Escape') {
        this.close();
      }

      if (event.key === 'Enter') {
        this.listElement.querySelector(`[data-hit-index="${this.state.activeIndex}"]`).click();
      }

      const _this$state = this.state,
            isOpen = _this$state.isOpen,
            hits = _this$state.hits,
            activeIndex = _this$state.activeIndex;
      const isArrowKey = ['ArrowUp', 'ArrowDown'].includes(event.key);

      if (!isOpen && isArrowKey) {
        this.open();
        return;
      }

      const lastIndex = hits.length - 1;

      if (isArrowKey) {
        event.preventDefault();
        let nextIndex = activeIndex + (event.key === 'ArrowUp' ? -1 : 1);

        if (nextIndex < 0) {
          nextIndex = lastIndex;
        }

        if (nextIndex > lastIndex) {
          nextIndex = 0;
        }

        this.setState({
          activeIndex: nextIndex
        });
      }
    });

    _defineProperty(this, "handleClickOutside", el => {
      if (this.state.isOpen) {
        this.close();
      }
    });

    _defineProperty(this, "handleHitClick", el => {
      this.close();
    });

    _defineProperty(this, "handleInputClick", el => {
      this.open();
    });

    _defineProperty(this, "handleFocus", el => {
      this.open();
    });

    _defineProperty(this, "handleBlur", el => {
      if (!isParentOf(this.rootElement, el.relatedTarget)) {
        this.close();
      }
    });

    _defineProperty(this, "setInput", el => {
      this.inputElement = el;
    });

    _defineProperty(this, "setListElement", el => {
      this.listElement = el;
    });

    _defineProperty(this, "setRootElement", el => {
      this.rootElement = el;
    });

    _defineProperty(this, "handleHitMouseDown", ev => {
      this.setState({
        activeIndex: Number(ev.currentTarget.getAttribute('data-hit-index'))
      });
    });

    _defineProperty(this, "handleHitMouseUp", () => {
      this.inputElement.focus();
    });

    _defineProperty(this, "renderItem", (item, index) => {
      const type = _schema.default.get(item._type);

      const activeIndex = this.state.activeIndex;
      return _react.default.createElement(_router.IntentLink, {
        intent: "edit",
        params: {
          id: item._id,
          type: type.name
        },
        className: activeIndex === index ? _Search.default.activeLink : _Search.default.link,
        "data-hit-index": index,
        onMouseDown: this.handleHitMouseDown,
        onMouseUp: this.handleHitMouseUp,
        onClick: this.handleHitClick,
        tabIndex: -1
      }, _react.default.createElement("div", {
        className: _Search.default.itemType
      }, type.title), _react.default.createElement(_preview.default, {
        value: item,
        layout: "default",
        type: type
      }), _react.default.createElement(_reactInk.default, {
        duration: 200,
        opacity: 0.1,
        radius: 200
      }));
    });
  }

  componentDidMount() {
    this.input$.asObservable().pipe((0, _operators.map)(event => event.target.value), (0, _operators.tap)(inputValue => this.setState({
      inputValue
    })), (0, _operators.takeUntil)(this.componentWillUnmount$.asObservable())).subscribe();
    this.input$.asObservable().pipe((0, _operators.map)(event => event.target.value), (0, _operators.debounceTime)(100), (0, _operators.tap)(() => {
      this.setState({
        isSearching: true
      });
    }), (0, _operators.switchMap)(search), // we need this filtering because the search may return documents of types not in schema
    (0, _operators.map)(hits => hits.filter(hit => _schema.default.has(hit._type))), (0, _operators.map)(removeDupes), (0, _operators.tap)(hits => {
      this.setState({
        isSearching: false,
        hits: hits
      });
    }), (0, _operators.takeUntil)(this.componentWillUnmount$.asObservable())).subscribe();
  }

  componentWillUnmount() {
    this.componentWillUnmount$.next();
    this.componentWillUnmount$.complete();
  }

  close() {
    this.setOpen(false);
  }

  open() {
    this.setOpen(true);
  }

  setOpen(isOpen) {
    this.setState({
      isOpen
    });
  }

  componentDidUpdate(prevProps, prevState) {
    if (!prevState.isOpen && this.state.isOpen) {
      this.inputElement.select();
    }
  }

  render() {
    const _this$state2 = this.state,
          isSearching = _this$state2.isSearching,
          hits = _this$state2.hits,
          isOpen = _this$state2.isOpen,
          inputValue = _this$state2.inputValue;
    return _react.default.createElement("div", {
      className: _Search.default.root,
      ref: this.setRootElement
    }, _react.default.createElement("div", {
      className: _Search.default.inner
    }, _react.default.createElement("label", {
      className: _Search.default.label
    }, _react.default.createElement("i", {
      className: _Search.default.icon,
      "aria-hidden": true
    }, _react.default.createElement(_searchIcon.default, null))), _react.default.createElement("input", {
      className: _Search.default.input,
      type: "search",
      value: isOpen ? inputValue : '',
      onChange: this.handleInputChange,
      onBlur: this.handleBlur,
      onClick: this.handleInputClick,
      onFocus: this.handleFocus,
      onKeyDown: this.handleKeyDown,
      placeholder: "Search\u2026",
      ref: this.setInput
    })), isOpen && (inputValue || isSearching || hits > 0) && _react.default.createElement("div", {
      className: _Search.default.result
    }, _react.default.createElement("div", {
      className: _Search.default.spinner
    }, isSearching && _react.default.createElement(_spinner.default, null)), inputValue && !isSearching && (!hits || hits.length === 0) && _react.default.createElement("div", {
      className: _Search.default.noHits
    }, "Could not find ", _react.default.createElement("strong", null, "\u201C", inputValue, "\u201D")), !isSearching && hits && hits.length > 0 && _react.default.createElement("div", {
      className: _Search.default.listContainer
    }, _react.default.createElement("ul", {
      className: _Search.default.hits,
      onKeyDown: this.handleKeyDown,
      onKeyPress: this.handleKeyPress,
      ref: this.setListElement
    }, hits.map((hit, index) => _react.default.createElement("li", {
      key: hit._id,
      className: _Search.default.hit
    }, this.renderItem(hit, index)))))));
  }

});

exports.default = _default;