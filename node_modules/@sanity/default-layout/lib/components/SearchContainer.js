"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _union2 = _interopRequireDefault(require("lodash/union"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var _compact2 = _interopRequireDefault(require("lodash/compact"));

var _flow2 = _interopRequireDefault(require("lodash/flow"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema?"));

var _client = _interopRequireDefault(require("part:@sanity/base/client?"));

var _preview = _interopRequireDefault(require("part:@sanity/base/preview?"));

var _searchUtils = require("part:@sanity/base/util/search-utils");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _rxjs = require("rxjs");

var _router = require("part:@sanity/base/router");

var _reactInk = _interopRequireDefault(require("react-ink"));

var _SearchField = _interopRequireDefault(require("./SearchField"));

var _SearchResults = _interopRequireDefault(require("./SearchResults"));

var _operators = require("rxjs/operators");

var _SearchResults2 = _interopRequireDefault(require("./styles/SearchResults.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// NOTE: Remove until we know what hotkey to use
// const hotKeys = {
//   openSearch: isKeyHotkey('ctrl+t')
// }
// Removes published documents that also has a draft
function removeDupes(documents) {
  const drafts = documents.map(doc => doc._id).filter(_draftUtils.isDraftId);
  return documents.filter(doc => {
    const draftId = (0, _draftUtils.getDraftId)(doc._id);
    const publishedId = (0, _draftUtils.getPublishedId)(doc._id);
    const hasDraft = drafts.includes(draftId);
    const isPublished = doc._id === publishedId;
    return isPublished ? !hasDraft : true;
  });
}

const combineFields = (0, _flow2.default)([_flatten2.default, _union2.default, _compact2.default]);

function search(query) {
  if (!_client.default) {
    throw new Error('Sanity client is missing');
  }

  const candidateTypes = _schema.default.getTypeNames().filter(typeName => !typeName.startsWith('sanity.')).map(typeName => _schema.default.get(typeName));

  const terms = query.split(/\s+/).filter(Boolean);
  const params = terms.reduce((acc, term, i) => {
    acc[`t${i}`] = `${term}*`;
    return acc;
  }, {});
  const uniqueFields = combineFields(candidateTypes.map(type => (type.__unstable_searchFields || []).map(_searchUtils.joinPath)));
  const constraints = terms.map((term, i) => uniqueFields.map(joinedPath => `${joinedPath} match $t${i}`));
  const constraintString = constraints.map(constraint => `(${constraint.join('||')})`).join('&&');
  return _client.default.observable.fetch(`*[${constraintString}][0...100] {_id, _type}`, params);
}

class SearchContainer extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "input$", new _rxjs.Subject());

    _defineProperty(this, "componentWillUnmount$", new _rxjs.Subject());

    _defineProperty(this, "fieldInstance", null);

    _defineProperty(this, "resultsInstance", null);

    _defineProperty(this, "state", {
      activeIndex: -1,
      isBleeding: true,
      // mobile first
      isFocused: false,
      isLoading: false,
      isPressing: false,
      results: [],
      value: ''
    });

    _defineProperty(this, "handleInputChange", event => {
      this.input$.next(event);
    });

    _defineProperty(this, "handleBlur", () => {
      if (!this.state.isPressing) {
        this.props.onClose();
        this.setState({
          isFocused: false
        });
      }
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.onOpen();
      this.setState({
        isFocused: true
      });
    });

    _defineProperty(this, "handleHitMouseDown", event => {
      this.setState({
        activeIndex: Number(event.currentTarget.getAttribute('data-hit-index'))
      });
    });

    _defineProperty(this, "handleHitClick", event => {
      this.handleClear();
    });

    _defineProperty(this, "handleClear", () => {
      this.props.onClose();
      this.setState({
        isFocused: false,
        value: '',
        results: []
      });
    });

    _defineProperty(this, "handleKeyDown", event => {
      const _this$state = this.state,
            results = _this$state.results,
            activeIndex = _this$state.activeIndex;
      const isArrowKey = ['ArrowUp', 'ArrowDown'].includes(event.key);
      const lastIndex = results.length - 1;

      if (event.key === 'Enter') {
        this.resultsInstance.element.querySelector(`[data-hit-index="${activeIndex}"]`).click();
      }

      if (event.key === 'Escape') {
        // this.handleClear()
        this.fieldInstance.inputElement.blur();
      } // TODO: is it safe to remove this?
      // if (!isFocused && isArrowKey) {
      //   this.handleFocus()
      //   return
      // }


      if (isArrowKey) {
        event.preventDefault();
        let nextIndex = activeIndex + (event.key === 'ArrowUp' ? -1 : 1);

        if (nextIndex < 0) {
          nextIndex = lastIndex;
        }

        if (nextIndex > lastIndex) {
          nextIndex = 0;
        }

        this.setState({
          activeIndex: nextIndex
        });
      }
    });

    _defineProperty(this, "handleMouseDown", () => {
      this.setState({
        isPressing: true
      });
    });

    _defineProperty(this, "handleWindowKeyDown", event => {// if (hotKeys.openSearch(event)) {
      //   this.fieldInstance.inputElement.focus()
      //   event.preventDefault()
      //   event.stopPropagation()
      // }
    });

    _defineProperty(this, "handleWindowResize", () => {
      const isBleeding = !window.matchMedia('all and (min-width: 32em)').matches;
      this.setState({
        isBleeding
      });
    });

    _defineProperty(this, "handleWindowMouseUp", () => {
      this.setState({
        isPressing: false
      });
    });

    _defineProperty(this, "setFieldInstance", ref => {
      this.fieldInstance = ref;
    });

    _defineProperty(this, "setResultsInstance", ref => {
      this.resultsInstance = ref;
    });

    _defineProperty(this, "renderItem", (item, index, className) => {
      const type = _schema.default.get(item._type);

      return _react.default.createElement(_router.IntentLink, {
        className: className,
        intent: "edit",
        params: {
          id: item._id,
          type: type.name
        },
        "data-hit-index": index,
        onMouseDown: this.handleHitMouseDown,
        onClick: this.handleHitClick,
        tabIndex: -1
      }, _react.default.createElement(_preview.default, {
        value: item,
        layout: "default",
        type: type,
        status: _react.default.createElement("div", {
          className: _SearchResults2.default.itemType
        }, type.title)
      }), _react.default.createElement(_reactInk.default, {
        duration: 200,
        opacity: 0.1,
        radius: 200
      }));
    });
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleWindowKeyDown);
    window.addEventListener('mouseup', this.handleWindowMouseUp);
    window.addEventListener('resize', this.handleWindowResize);
    this.input$.asObservable().pipe((0, _operators.map)(event => event.target.value), (0, _operators.tap)(value => this.setState({
      activeIndex: -1,
      value
    })), (0, _operators.takeUntil)(this.componentWillUnmount$.asObservable())).subscribe();
    this.input$.asObservable().pipe((0, _operators.map)(event => event.target.value), (0, _operators.filter)(value => value.length === 0), (0, _operators.tap)(() => {
      this.setState({
        results: []
      });
    })).subscribe();
    this.input$.asObservable().pipe((0, _operators.map)(event => event.target.value), (0, _operators.filter)(value => value.length > 0), (0, _operators.tap)(() => {
      this.setState({
        isLoading: true
      });
    }), (0, _operators.debounceTime)(100), (0, _operators.switchMap)(search), // we need this filtering because the search may return documents of types not in schema
    (0, _operators.map)(hits => hits.filter(hit => _schema.default.has(hit._type))), (0, _operators.map)(removeDupes), (0, _operators.tap)(results => {
      this.setState({
        isLoading: false,
        results
      });
    }), (0, _operators.takeUntil)(this.componentWillUnmount$.asObservable())).subscribe(); // trigger initial resize

    this.handleWindowResize();
  }

  componentDidUpdate(prevProps) {
    if (!prevProps.shouldBeFocused && this.props.shouldBeFocused) {
      this.fieldInstance.inputElement.select();
    }
  }

  componentWillUnmount() {
    window.removeEventListener('mouseup', this.handleWindowMouseUp);
    window.removeEventListener('keydown', this.handleWindowKeyDown);
    window.removeEventListener('resize', this.handleWindowResize);
    this.componentWillUnmount$.next();
    this.componentWillUnmount$.complete();
  }

  renderResults() {
    const _this$state2 = this.state,
          activeIndex = _this$state2.activeIndex,
          isBleeding = _this$state2.isBleeding,
          isLoading = _this$state2.isLoading,
          results = _this$state2.results,
          value = _this$state2.value;
    return _react.default.createElement(_SearchResults.default, {
      activeIndex: activeIndex,
      isBleeding: isBleeding,
      isLoading: isLoading,
      items: results,
      query: value,
      renderItem: this.renderItem,
      ref: this.setResultsInstance
    });
  }

  render() {
    const _this$state3 = this.state,
          isBleeding = _this$state3.isBleeding,
          isFocused = _this$state3.isFocused,
          isLoading = _this$state3.isLoading,
          value = _this$state3.value;
    const isOpen = isFocused && value.length > 0;
    return _react.default.createElement(_SearchField.default, {
      isBleeding: isBleeding,
      isFocused: isFocused,
      isLoading: isLoading,
      isOpen: isOpen,
      onBlur: this.handleBlur,
      onChange: this.handleInputChange,
      onClear: this.handleClear,
      onFocus: this.handleFocus,
      onKeyDown: this.handleKeyDown,
      onMouseDown: this.handleMouseDown,
      ref: this.setFieldInstance,
      results: this.renderResults(),
      value: value
    });
  }

}

_defineProperty(SearchContainer, "propTypes", {
  onOpen: _propTypes.default.func.isRequired,
  onClose: _propTypes.default.func.isRequired,
  shouldBeFocused: _propTypes.default.bool.isRequired
});

var _default = SearchContainer;
exports.default = _default;