"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _hamburgerIcon = _interopRequireDefault(require("part:@sanity/base/hamburger-icon"));

var _sanityStudioLogo = _interopRequireDefault(require("part:@sanity/base/sanity-studio-logo"));

var _resolver = _interopRequireDefault(require("part:@sanity/data-aspects/resolver"));

var _appLoadingScreen = _interopRequireDefault(require("part:@sanity/base/app-loading-screen"));

var _router = require("part:@sanity/base/router");

var _absolutes = _interopRequireDefault(require("all:part:@sanity/base/absolutes"));

var _toolSwitcher = _interopRequireDefault(require("part:@sanity/default-layout/tool-switcher"));

var _spaces = require("../util/spaces");

var _documentActionUtils = require("part:@sanity/base/util/document-action-utils");

var _DefaultLayout = _interopRequireDefault(require("./styles/DefaultLayout.css"));

var _RenderTool = _interopRequireDefault(require("./RenderTool"));

var _Navigation = _interopRequireDefault(require("./Navigation"));

var _ActionModal = _interopRequireDefault(require("./ActionModal"));

var _Branding = _interopRequireDefault(require("./Branding"));

var _SchemaErrorReporter = require("./SchemaErrorReporter");

var _SpaceSwitcher = _interopRequireDefault(require("./SpaceSwitcher"));

var _UpdateNotifier = _interopRequireDefault(require("./UpdateNotifier"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const dataAspects = new _resolver.default(_schema.default);

var _default = (0, _router.withRouterHOC)((_temp = _class = class DefaultLayout extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      createMenuIsOpen: false,
      mobileMenuIsOpen: false,
      showLoadingScreen: true,
      loaded: false
    });

    _defineProperty(this, "handleAnimationEnd", event => {
      this.setState({
        showLoadingScreen: false
      });
    });

    _defineProperty(this, "handleCreateButtonClick", () => {
      this.setState(prevState => ({
        createMenuIsOpen: !prevState.createMenuIsOpen
      }));
    });

    _defineProperty(this, "handleActionModalClose", () => {
      this.setState({
        createMenuIsOpen: false
      });
    });

    _defineProperty(this, "handleMobileMenuToggle", () => {
      this.setState(prevState => ({
        mobileMenuIsOpen: !prevState.mobileMenuIsOpen
      }));
    });

    _defineProperty(this, "handleSwitchTool", () => {
      this.setState({
        mobileMenuIsOpen: false
      });
    });

    _defineProperty(this, "setLoadingScreenElement", element => {
      this._loadingScreenElement = element;
    });

    _defineProperty(this, "renderContent", () => {
      const _this$props = this.props,
            tools = _this$props.tools,
            router = _this$props.router;
      const _this$state = this.state,
            createMenuIsOpen = _this$state.createMenuIsOpen,
            mobileMenuIsOpen = _this$state.mobileMenuIsOpen;
      const TYPE_ITEMS = dataAspects.getInferredTypes().filter(typeName => (0, _documentActionUtils.isActionEnabled)(_schema.default.get(typeName), 'create')).map(typeName => ({
        key: typeName,
        name: typeName,
        title: dataAspects.getDisplayName(typeName),
        icon: dataAspects.getIcon(typeName)
      }));
      const modalActions = TYPE_ITEMS.map(item => ({
        title: item.title,
        icon: item.icon,
        params: {
          type: item.name
        }
      }));
      return _react.default.createElement("div", {
        className: `${_DefaultLayout.default.defaultLayout} ${mobileMenuIsOpen ? _DefaultLayout.default.mobileMenuIsOpen : ''}`
      }, this.state.showLoadingScreen && _react.default.createElement("div", {
        className: this.state.loaded || document.visibilityState == 'hidden' ? _DefaultLayout.default.loadingScreenLoaded : _DefaultLayout.default.loadingScreen,
        ref: this.setLoadingScreenElement
      }, _react.default.createElement(_appLoadingScreen.default, {
        text: "Restoring Sanity"
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.secondaryNavigation
      }, _react.default.createElement("div", {
        className: _DefaultLayout.default.branding
      }, _react.default.createElement(_Branding.default, null)), _spaces.HAS_SPACES && _react.default.createElement("div", {
        className: _DefaultLayout.default.spaceSwitcher
      }, _react.default.createElement(_SpaceSwitcher.default, null)), _react.default.createElement("a", {
        className: _DefaultLayout.default.createButton,
        onClick: this.handleCreateButtonClick
      }, _react.default.createElement("span", {
        className: _DefaultLayout.default.createButtonIcon
      }, _react.default.createElement(_plusIcon.default, null)), _react.default.createElement("span", {
        className: _DefaultLayout.default.createButtonText
      }, "New"), _react.default.createElement(_reactInk.default, {
        duration: 200,
        opacity: 0.1,
        radius: 200
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.mobileCreateButton
      }, _react.default.createElement(_default2.default, {
        kind: "simple",
        onClick: this.handleCreateButtonClick,
        title: "Create new item",
        icon: _plusIcon.default
      }, "New")), _react.default.createElement("div", {
        className: _DefaultLayout.default.mobileMenuButton
      }, _react.default.createElement(_default2.default, {
        kind: "simple",
        onClick: this.handleMobileMenuToggle,
        title: "Menu",
        icon: _hamburgerIcon.default
      })), _react.default.createElement(_toolSwitcher.default, {
        tools: this.props.tools,
        activeToolName: router.state.tool,
        onSwitchTool: this.handleSwitchTool,
        className: _DefaultLayout.default.toolSwitcher
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.mainArea
      }, _react.default.createElement("div", {
        className: _DefaultLayout.default.navigation
      }, _react.default.createElement(_Navigation.default, {
        tools: tools
      })), _react.default.createElement("div", {
        className: _DefaultLayout.default.toolContainer
      }, _react.default.createElement(_router.RouteScope, {
        scope: router.state.tool
      }, _react.default.createElement(_RenderTool.default, {
        tool: router.state.tool
      })))), createMenuIsOpen && _react.default.createElement(_ActionModal.default, {
        onClose: this.handleActionModalClose,
        actions: modalActions
      }), _react.default.createElement(_UpdateNotifier.default, null), _react.default.createElement("a", {
        className: _DefaultLayout.default.sanityStudioLogoContainer,
        href: "http://sanity.io"
      }, _react.default.createElement(_sanityStudioLogo.default, null)), _absolutes.default.map((Abs, i) => _react.default.createElement(Abs, {
        key: i
      })));
    });
  }

  componentDidMount() {
    if (this._loadingScreenElement && this.state.showLoadingScreen) {
      this._loadingScreenElement.addEventListener('animationend', this.handleAnimationEnd, false);
    }
  }

  componentWillUnmount() {
    if (this._loadingScreenElement) {
      this._loadingScreenElement.removeEventListener('animationend', this.handleAnimationEnd, false);
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.state.loaded) {
      this.setState({
        loaded: true
      });
    }
  }

  render() {
    return _react.default.createElement(_SchemaErrorReporter.SchemaErrorReporter, null, this.renderContent);
  }

}, _defineProperty(_class, "propTypes", {
  router: _propTypes.default.shape({
    state: _propTypes.default.shape({
      tool: _propTypes.default.string
    }),
    navigate: _propTypes.default.func
  }).isRequired,
  tools: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string
  })).isRequired
}), _temp));

exports.default = _default;