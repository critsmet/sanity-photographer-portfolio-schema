"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var React = require("react");
var ReactDOM = require("react-dom");
var ContainerQueryCore_1 = require("./ContainerQueryCore");
/**
 * <ContainerQuery query={query}>
 *   {(params) => {
 *     <div className={classname(params.class)}></div>
 *   }}
 * </ContainerQuery>
 */
var ContainerQuery = (function (_super) {
    __extends(ContainerQuery, _super);
    function ContainerQuery(props) {
        var _this = _super.call(this, props) || this;
        _this.cqCore = null;
        _this.state = {
            params: {}
        };
        return _this;
    }
    ContainerQuery.prototype.componentDidMount = function () {
        var _this = this;
        this.cqCore = new ContainerQueryCore_1.default(this.props.query, function (params) {
            _this.setState({ params: params });
        });
        this.cqCore.observe(ReactDOM.findDOMNode(this));
    };
    ContainerQuery.prototype.componentDidUpdate = function () {
        this.cqCore.observe(ReactDOM.findDOMNode(this));
    };
    ContainerQuery.prototype.componentWillUnmount = function () {
        this.cqCore.disconnect();
        this.cqCore = null;
    };
    ContainerQuery.prototype.render = function () {
        return this.props.children(this.state.params);
    };
    return ContainerQuery;
}(React.Component));
exports.ContainerQuery = ContainerQuery;
/**
 * applyContainerQuery(BoxComponent, query);
 */
function applyContainerQuery(Component, query) {
    var ContainerQuery = (function (_super) {
        __extends(ContainerQuery, _super);
        function ContainerQuery(props) {
            var _this = _super.call(this, props) || this;
            _this.cqCore = null;
            _this.state = {
                params: {}
            };
            return _this;
        }
        ContainerQuery.prototype.componentDidMount = function () {
            var _this = this;
            this.cqCore = new ContainerQueryCore_1.default(query, function (params) {
                _this.setState({ params: params });
            });
            this.cqCore.observe(ReactDOM.findDOMNode(this));
        };
        ContainerQuery.prototype.componentDidUpdate = function () {
            this.cqCore.observe(ReactDOM.findDOMNode(this));
        };
        ContainerQuery.prototype.componentWillUnmount = function () {
            this.cqCore.disconnect();
            this.cqCore = null;
        };
        ContainerQuery.prototype.render = function () {
            return React.createElement(Component, __assign({}, this.props, { containerQuery: this.state.params }));
        };
        return ContainerQuery;
    }(React.Component));
    ContainerQuery.displayName = Component.displayName
        ? "ContainerQuery(" + Component.displayName + ")"
        : 'ContainerQuery';
    ;
    return ContainerQuery;
}
exports.applyContainerQuery = applyContainerQuery;
//# sourceMappingURL=index.js.map