'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _warn = require('../utils/warn');

var _warn2 = _interopRequireDefault(_warn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transforms.
 *
 * @type {Object}
 */

var Transforms = {};

/**
 * Set `properties` on the selection.
 *
 * @param {Transform} transform
 * @param {Object} properties
 */

Transforms.select = function (transform, properties) {
  transform.setSelectionOperation(properties);
};

/**
 * Selects the whole selection.
 *
 * @param {Transform} transform
 * @param {Object} properties
 */

Transforms.selectAll = function (transform) {
  var state = transform.state;
  var document = state.document,
      selection = state.selection;

  var next = selection.moveToRangeOf(document);
  transform.setSelectionOperation(next);
};

/**
 * Snapshot the current selection.
 *
 * @param {Transform} transform
 */

Transforms.snapshotSelection = function (transform) {
  var state = transform.state;
  var selection = state.selection;

  transform.setSelectionOperation(selection, { snapshot: true });
};

/**
 * Set `properties` on the selection.
 *
 * @param {Mixed} ...args
 * @param {Transform} transform
 */

Transforms.moveTo = function (transform, properties) {
  (0, _warn2.default)('The `moveTo()` transform is deprecated, please use `select()` instead.');
  transform.select(properties);
};

/**
 * Unset the selection's marks.
 *
 * @param {Transform} transform
 */

Transforms.unsetMarks = function (transform) {
  (0, _warn2.default)('The `unsetMarks()` transform is deprecated.');
  transform.setSelectionOperation({ marks: null });
};

/**
 * Unset the selection, removing an association to a node.
 *
 * @param {Transform} transform
 */

Transforms.unsetSelection = function (transform) {
  (0, _warn2.default)('The `unsetSelection()` transform is deprecated, please use `deselect()` instead.');
  transform.setSelectionOperation({
    anchorKey: null,
    anchorOffset: 0,
    focusKey: null,
    focusOffset: 0,
    isFocused: false,
    isBackward: false
  });
};

/**
 * Mix in selection transforms that are just a proxy for the selection method.
 */

var PROXY_TRANSFORMS = ['blur', 'collapseTo', 'collapseToAnchor', 'collapseToEnd', 'collapseToEndOf', 'collapseToFocus', 'collapseToStart', 'collapseToStartOf', 'extend', 'extendTo', 'extendToEndOf', 'extendToStartOf', 'flip', 'focus', 'move', 'moveAnchor', 'moveAnchorOffsetTo', 'moveAnchorTo', 'moveAnchorToEndOf', 'moveAnchorToStartOf', 'moveEnd', 'moveEndOffsetTo', 'moveEndTo', 'moveFocus', 'moveFocusOffsetTo', 'moveFocusTo', 'moveFocusToEndOf', 'moveFocusToStartOf', 'moveOffsetsTo', 'moveStart', 'moveStartOffsetTo', 'moveStartTo',
// 'moveTo', Commented out for now, since it conflicts with a deprecated one.
'moveToEnd', 'moveToEndOf', 'moveToRangeOf', 'moveToStart', 'moveToStartOf', 'deselect'];

PROXY_TRANSFORMS.forEach(function (method) {
  Transforms[method] = function (transform) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var normalize = method != 'deselect';
    var state = transform.state;
    var document = state.document,
        selection = state.selection;

    var next = selection[method].apply(selection, args);
    if (normalize) next = next.normalize(document);
    transform.setSelectionOperation(next);
  };
});

/**
 * Mix in node-related transforms.
 */

var PREFIXES = ['moveTo', 'collapseTo', 'extendTo'];

var DIRECTIONS = ['Next', 'Previous'];

var KINDS = ['Block', 'Inline', 'Text'];

PREFIXES.forEach(function (prefix) {
  var edges = ['Start', 'End'];

  if (prefix == 'moveTo') {
    edges.push('Range');
  }

  edges.forEach(function (edge) {
    DIRECTIONS.forEach(function (direction) {
      KINDS.forEach(function (kind) {
        var get = 'get' + direction + kind;
        var getAtRange = 'get' + kind + 'sAtRange';
        var index = direction == 'Next' ? 'last' : 'first';
        var method = '' + prefix + edge + 'Of';
        var name = '' + method + direction + kind;

        Transforms[name] = function (transform) {
          var state = transform.state;
          var document = state.document,
              selection = state.selection;

          var nodes = document[getAtRange](selection);
          var node = nodes[index]();
          var target = document[get](node.key);
          if (!target) return;
          var next = selection[method](target);
          transform.setSelectionOperation(next);
        };
      });
    });
  });
});

/**
 * Mix in deprecated transforms with a warning.
 */

var DEPRECATED_TRANSFORMS = [['extendBackward', 'extend', 'The `extendBackward(n)` transform is deprecated, please use `extend(n)` instead with a negative offset.'], ['extendForward', 'extend', 'The `extendForward(n)` transform is deprecated, please use `extend(n)` instead.'], ['moveBackward', 'move', 'The `moveBackward(n)` transform is deprecated, please use `move(n)` instead with a negative offset.'], ['moveForward', 'move', 'The `moveForward(n)` transform is deprecated, please use `move(n)` instead.'], ['moveStartOffset', 'moveStart', 'The `moveStartOffset(n)` transform is deprecated, please use `moveStart(n)` instead.'], ['moveEndOffset', 'moveEnd', 'The `moveEndOffset(n)` transform is deprecated, please use `moveEnd()` instead.'], ['moveToOffsets', 'moveOffsetsTo', 'The `moveToOffsets()` transform is deprecated, please use `moveOffsetsTo()` instead.'], ['flipSelection', 'flip', 'The `flipSelection()` transform is deprecated, please use `flip()` instead.']];

DEPRECATED_TRANSFORMS.forEach(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 3),
      old = _ref2[0],
      current = _ref2[1],
      warning = _ref2[2];

  Transforms[old] = function (transform) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    (0, _warn2.default)(warning);
    var state = transform.state;
    var document = state.document,
        selection = state.selection;

    var sel = selection[current].apply(selection, args).normalize(document);
    transform.setSelectionOperation(sel);
  };
});

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = Transforms;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1zL29uLXNlbGVjdGlvbi5qcyJdLCJuYW1lcyI6WyJUcmFuc2Zvcm1zIiwic2VsZWN0IiwidHJhbnNmb3JtIiwicHJvcGVydGllcyIsInNldFNlbGVjdGlvbk9wZXJhdGlvbiIsInNlbGVjdEFsbCIsInN0YXRlIiwiZG9jdW1lbnQiLCJzZWxlY3Rpb24iLCJuZXh0IiwibW92ZVRvUmFuZ2VPZiIsInNuYXBzaG90U2VsZWN0aW9uIiwic25hcHNob3QiLCJtb3ZlVG8iLCJ1bnNldE1hcmtzIiwibWFya3MiLCJ1bnNldFNlbGVjdGlvbiIsImFuY2hvcktleSIsImFuY2hvck9mZnNldCIsImZvY3VzS2V5IiwiZm9jdXNPZmZzZXQiLCJpc0ZvY3VzZWQiLCJpc0JhY2t3YXJkIiwiUFJPWFlfVFJBTlNGT1JNUyIsImZvckVhY2giLCJtZXRob2QiLCJhcmdzIiwibm9ybWFsaXplIiwiUFJFRklYRVMiLCJESVJFQ1RJT05TIiwiS0lORFMiLCJwcmVmaXgiLCJlZGdlcyIsInB1c2giLCJlZGdlIiwiZGlyZWN0aW9uIiwia2luZCIsImdldCIsImdldEF0UmFuZ2UiLCJpbmRleCIsIm5hbWUiLCJub2RlcyIsIm5vZGUiLCJ0YXJnZXQiLCJrZXkiLCJERVBSRUNBVEVEX1RSQU5TRk9STVMiLCJvbGQiLCJjdXJyZW50Iiwid2FybmluZyIsInNlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7OztBQU1BLElBQU1BLGFBQWEsRUFBbkI7O0FBRUE7Ozs7Ozs7QUFPQUEsV0FBV0MsTUFBWCxHQUFvQixVQUFDQyxTQUFELEVBQVlDLFVBQVosRUFBMkI7QUFDN0NELFlBQVVFLHFCQUFWLENBQWdDRCxVQUFoQztBQUNELENBRkQ7O0FBSUE7Ozs7Ozs7QUFPQUgsV0FBV0ssU0FBWCxHQUF1QixVQUFDSCxTQUFELEVBQWU7QUFBQSxNQUM1QkksS0FENEIsR0FDbEJKLFNBRGtCLENBQzVCSSxLQUQ0QjtBQUFBLE1BRTVCQyxR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RCxLQUhRLENBR2hDQyxRQUhnQztBQUFBLFFBR3RCQyxTQUhzQixHQUdSRixLQUhRLENBR3RCRSxTQUhzQjs7QUFJeEMsUUFBTXlDLE1BQU16QyxVQUFVdUMsT0FBVixtQkFBc0JyQixJQUF0QixFQUE0QkMsU0FBNUIsQ0FBc0NwQixRQUF0QyxDQUFaO0FBQ0FMLGNBQVVFLHFCQUFWLENBQWdDNkMsR0FBaEM7QUFDRCxHQU5EO0FBT0QsQ0FSRDs7QUFVQTs7Ozs7O2tCQU1lakQsVSIsImZpbGUiOiJvbi1zZWxlY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB3YXJuIGZyb20gJy4uL3V0aWxzL3dhcm4nXG5cbi8qKlxuICogVHJhbnNmb3Jtcy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmNvbnN0IFRyYW5zZm9ybXMgPSB7fVxuXG4vKipcbiAqIFNldCBgcHJvcGVydGllc2Agb24gdGhlIHNlbGVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zZm9ybX0gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllc1xuICovXG5cblRyYW5zZm9ybXMuc2VsZWN0ID0gKHRyYW5zZm9ybSwgcHJvcGVydGllcykgPT4ge1xuICB0cmFuc2Zvcm0uc2V0U2VsZWN0aW9uT3BlcmF0aW9uKHByb3BlcnRpZXMpXG59XG5cbi8qKlxuICogU2VsZWN0cyB0aGUgd2hvbGUgc2VsZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNmb3JtfSB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzXG4gKi9cblxuVHJhbnNmb3Jtcy5zZWxlY3RBbGwgPSAodHJhbnNmb3JtKSA9PiB7XG4gIGNvbnN0IHsgc3RhdGUgfSA9IHRyYW5zZm9ybVxuICBjb25zdCB7IGRvY3VtZW50LCBzZWxlY3Rpb24gfSA9IHN0YXRlXG4gIGNvbnN0IG5leHQgPSBzZWxlY3Rpb24ubW92ZVRvUmFuZ2VPZihkb2N1bWVudClcbiAgdHJhbnNmb3JtLnNldFNlbGVjdGlvbk9wZXJhdGlvbihuZXh0KVxufVxuXG4vKipcbiAqIFNuYXBzaG90IHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1RyYW5zZm9ybX0gdHJhbnNmb3JtXG4gKi9cblxuVHJhbnNmb3Jtcy5zbmFwc2hvdFNlbGVjdGlvbiA9ICh0cmFuc2Zvcm0pID0+IHtcbiAgY29uc3QgeyBzdGF0ZSB9ID0gdHJhbnNmb3JtXG4gIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBzdGF0ZVxuICB0cmFuc2Zvcm0uc2V0U2VsZWN0aW9uT3BlcmF0aW9uKHNlbGVjdGlvbiwgeyBzbmFwc2hvdDogdHJ1ZSB9KVxufVxuXG4vKipcbiAqIFNldCBgcHJvcGVydGllc2Agb24gdGhlIHNlbGVjdGlvbi5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSAuLi5hcmdzXG4gKiBAcGFyYW0ge1RyYW5zZm9ybX0gdHJhbnNmb3JtXG4gKi9cblxuVHJhbnNmb3Jtcy5tb3ZlVG8gPSAodHJhbnNmb3JtLCBwcm9wZXJ0aWVzKSA9PiB7XG4gIHdhcm4oJ1RoZSBgbW92ZVRvKClgIHRyYW5zZm9ybSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGBzZWxlY3QoKWAgaW5zdGVhZC4nKVxuICB0cmFuc2Zvcm0uc2VsZWN0KHByb3BlcnRpZXMpXG59XG5cbi8qKlxuICogVW5zZXQgdGhlIHNlbGVjdGlvbidzIG1hcmtzLlxuICpcbiAqIEBwYXJhbSB7VHJhbnNmb3JtfSB0cmFuc2Zvcm1cbiAqL1xuXG5UcmFuc2Zvcm1zLnVuc2V0TWFya3MgPSAodHJhbnNmb3JtKSA9PiB7XG4gIHdhcm4oJ1RoZSBgdW5zZXRNYXJrcygpYCB0cmFuc2Zvcm0gaXMgZGVwcmVjYXRlZC4nKVxuICB0cmFuc2Zvcm0uc2V0U2VsZWN0aW9uT3BlcmF0aW9uKHsgbWFya3M6IG51bGwgfSlcbn1cblxuLyoqXG4gKiBVbnNldCB0aGUgc2VsZWN0aW9uLCByZW1vdmluZyBhbiBhc3NvY2lhdGlvbiB0byBhIG5vZGUuXG4gKlxuICogQHBhcmFtIHtUcmFuc2Zvcm19IHRyYW5zZm9ybVxuICovXG5cblRyYW5zZm9ybXMudW5zZXRTZWxlY3Rpb24gPSAodHJhbnNmb3JtKSA9PiB7XG4gIHdhcm4oJ1RoZSBgdW5zZXRTZWxlY3Rpb24oKWAgdHJhbnNmb3JtIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYGRlc2VsZWN0KClgIGluc3RlYWQuJylcbiAgdHJhbnNmb3JtLnNldFNlbGVjdGlvbk9wZXJhdGlvbih7XG4gICAgYW5jaG9yS2V5OiBudWxsLFxuICAgIGFuY2hvck9mZnNldDogMCxcbiAgICBmb2N1c0tleTogbnVsbCxcbiAgICBmb2N1c09mZnNldDogMCxcbiAgICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gIH0pXG59XG5cbi8qKlxuICogTWl4IGluIHNlbGVjdGlvbiB0cmFuc2Zvcm1zIHRoYXQgYXJlIGp1c3QgYSBwcm94eSBmb3IgdGhlIHNlbGVjdGlvbiBtZXRob2QuXG4gKi9cblxuY29uc3QgUFJPWFlfVFJBTlNGT1JNUyA9IFtcbiAgJ2JsdXInLFxuICAnY29sbGFwc2VUbycsXG4gICdjb2xsYXBzZVRvQW5jaG9yJyxcbiAgJ2NvbGxhcHNlVG9FbmQnLFxuICAnY29sbGFwc2VUb0VuZE9mJyxcbiAgJ2NvbGxhcHNlVG9Gb2N1cycsXG4gICdjb2xsYXBzZVRvU3RhcnQnLFxuICAnY29sbGFwc2VUb1N0YXJ0T2YnLFxuICAnZXh0ZW5kJyxcbiAgJ2V4dGVuZFRvJyxcbiAgJ2V4dGVuZFRvRW5kT2YnLFxuICAnZXh0ZW5kVG9TdGFydE9mJyxcbiAgJ2ZsaXAnLFxuICAnZm9jdXMnLFxuICAnbW92ZScsXG4gICdtb3ZlQW5jaG9yJyxcbiAgJ21vdmVBbmNob3JPZmZzZXRUbycsXG4gICdtb3ZlQW5jaG9yVG8nLFxuICAnbW92ZUFuY2hvclRvRW5kT2YnLFxuICAnbW92ZUFuY2hvclRvU3RhcnRPZicsXG4gICdtb3ZlRW5kJyxcbiAgJ21vdmVFbmRPZmZzZXRUbycsXG4gICdtb3ZlRW5kVG8nLFxuICAnbW92ZUZvY3VzJyxcbiAgJ21vdmVGb2N1c09mZnNldFRvJyxcbiAgJ21vdmVGb2N1c1RvJyxcbiAgJ21vdmVGb2N1c1RvRW5kT2YnLFxuICAnbW92ZUZvY3VzVG9TdGFydE9mJyxcbiAgJ21vdmVPZmZzZXRzVG8nLFxuICAnbW92ZVN0YXJ0JyxcbiAgJ21vdmVTdGFydE9mZnNldFRvJyxcbiAgJ21vdmVTdGFydFRvJyxcbiAgLy8gJ21vdmVUbycsIENvbW1lbnRlZCBvdXQgZm9yIG5vdywgc2luY2UgaXQgY29uZmxpY3RzIHdpdGggYSBkZXByZWNhdGVkIG9uZS5cbiAgJ21vdmVUb0VuZCcsXG4gICdtb3ZlVG9FbmRPZicsXG4gICdtb3ZlVG9SYW5nZU9mJyxcbiAgJ21vdmVUb1N0YXJ0JyxcbiAgJ21vdmVUb1N0YXJ0T2YnLFxuICAnZGVzZWxlY3QnLFxuXVxuXG5QUk9YWV9UUkFOU0ZPUk1TLmZvckVhY2goKG1ldGhvZCkgPT4ge1xuICBUcmFuc2Zvcm1zW21ldGhvZF0gPSAodHJhbnNmb3JtLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qgbm9ybWFsaXplID0gbWV0aG9kICE9ICdkZXNlbGVjdCdcbiAgICBjb25zdCB7IHN0YXRlIH0gPSB0cmFuc2Zvcm1cbiAgICBjb25zdCB7IGRvY3VtZW50LCBzZWxlY3Rpb24gfSA9IHN0YXRlXG4gICAgbGV0IG5leHQgPSBzZWxlY3Rpb25bbWV0aG9kXSguLi5hcmdzKVxuICAgIGlmIChub3JtYWxpemUpIG5leHQgPSBuZXh0Lm5vcm1hbGl6ZShkb2N1bWVudClcbiAgICB0cmFuc2Zvcm0uc2V0U2VsZWN0aW9uT3BlcmF0aW9uKG5leHQpXG4gIH1cbn0pXG5cbi8qKlxuICogTWl4IGluIG5vZGUtcmVsYXRlZCB0cmFuc2Zvcm1zLlxuICovXG5cbmNvbnN0IFBSRUZJWEVTID0gW1xuICAnbW92ZVRvJyxcbiAgJ2NvbGxhcHNlVG8nLFxuICAnZXh0ZW5kVG8nLFxuXVxuXG5jb25zdCBESVJFQ1RJT05TID0gW1xuICAnTmV4dCcsXG4gICdQcmV2aW91cycsXG5dXG5cbmNvbnN0IEtJTkRTID0gW1xuICAnQmxvY2snLFxuICAnSW5saW5lJyxcbiAgJ1RleHQnLFxuXVxuXG5QUkVGSVhFUy5mb3JFYWNoKChwcmVmaXgpID0+IHtcbiAgY29uc3QgZWRnZXMgPSBbXG4gICAgJ1N0YXJ0JyxcbiAgICAnRW5kJyxcbiAgXVxuXG4gIGlmIChwcmVmaXggPT0gJ21vdmVUbycpIHtcbiAgICBlZGdlcy5wdXNoKCdSYW5nZScpXG4gIH1cblxuICBlZGdlcy5mb3JFYWNoKChlZGdlKSA9PiB7XG4gICAgRElSRUNUSU9OUy5mb3JFYWNoKChkaXJlY3Rpb24pID0+IHtcbiAgICAgIEtJTkRTLmZvckVhY2goKGtpbmQpID0+IHtcbiAgICAgICAgY29uc3QgZ2V0ID0gYGdldCR7ZGlyZWN0aW9ufSR7a2luZH1gXG4gICAgICAgIGNvbnN0IGdldEF0UmFuZ2UgPSBgZ2V0JHtraW5kfXNBdFJhbmdlYFxuICAgICAgICBjb25zdCBpbmRleCA9IGRpcmVjdGlvbiA9PSAnTmV4dCcgPyAnbGFzdCcgOiAnZmlyc3QnXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGAke3ByZWZpeH0ke2VkZ2V9T2ZgXG4gICAgICAgIGNvbnN0IG5hbWUgPSBgJHttZXRob2R9JHtkaXJlY3Rpb259JHtraW5kfWBcblxuICAgICAgICBUcmFuc2Zvcm1zW25hbWVdID0gKHRyYW5zZm9ybSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRyYW5zZm9ybVxuICAgICAgICAgIGNvbnN0IHsgZG9jdW1lbnQsIHNlbGVjdGlvbiB9ID0gc3RhdGVcbiAgICAgICAgICBjb25zdCBub2RlcyA9IGRvY3VtZW50W2dldEF0UmFuZ2VdKHNlbGVjdGlvbilcbiAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaW5kZXhdKClcbiAgICAgICAgICBjb25zdCB0YXJnZXQgPSBkb2N1bWVudFtnZXRdKG5vZGUua2V5KVxuICAgICAgICAgIGlmICghdGFyZ2V0KSByZXR1cm5cbiAgICAgICAgICBjb25zdCBuZXh0ID0gc2VsZWN0aW9uW21ldGhvZF0odGFyZ2V0KVxuICAgICAgICAgIHRyYW5zZm9ybS5zZXRTZWxlY3Rpb25PcGVyYXRpb24obmV4dClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcblxuLyoqXG4gKiBNaXggaW4gZGVwcmVjYXRlZCB0cmFuc2Zvcm1zIHdpdGggYSB3YXJuaW5nLlxuICovXG5cbmNvbnN0IERFUFJFQ0FURURfVFJBTlNGT1JNUyA9IFtcbiAgWydleHRlbmRCYWNrd2FyZCcsICdleHRlbmQnLCAnVGhlIGBleHRlbmRCYWNrd2FyZChuKWAgdHJhbnNmb3JtIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYGV4dGVuZChuKWAgaW5zdGVhZCB3aXRoIGEgbmVnYXRpdmUgb2Zmc2V0LiddLFxuICBbJ2V4dGVuZEZvcndhcmQnLCAnZXh0ZW5kJywgJ1RoZSBgZXh0ZW5kRm9yd2FyZChuKWAgdHJhbnNmb3JtIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYGV4dGVuZChuKWAgaW5zdGVhZC4nXSxcbiAgWydtb3ZlQmFja3dhcmQnLCAnbW92ZScsICdUaGUgYG1vdmVCYWNrd2FyZChuKWAgdHJhbnNmb3JtIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYG1vdmUobilgIGluc3RlYWQgd2l0aCBhIG5lZ2F0aXZlIG9mZnNldC4nXSxcbiAgWydtb3ZlRm9yd2FyZCcsICdtb3ZlJywgJ1RoZSBgbW92ZUZvcndhcmQobilgIHRyYW5zZm9ybSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGBtb3ZlKG4pYCBpbnN0ZWFkLiddLFxuICBbJ21vdmVTdGFydE9mZnNldCcsICdtb3ZlU3RhcnQnLCAnVGhlIGBtb3ZlU3RhcnRPZmZzZXQobilgIHRyYW5zZm9ybSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGBtb3ZlU3RhcnQobilgIGluc3RlYWQuJ10sXG4gIFsnbW92ZUVuZE9mZnNldCcsICdtb3ZlRW5kJywgJ1RoZSBgbW92ZUVuZE9mZnNldChuKWAgdHJhbnNmb3JtIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgYG1vdmVFbmQoKWAgaW5zdGVhZC4nXSxcbiAgWydtb3ZlVG9PZmZzZXRzJywgJ21vdmVPZmZzZXRzVG8nLCAnVGhlIGBtb3ZlVG9PZmZzZXRzKClgIHRyYW5zZm9ybSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGBtb3ZlT2Zmc2V0c1RvKClgIGluc3RlYWQuJ10sXG4gIFsnZmxpcFNlbGVjdGlvbicsICdmbGlwJywgJ1RoZSBgZmxpcFNlbGVjdGlvbigpYCB0cmFuc2Zvcm0gaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBgZmxpcCgpYCBpbnN0ZWFkLiddLFxuXVxuXG5ERVBSRUNBVEVEX1RSQU5TRk9STVMuZm9yRWFjaCgoWyBvbGQsIGN1cnJlbnQsIHdhcm5pbmcgXSkgPT4ge1xuICBUcmFuc2Zvcm1zW29sZF0gPSAodHJhbnNmb3JtLCAuLi5hcmdzKSA9PiB7XG4gICAgd2Fybih3YXJuaW5nKVxuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRyYW5zZm9ybVxuICAgIGNvbnN0IHsgZG9jdW1lbnQsIHNlbGVjdGlvbiB9ID0gc3RhdGVcbiAgICBjb25zdCBzZWwgPSBzZWxlY3Rpb25bY3VycmVudF0oLi4uYXJncykubm9ybWFsaXplKGRvY3VtZW50KVxuICAgIHRyYW5zZm9ybS5zZXRTZWxlY3Rpb25PcGVyYXRpb24oc2VsKVxuICB9XG59KVxuXG4vKipcbiAqIEV4cG9ydC5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IFRyYW5zZm9ybXNcbiJdfQ==