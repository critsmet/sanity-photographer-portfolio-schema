'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _block = require('../models/block');

var _block2 = _interopRequireDefault(_block);

var _change = require('../models/change');

var _change2 = _interopRequireDefault(_change);

var _character = require('../models/character');

var _character2 = _interopRequireDefault(_character);

var _data = require('../models/data');

var _data2 = _interopRequireDefault(_data);

var _document = require('../models/document');

var _document2 = _interopRequireDefault(_document);

var _history = require('../models/history');

var _history2 = _interopRequireDefault(_history);

var _inline = require('../models/inline');

var _inline2 = _interopRequireDefault(_inline);

var _mark = require('../models/mark');

var _mark2 = _interopRequireDefault(_mark);

var _node = require('../models/node');

var _node2 = _interopRequireDefault(_node);

var _range = require('../models/range');

var _range2 = _interopRequireDefault(_range);

var _schema = require('../models/schema');

var _schema2 = _interopRequireDefault(_schema);

var _selection = require('../models/selection');

var _selection2 = _interopRequireDefault(_selection);

var _stack = require('../models/stack');

var _stack2 = _interopRequireDefault(_stack);

var _state = require('../models/state');

var _state2 = _interopRequireDefault(_state);

var _text = require('../models/text');

var _text2 = _interopRequireDefault(_text);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a prop type checker for Slate objects with `name` and `validate`.
 *
 * @param {String} name
 * @param {Function} validate
 * @return {Function}
 */

function create(name, validate) {
  function check(isRequired, props, propName, componentName, location) {
    var value = props[propName];
    if (value == null && !isRequired) return null;
    if (value == null && isRequired) return new Error('The ' + location + ' `' + propName + '` is marked as required in `' + componentName + '`, but it was not supplied.');
    if (validate(value)) return null;
    return new Error('Invalid ' + location + ' `' + propName + '` supplied to `' + componentName + '`, expected a Slate `' + name + '` but received: ' + value);
  }

  function propType() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return check.apply(undefined, [false].concat(args));
  }

  propType.isRequired = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return check.apply(undefined, [true].concat(args));
  };

  return propType;
}

/**
 * Prop type checkers.
 *
 * @type {Object}
 */

var Types = {
  block: create('Block', function (v) {
    return _block2.default.isBlock(v);
  }),
  blocks: create('List<Block>', function (v) {
    return _block2.default.isBlockList(v);
  }),
  change: create('Change', function (v) {
    return _change2.default.isChange(v);
  }),
  character: create('Character', function (v) {
    return _character2.default.isCharacter(v);
  }),
  characters: create('List<Character>', function (v) {
    return _character2.default.isCharacterList(v);
  }),
  data: create('Data', function (v) {
    return _data2.default.isData(v);
  }),
  document: create('Document', function (v) {
    return _document2.default.isDocument(v);
  }),
  history: create('History', function (v) {
    return _history2.default.isHistory(v);
  }),
  inline: create('Inline', function (v) {
    return _inline2.default.isInline(v);
  }),
  mark: create('Mark', function (v) {
    return _mark2.default.isMark(v);
  }),
  marks: create('Set<Mark>', function (v) {
    return _mark2.default.isMarkSet(v);
  }),
  node: create('Node', function (v) {
    return _node2.default.isNode(v);
  }),
  nodes: create('List<Node>', function (v) {
    return _node2.default.isNodeList(v);
  }),
  range: create('Range', function (v) {
    return _range2.default.isRange(v);
  }),
  ranges: create('List<Range>', function (v) {
    return _range2.default.isRangeList(v);
  }),
  schema: create('Schema', function (v) {
    return _schema2.default.isSchema(v);
  }),
  selection: create('Selection', function (v) {
    return _selection2.default.isSelection(v);
  }),
  stack: create('Stack', function (v) {
    return _stack2.default.isStack(v);
  }),
  state: create('State', function (v) {
    return _state2.default.isState(v);
  }),
  text: create('Text', function (v) {
    return _text2.default.isText(v);
  }),
  texts: create('List<Text>', function (v) {
    return _text2.default.isTextList(v);
  })
};

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = Types;