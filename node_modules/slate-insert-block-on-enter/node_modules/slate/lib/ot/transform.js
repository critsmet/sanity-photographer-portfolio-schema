'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _difference = require('lodash/difference');

var _difference2 = _interopRequireDefault(_difference);

var _invert = require('../operations/invert');

var _invert2 = _interopRequireDefault(_invert);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Debug.
 *
 * @type {Debug}
 */

var debug = (0, _debug2.default)('slate:ot:transform');

/**
 * Transform operations `a` by operations `b` with `priority`.
 *
 * @param {Array} a
 * @param {Array} b
 * @param {String} priority
 */

function transform(a, b, priority) {
  // Deeply clone A so that the transformers can edit in place without worry.
  a = (0, _cloneDeep2.default)(a);

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var bo = _step.value;

      // Create a temporary array to store the new A operations, because sometimes
      // the transformers need to return `null` to remove an operation, or return
      // an array to add operations.
      var tmp = [];

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = a[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var ao = _step2.value;

          debug('a', _extends({}, ao));
          debug('b', _extends({}, bo));

          var ret = t(ao, bo, priority);

          if (ret === null) {
            debug('a\'', _extends({}, ao));
            continue;
          } else if (Array.isArray(ret)) {
            debug('a\'', [].concat(_toConsumableArray(ret)));
            tmp = tmp.concat(ret);
          } else {
            debug('a\'', _extends({}, ret));
            tmp.push(ao);
          }
        }

        // Update A for the next iteration.
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      a = tmp;
    }

    // Return the transformed A operations.
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return a;
}

/**
 * Find the place where path `a` is intersected by path `b`, if it does.
 *
 * @param {Array} a
 * @param {Array} b
 * @return {String|Null}
 */

function intersectPath(a, b) {
  if (a == null || b == null) return null;

  for (var i = 0; i < b.length; i++) {
    var bv = b[i];
    var av = a[i];
    var al = i + 1 === a.length;
    var bl = i + 1 === b.length;
    // If ever `bv > av`, `b` doesn't intersect `a`.
    if (bv > av) return 'none';
    // If we're not at the end of `b`, and `bv < av`, `b` doesn't intersect `a`.
    if (!bl && bv < av) return 'none';
    // If at the end of both, and `bv == av`, `b` is exactly equal to `a`.
    if (al && bl && bv == av) return 'exact';
    // If only at the end of `b`, and `bv == av`, `b` is above `a`.
    if (bl && bv == av) return 'above';
    // If at the end of `b`, and `bv < av`, `b` is before `a`.
    if (bl && bv < av) return 'before';
  }

  return 'none';
}

/**
 * Find the place where `a`'s offset `a` is intersected by operation B's
 * offset `b`, if it does at all.
 *
 * @param {Number} a
 * @param {Number} b
 * @return {String}
 */

function intersectOffset(a, b) {
  if (a == null || b == null || isNaN(a) || isNaN(b)) return null;
  if (b < a) return 'before';
  if (b == a) return 'exact';
  return 'after';
}

/**
 * Transform operation `a` in place based on operation `b` and priority `p`.
 *
 * @param {Object} a
 * @param {Object} b
 * @param {String} p
 */

function t(a, b, p) {
  var ai = a.path.length - 1;
  var bi = b.path.length - 1;
  var av = a.path[ai];
  var bv = b.path[bi];
  var ani = a.newPath ? a.newPath.length - 1 : null;
  var bni = b.newPath ? b.newPath.length - 1 : null;
  var bnv = b.newPath ? b.newPath[bni] : null;

  var ax = 'offset' in a ? a.offset : null;
  var ay = 'offset' in a && 'length' in a ? a.offset + a.length : null;
  var bx = 'offset' in b ? b.offset : null;
  var by = 'offset' in b && 'length' in b ? b.offset + b.length : null;

  var ap_bp = intersectPath(a.path, b.path);
  var ap_bnp = intersectPath(a.path, b.newPath);
  var anp_bp = intersectPath(a.newPath, b.path);
  var anp_bnp = intersectPath(a.newPath, b.newPath);

  // TODO: get rid of these I think, easy to calculate?
  var ao_bo = intersectOffset(a.offset, b.offset);
  var aol_bol = intersectOffset(a.offset + a.length, b.offset + b.length);

  // TODO: or get rid of these because they're very hard to remember
  var abi_bpo = intersectOffset(a.path[bi + 1], b.position);
  var ao_bpo = intersectOffset(a.offset, b.position);
  var apo_bo = intersectOffset(a.position, b.offset);
  var apo_bpo = intersectOffset(a.position, b.position);
  var aol_bpo = intersectOffset(a.offset + a.length, b.position);
  var aot_bpo = 'text' in a ? intersectOffset(a.offset + a.text.length, b.position) : null;

  /**
   * Insert node.
   */

  if (b.type == 'insert_node') {
    if (ap_bp == 'exact' && a.type == 'merge_node') {
      var newPath = a.path.slice(0, ai).concat([a.path[ai] + 1]);
      var move = { type: 'move_node', path: a.path.slice(), newPath: newPath };
      return [move, a];
    }

    if (ap_bp == 'before' || ap_bp == 'above' || ap_bp == 'exact' && a.type != 'insert_node' || ap_bp == 'exact' && a.type == 'insert_node' && p == 'right') {
      a.path[bi]++;
    }

    if (anp_bp == 'before' || anp_bp == 'above' || anp_bp == 'exact' && p == 'right') {
      a.newPath[bi]++;
    }
  }

  /**
   * Remove node.
   */

  if (b.type == 'remove_node') {
    if (ap_bp == 'before' && a.type == 'merge_node' && av == bv + 1) {
      // TODO: remove `node:null`
      var remove = { type: 'remove_node', path: a.path.slice() };
      return [remove];
    }

    if (ap_bp == 'before') {
      a.path[bi]--;
    }

    if (anp_bp == 'before') {
      a.newPath[bi]--;
    }

    if (ap_bp == 'exact' && a.type == 'merge_node') {
      var path = a.path.slice(0, ai).concat([a.path[ai] - 1]);
      // TODO: remove `node:null`
      var _remove = { type: 'remove_node', path: path };
      return [_remove];
    }

    if (ap_bp == 'above' || ap_bp == 'exact' && a.type != 'insert_node') {
      return null;
    }
  }

  /**
   * Set node.
   */

  if (b.type == 'set_node') {
    if (a.type == 'set_node' && ap_bp == 'exact' && p == 'right') {
      var ak = Object.keys(a.properties);
      var bk = Object.keys(b.properties);
      var diff = (0, _difference2.default)(ak, bk);
      if (diff.length == 0) return null;
      a.properties = (0, _pick2.default)(a.properties, diff);
    }
  }

  /**
   * Move node.
   */

  if (b.type == 'move_node') {
    if (ap_bp == 'exact' && a.type == 'move_node' && p == 'right') {
      return null;
    }

    if (ap_bp == 'exact' && a.type == 'merge_node') {
      var inverse = (0, _invert2.default)(b);
      var _path = b.path.slice(0, bi).concat([b.path[bi] - 1]);
      var _newPath = b.newPath.slice();

      if (intersectPath(b.newPath, a.path) == 'before') {
        _newPath = b.newPath.slice(0, bni).concat(b.newPath[bni] - 1);
      }

      var _move = _extends({}, b, { path: _path, newPath: _newPath });
      return [inverse, a, _move];
    }

    if (ap_bp == 'before' && a.type == 'merge_node' && av == bv + 1) {
      var _inverse = (0, _invert2.default)(b);
      var _path2 = b.path.slice();
      var _newPath2 = b.newPath.slice();

      if (intersectPath(b.newPath, a.path) == 'before') {
        _newPath2 = b.newPath.slice(0, bni).concat(b.newPath[bni] - 1);
      }

      var _move2 = _extends({}, b, { path: _path2, newPath: _newPath2 });
      return [_inverse, a, _move2];
    }

    if (ap_bnp == 'exact' && ap_bp != 'before' && a.type == 'merge_node' || ap_bp == 'before' && a.type == 'merge_node' && ap_bnp == 'before' && av == bnv + 1) {
      var _inverse2 = (0, _invert2.default)(b);
      return [_inverse2, a, b];
    }

    if (ap_bnp == 'before' && ap_bp != 'before' && a.type == 'merge_node' && av == bv + 1) {
      var _inverse3 = (0, _invert2.default)(b);
      var _path3 = b.path.slice();
      var _newPath3 = b.newPath.slice(0, bni).concat(b.newPath[bni] - 1);
      var _move3 = _extends({}, b, { path: _path3, newPath: _newPath3 });
      return [_inverse3, a, _move3];
    }

    if (ap_bp == 'exact') {
      a.path = b.newPath.slice();
    }

    if (anp_bp == 'exact') {
      a.newPath = b.newPath.slice();
    }

    if (ap_bp == 'above') {
      a.path = b.newPath.concat(a.path.slice(b.newPath.length));
    }

    if (anp_bp == 'above') {
      a.newPath = b.newPath.concat(a.newPath.slice(b.newPath.length));
    }

    if (ap_bp == 'before' && ap_bnp != 'before') {
      a.path[bi]--;
    }

    if (ap_bp != 'exact' && anp_bp == 'before' && anp_bnp != 'before') {
      a.newPath[bi]--;
    }

    if (ap_bp == 'before' && ap_bnp == 'above' || ap_bp == 'none' && ap_bnp != 'none') {
      a.path[bni]++;
    }

    if (ap_bp != 'exact' && anp_bp == 'before' && anp_bnp == 'above' || ap_bp != 'exact' && anp_bp == 'none' && anp_bnp != 'none') {
      a.newPath[bni]++;
    }
  }

  /**
   * Merge node.
   */

  if (b.type == 'merge_node') {
    if (ap_bp == 'before') {
      a.path[bi]--;
    }

    if (ap_bp == 'before' && a.type == 'merge_node' && av == bv + 1) {
      a.position += b.position;
    }

    if (anp_bp == 'before') {
      a.newPath[bi]--;
    }

    if (ap_bp == 'above') {
      a.path[bi]--;
      a.path[bi + 1] += b.position;
    }

    if (anp_bp == 'above') {
      a.newPath[bi]--;
      a.newPath[bi + 1] += b.position;
    }

    if (ap_bp == 'exact' && a.type == 'merge_node') {
      return null;
    }

    if (ap_bp == 'exact') {
      a.path = a.path.slice(0, ai).concat([a.path[ai] - 1]);

      if (a.type == 'split_node') {
        a.position += b.position;
      }

      if (a.offset != null) {
        a.offset += b.position;
      }
    }
  }

  /**
   * Split node.
   */

  if (b.type == 'split_node') {
    if (ap_bp == 'above' && a.type == 'merge_node' && av == b.position) {
      var _path4 = a.path.slice(0, bi).concat([a.path[bi] + 1]).concat([0]);
      var _newPath4 = a.path.slice();
      var _move4 = { type: 'move_node', path: _path4, newPath: _newPath4 };
      return [_move4, a];
    }

    if (ap_bp == 'exact' && a.type == 'split_node' && apo_bpo == 'before') {
      a.path[bi]++;
      a.position -= b.position;
    }

    if (ap_bp == 'exact' && a.type == 'remove_node') {
      // TODO: remove `node:null`
      var _remove2 = _extends({}, a, { path: a.path.slice() });
      return [a, _remove2];
    }

    if (ap_bp == 'before') {
      a.path[bi]++;

      if (a.type == 'merge_node' && av == bv + 1) {
        a.position -= b.position;
      }
    }

    if (ap_bp != 'exact' && anp_bp == 'before') {
      a.newPath[bi]++;
    }

    if (ap_bp == 'above' && abi_bpo != 'after') {
      a.path[bi]++;
      a.path[bi + 1] -= b.position;
    }

    if (anp_bp == 'above' && abi_bpo != 'after') {
      a.newPath[bi]++;
      a.newPath[bi + 1] -= b.position;
    }

    if (ap_bp == 'exact' && a.type == 'move_node') {
      var _path5 = a.path.slice(0, ai).concat([a.path[ai] + 1]);
      var _newPath5 = a.newPath.slice();
      var _move5 = _extends({}, a, { path: _path5, newPath: _newPath5 });
      return [_move5, a];
    }

    if (ap_bp == 'exact' && a.offset != null && ao_bpo == 'before' && (aol_bpo == 'before' || aot_bpo == 'before')) {
      a.path[bi]++;
      a.offset -= b.position;
    }

    if (ap_bp == 'exact' && a.offset != null && ao_bpo == 'after' && (aol_bpo == 'before' || aot_bpo == 'before')) {
      var twoPath = a.path.slice(0, ai).concat([a.path[ai] + 1]);
      var one = _extends({}, a, { path: a.path.slice() });
      var two = _extends({}, a, { path: twoPath, offset: 0 });

      if (a.text == null) {
        one.length = b.position - a.offset;
        two.length = a.length - one.length;
      } else {
        one.text = a.text.slice(0, b.position - a.offset);
        two.text = a.text.slice(one.text.length);
      }

      return [one, two];
    }
  }

  /**
   * Insert text.
   */

  if (b.type == 'insert_text') {
    if (ap_bp == 'before' && a.type == 'merge_node' && av == bv + 1) {
      a.position += b.text.length;
    }

    if (ap_bp == 'exact' && a.type == 'split_node' && (apo_bo == 'before' || apo_bo == 'exact')) {
      a.position += b.text.length;
    }

    if (ap_bp != 'exact' || a.offset == null) {
      return;
    }

    if (ao_bo == 'after' && a.type == 'remove_text' && b.offset < a.offset + a.text.length) {
      var _one = _extends({}, a, { path: a.path.slice(), text: a.text.substring(0, b.offset - a.offset) });
      var _two = _extends({}, a, { path: a.path.slice(), offset: b.offset + b.text.length - _one.text.length, text: a.text.substring(_one.text.length) });
      return [_one, _two];
    }

    if (ao_bo == 'after' && a.length != null && b.offset < a.offset + a.length) {
      var _one2 = _extends({}, a, { path: a.path.slice(), length: b.offset - a.offset });
      var _two2 = _extends({}, a, { path: a.path.slice(), offset: b.offset + b.text.length, length: a.length - _one2.length });
      return [_one2, _two2];
    }

    if (ao_bo == 'before' || ao_bo == 'exact' && p == 'right' || ao_bo == 'exact' && a.type != 'insert_text') {
      a.offset += b.text.length;
    }
  }

  /**
   * Remove text.
   */

  if (b.type == 'remove_text') {
    if (ap_bp == 'before' && a.type == 'merge_node' && av == bv + 1) {
      a.position -= b.text.length;
    }

    if (ap_bp == 'exact' && a.type == 'split_node' && apo_bo == 'before') {
      var decrement = Math.min(a.position, b.text.length);
      a.position -= decrement;
    }

    if (ap_bp != 'exact' || a.offset == null) {
      return;
    }

    if (ao_bo == 'before' && a.type == 'insert_text') {
      var _remove3 = Math.min(a.offset - b.offset, b.text.length);
      a.offset -= _remove3;
    }

    if (ao_bo == 'before' && a.type == 'remove_text') {
      var _decrement = Math.min(b.text.length, a.offset - b.offset);
      var _remove4 = Math.min(a.text.length, b.text.length - _decrement);
      a.offset -= _decrement;
      a.text = a.text.substring(_remove4);
    }

    if (ao_bo == 'before' && a.length != null) {
      var _decrement2 = Math.min(b.text.length, a.offset - b.offset);
      var _remove5 = Math.min(a.length, b.text.length - _decrement2);
      a.offset -= _decrement2;
      a.length -= _remove5;
    }

    if (ao_bo == 'exact' && a.type == 'remove_text') {
      var _remove6 = Math.min(a.text.length, b.text.length);
      a.text = a.text.substring(_remove6);
    }

    if (ao_bo == 'exact' && a.length != null) {
      var _remove7 = Math.min(a.length, b.text.length);
      a.length -= _remove7;
    }

    if (ao_bo == 'after' && a.type == 'remove_text') {
      var _diff = b.offset - a.offset;
      var overlap = Math.max(0, Math.min(b.text.length, a.text.length - _diff));
      a.text = a.text.substring(0, _diff) + a.text.substring(_diff + overlap);
    }

    if (ao_bo == 'after' && a.length != null) {
      var _diff2 = b.offset - a.offset;
      var _overlap = Math.max(0, Math.min(b.text.length, a.length - _diff2));
      var _remove8 = Math.min(a.length, _overlap);
      a.length -= _remove8;
    }

    if (a.text === '' || a.length === 0) {
      return null;
    }
  }

  /**
   * Add mark.
   */

  if (b.type == 'add_mark') {
    if (a.type != 'remove_mark' || ap_bp != 'exact' || ao_bo == null || p == 'left' || !(0, _isEqual2.default)(a.mark, b.mark)) {
      return;
    }

    if (ao_bo == 'before' && a.offset < b.offset + b.length) {
      var skip = Math.min(b.length, a.offset - b.offset);
      var omit = Math.min(a.length, b.length - skip);
      a.offset += skip;
      a.length -= omit;
    }

    if (ao_bo == 'exact') {
      var _omit = Math.min(a.length, b.length);
      a.offset += _omit;
      a.length -= _omit;
    }

    if (ao_bo == 'after' && aol_bol == 'before') {
      var before = b.offset - a.offset;
      var after = a.length - before - b.length;
      var middle = a.length - before - after;
      var _one3 = _extends({}, a, { path: a.path.slice(), length: before });
      var _two3 = _extends({}, a, { path: a.path.slice(), offset: a.offset + before + middle, length: after });
      return [_one3, _two3];
    }

    if (ao_bo == 'after') {
      var _diff3 = b.offset - a.offset;
      var _overlap2 = Math.max(0, Math.min(b.length, a.length - _diff3));
      var _remove9 = Math.min(a.length, _overlap2);
      a.length -= _remove9;
    }

    if (a.length === 0) {
      return null;
    }
  }

  /**
   * Remove mark.
   */

  if (b.type == 'remove_mark') {
    if (ap_bp != 'exact' || ao_bo == null || a.type != 'add_mark' && a.type != 'set_mark' || a.type == 'add_mark' && p == 'left' || !(0, _isEqual2.default)(a.mark, b.mark)) {
      return;
    }

    if (ao_bo == 'before' && a.offset < b.offset + b.length) {
      var _skip = Math.min(b.length, a.offset - b.offset);
      var _omit2 = Math.min(a.length, b.length - _skip);
      a.offset += _skip;
      a.length -= _omit2;
    }

    if (ao_bo == 'exact') {
      var _omit3 = Math.min(a.length, b.length);
      a.offset += _omit3;
      a.length -= _omit3;
    }

    if (ao_bo == 'after' && aol_bol == 'before') {
      var _before = b.offset - a.offset;
      var _after = a.length - _before - b.length;
      var _middle = a.length - _before - _after;
      var _one4 = _extends({}, a, { path: a.path.slice(), length: _before });
      var _two4 = _extends({}, a, { path: a.path.slice(), offset: a.offset + _before + _middle, length: _after });
      return [_one4, _two4];
    }

    if (ao_bo == 'after') {
      var _diff4 = b.offset - a.offset;
      var _overlap3 = Math.max(0, Math.min(b.length, a.length - _diff4));
      var _remove10 = Math.min(a.length, _overlap3);
      a.length -= _remove10;
    }

    if (a.length === 0) {
      return null;
    }
  }

  /**
   * Set mark.
   */

  if (b.type == 'set_mark') {
    if (ap_bp != 'exact' || ao_bo == null || !(0, _isEqual2.default)(a.mark, b.mark)) {
      return;
    }

    if (a.type == 'set_mark' && p == 'left') {
      var overlaps = ay >= bx && by >= ax;
      if (!overlaps) return;

      var x = Math.max(ax, bx);
      var y = Math.min(ay, by);
      var offset = x;
      var length = y - x;
      if (length == 0) return;

      // TODO: can be replaced with `invert(B)`?
      var mark = _extends({}, (0, _cloneDeep2.default)(b.mark), (0, _cloneDeep2.default)(b.properties));
      var properties = (0, _pick2.default)(b.mark, Object.keys(b.properties));
      var _inverse4 = _extends({}, b, { path: b.path.slice(), offset: offset, length: length, mark: mark, properties: properties });
      return [_inverse4, a];
    }
  }
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = transform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,