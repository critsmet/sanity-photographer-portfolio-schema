'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _desc, _value, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _proptypes = require('proptypes');

var _proptypes2 = _interopRequireDefault(_proptypes);

var _lodash = require('lodash.identity');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.sortby');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.first');

var _lodash6 = _interopRequireDefault(_lodash5);

var _lodash7 = require('lodash.isnumber');

var _lodash8 = _interopRequireDefault(_lodash7);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = void 0;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var isBrowser = typeof window !== 'undefined';

var ElementQuery = (_class = (_temp = _class2 = function (_PureComponent) {
  _inherits(ElementQuery, _PureComponent);

  function ElementQuery(props) {
    _classCallCheck(this, ElementQuery);

    var _this = _possibleConstructorReturn(this, (ElementQuery.__proto__ || Object.getPrototypeOf(ElementQuery)).call(this, props));

    _this.state = { size: props.default, sizes: ElementQuery.sortSizes(_this.props.sizes) };
    return _this;
  }

  _createClass(ElementQuery, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      ElementQuery.register({
        component: this,
        sizes: this.state.sizes,
        node: this.node
      });

      ElementQuery.sizeComponent({
        component: this,
        sizes: this.state.sizes,
        node: this.node
      });

      // wait a few frames then check sizes again
      (0, _raf2.default)(function () {
        return (0, _raf2.default)(function () {
          ElementQuery.sizeComponent({
            component: _this2,
            sizes: _this2.state.sizes,
            node: _this2.node
          });
        });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState({ sizes: ElementQuery.sortSizes(newProps.sizes) });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      ElementQuery.unregister(this);
    }
  }, {
    key: 'setSize',
    value: function setSize(size) {
      this.setState({ size: size });
    }
  }, {
    key: 'setNode',
    value: function setNode(node) {
      this.node = node;
    }
  }, {
    key: 'makeChild',
    value: function makeChild(child, className) {
      // just add our new class name onto the chilren, this alleviates the need to
      // create a wrapper div
      var classNames = [];
      var existingClassName = child.props.className;
      if (existingClassName) classNames.push(existingClassName);
      if (className) classNames.push(className);

      return (0, _react.cloneElement)(child, {
        className: classNames.join(' '),
        ref: this.setNode
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var size = isBrowser ? this.state.size : this.props.default;
      var className = size ? this.props.makeClassName(size) : '';
      var children = this.props.children;

      var child = Array.isArray(children) && _react.Children.count(children) === 1 ? children[0] : children;

      // because we're going to just apply the className onto the child, we can
      // only accept one. React doesn't let us return an array of children.
      // returning a wrapper div is undesirable because it creates un-expected DOM
      // like real element queries, this enables the user to do things like wrap
      // an `<li>` in an element query and not break HTML semantics, or use
      // element query and not break expectations around things like flexbox.
      return this.makeChild(_react.Children.only(child), className);
    }
  }], [{
    key: 'listen',


    // use only one global listener â€¦ for perf!
    value: function listen() {
      window.addEventListener('resize', ElementQuery.onResize);
      ElementQuery._isListening = true;
    }
  }, {
    key: 'unListen',
    value: function unListen() {
      window.removeEventListener('resize', ElementQuery.onResize);
      ElementQuery._isListening = false;
    }
  }, {
    key: 'register',
    value: function register(_ref) {
      var component = _ref.component,
          sizes = _ref.sizes,
          onResize = _ref.onResize,
          node = _ref.node;

      if (!isBrowser) return;

      ElementQuery._componentMap.set(component, {
        sizes: sizes,
        node: node
        // if a custom onResize callback is passed, e.g. using this lib just for
        // the resize event listener, use that. Else, assume we're sizing the
        // component
        , onResize: onResize || ElementQuery.sizeComponent
      });

      if (!ElementQuery._isListening && isBrowser) ElementQuery.listen();
    }
  }, {
    key: 'unregister',
    value: function unregister(component) {
      if (!isBrowser) return;

      ElementQuery._componentMap.delete(component);
      if (!ElementQuery._componentMap.size && isBrowser) ElementQuery.unListen();
    }
  }, {
    key: 'sizeComponents',
    value: function sizeComponents() {
      ElementQuery._componentMap.forEach(function (componentOptions, component) {
        componentOptions.onResize({ component: component,
          sizes: componentOptions.sizes,
          node: componentOptions.node
        });
      });
    }
  }, {
    key: 'sizeComponent',
    value: function sizeComponent(_ref2) {
      var component = _ref2.component,
          _ref2$sizes = _ref2.sizes,
          sizes = _ref2$sizes === void 0 ? [] : _ref2$sizes,
          node = _ref2.node;

      if (!node) return;

      var width = node.clientWidth;
      var smallestSize = (0, _lodash6.default)(sizes);

      var matchedSize = '';
      var matchedWidth = smallestSize.width;

      // use Array#some() here because #forEach() has no early exit
      sizes.some(function (test) {
        // check for:
        // 1. the el width is greater or equal to the test width
        // 2. the el width is greater or equal to the min test width
        if (width >= test.width && width >= matchedWidth) {
          matchedSize = test.name;
          matchedWidth = test.width;
          return false;
        }
        // once that condition isn't true, we've found the correct match; bail
        return true;
      });
      component.setSize(matchedSize);
    }

    // becuase we're going to itterate through by size, we need to ensure that the
    // sizes are sorted

  }, {
    key: 'sortSizes',
    value: function sortSizes(sizes) {
      return (0, _lodash4.default)(sizes, 'width');
    }
  }, {
    key: 'onResize',
    value: function onResize() {
      if (ElementQuery._frame) _raf2.default.cancel(ElementQuery._frame);
      ElementQuery._frame = (0, _raf2.default)(ElementQuery.sizeComponents);
    }
  }]);

  return ElementQuery;
}(_react.PureComponent), _class2.propTypes = {
  children: _proptypes2.default.node.isRequired,
  default: _proptypes2.default.string,
  sizes: _proptypes2.default.arrayOf(_proptypes2.default.shape({
    name: _proptypes2.default.string.isRequired,
    width: function width(props, propName, componentName) {
      var size = props[propName];
      if (!(0, _lodash8.default)(size)) {
        return new Error(componentName + ' received a width of `' + size + '` for `' + props.name + '`. A number was expected.');
      }

      if (size === 0) {
        return new Error(componentName + ' received a width of `' + size + '` for `' + props.name + '`. Widths are min-widths, and should be treated as "mobile-first". The default state can be set with the `default` prop, or even better with the "default" styles in CSS.');
      }
      return null;
    }
  })).isRequired,
  makeClassName: _proptypes2.default.func
}, _class2.defaultProps = {
  // if no default is defined, assume no className. This is the default browser
  // behavior
  default: '',
  sizes: [],
  makeClassName: _lodash2.default,
  children: _react2.default.createElement('span', null)
}, _class2._isListening = false, _class2._componentMap = new Map(), _temp), (_applyDecoratedDescriptor(_class.prototype, 'setSize', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'setSize'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setNode', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'setNode'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'makeChild', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'makeChild'), _class.prototype)), _class);
exports.default = ElementQuery;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,