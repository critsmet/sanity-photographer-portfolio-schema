{"version":3,"sources":["../../src/request/node-request.js"],"names":["url","require","http","https","concat","follow","timedOut","isStream","toStream","objectAssign","progressStream","decompressResponse","adapter","reduceResponse","res","reqUrl","method","body","headers","statusCode","statusMessage","module","exports","context","cb","options","uri","parse","bodyType","Buffer","isBuffer","Error","lengthHeader","bodySize","length","aborted","callback","err","channels","abort","subscribe","reqOpts","injectedResponse","applyMiddleware","undefined","cbTimer","setImmediate","clearImmediate","protocol","maxRedirects","request","tryDecompress","response","resStream","data","rawBody","toString","reduced","responseUrl","timeout","once","getProgressStream","bodyStream","progress","pipe","end","bodyIsStream","byteLength","time"],"mappings":"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","file":"node-request.js","sourcesContent":["const url = require('url')\nconst http = require('http')\nconst https = require('https')\nconst concat = require('simple-concat')\nconst follow = require('follow-redirects')\nconst timedOut = require('timed-out')\nconst isStream = require('is-stream')\nconst toStream = require('into-stream')\nconst objectAssign = require('object-assign')\nconst progressStream = require('progress-stream')\nconst decompressResponse = require('decompress-response')\n\nconst adapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (res, reqUrl, method, body) => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nmodule.exports = (context, cb) => {\n  const options = context.options\n  const uri = objectAssign({}, url.parse(options.url))\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n\n  if (bodyType !== 'undefined' && bodyType !== 'stream' && bodyType !== 'string' && !Buffer.isBuffer(options.body)) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader = {}\n  if (options.bodySize) {\n    lengthHeader['Content-Length'] = options.bodySize\n  } else if (options.body && Buffer.isBuffer(options.body)) {\n    lengthHeader['Content-Length'] = options.body.length\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err, res) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  const reqOpts = objectAssign(uri, {\n    method: options.method,\n    headers: objectAssign({}, options.headers, lengthHeader)\n  })\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  let protocol = uri.protocol === 'https:' ? https : http\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    protocol = uri.protocol === 'https:' ? follow.https : follow.http\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  const request = protocol.request(reqOpts, response => {\n    // See if we should try to decompress the response\n    const tryDecompress = reqOpts.method !== 'HEAD'\n    const res = tryDecompress ? decompressResponse(response) : response\n\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context\n    })\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err, data) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(\n        res,\n        response.responseUrl || options.url, // On redirects, `responseUrl` is set\n        reqOpts.method,\n        body\n      )\n\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n"]}